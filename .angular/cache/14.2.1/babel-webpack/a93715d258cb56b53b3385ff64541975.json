{"ast":null,"code":"import _assertThisInitialized from \"C:/Users/\\u05D0\\u05D1\\u05D9\\u05D1/Documents/\\u05DC\\u05D9\\u05DE\\u05D5\\u05D3\\u05D9\\u05DD/\\u05D4\\u05D2\\u05E9\\u05D4 \\u05EA\\u05DB\\u05E0\\u05D5\\u05EA/Client22/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _createForOfIteratorHelper from \"C:/Users/\\u05D0\\u05D1\\u05D9\\u05D1/Documents/\\u05DC\\u05D9\\u05DE\\u05D5\\u05D3\\u05D9\\u05DD/\\u05D4\\u05D2\\u05E9\\u05D4 \\u05EA\\u05DB\\u05E0\\u05D5\\u05EA/Client22/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _toConsumableArray from \"C:/Users/\\u05D0\\u05D1\\u05D9\\u05D1/Documents/\\u05DC\\u05D9\\u05DE\\u05D5\\u05D3\\u05D9\\u05DD/\\u05D4\\u05D2\\u05E9\\u05D4 \\u05EA\\u05DB\\u05E0\\u05D5\\u05EA/Client22/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _inherits from \"C:/Users/\\u05D0\\u05D1\\u05D9\\u05D1/Documents/\\u05DC\\u05D9\\u05DE\\u05D5\\u05D3\\u05D9\\u05DD/\\u05D4\\u05D2\\u05E9\\u05D4 \\u05EA\\u05DB\\u05E0\\u05D5\\u05EA/Client22/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/\\u05D0\\u05D1\\u05D9\\u05D1/Documents/\\u05DC\\u05D9\\u05DE\\u05D5\\u05D3\\u05D9\\u05DD/\\u05D4\\u05D2\\u05E9\\u05D4 \\u05EA\\u05DB\\u05E0\\u05D5\\u05EA/Client22/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _classCallCheck from \"C:/Users/\\u05D0\\u05D1\\u05D9\\u05D1/Documents/\\u05DC\\u05D9\\u05DE\\u05D5\\u05D3\\u05D9\\u05DD/\\u05D4\\u05D2\\u05E9\\u05D4 \\u05EA\\u05DB\\u05E0\\u05D5\\u05EA/Client22/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/\\u05D0\\u05D1\\u05D9\\u05D1/Documents/\\u05DC\\u05D9\\u05DE\\u05D5\\u05D3\\u05D9\\u05DD/\\u05D4\\u05D2\\u05E9\\u05D4 \\u05EA\\u05DB\\u05E0\\u05D5\\u05EA/Client22/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n\n/**\n * @license Angular v6.1.10\n * (c) 2010-2018 Google, Inc. https://angular.io/\n * License: MIT\n */\nimport { InjectionToken, ɵisObservable, ɵisPromise, Directive, ElementRef, Renderer2, forwardRef, Inject, Optional, Injectable, Injector, Input, Host, ɵlooseIdentical, isDevMode, Self, EventEmitter, SkipSelf, Output, Version, NgModule } from '@angular/core';\nimport { forkJoin, from } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { ɵgetDOM } from '@angular/platform-browser';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * \\@description\n * Base class for control directives.\n *\n * This class is only used internally in the `ReactiveFormsModule` and the `FormsModule`.\n *\n * @abstract\n */\n\nimport * as ɵngcc0 from '@angular/core';\nvar AbstractControlDirective = /*#__PURE__*/(function () {\n  var AbstractControlDirective = /*#__PURE__*/function () {\n    function AbstractControlDirective() {\n      _classCallCheck(this, AbstractControlDirective);\n    }\n\n    _createClass(AbstractControlDirective, [{\n      key: \"value\",\n      get:\n      /**\n       * \\@description\n       * Reports the value of the control if it is present, otherwise null.\n       * @return {?}\n       */\n      function get() {\n        return this.control ? this.control.value : null;\n      }\n      /**\n       * \\@description\n       * Reports whether the control is valid. A control is considered valid if no\n       * validation errors exist with the current value.\n       * If the control is not present, null is returned.\n       * @return {?}\n       */\n\n    }, {\n      key: \"valid\",\n      get: function get() {\n        return this.control ? this.control.valid : null;\n      }\n      /**\n       * \\@description\n       * Reports whether the control is invalid, meaning that an error exists in the input value.\n       * If the control is not present, null is returned.\n       * @return {?}\n       */\n\n    }, {\n      key: \"invalid\",\n      get: function get() {\n        return this.control ? this.control.invalid : null;\n      }\n      /**\n       * \\@description\n       * Reports whether a control is pending, meaning that that async validation is occurring and\n       * errors are not yet available for the input value. If the control is not present, null is\n       * returned.\n       * @return {?}\n       */\n\n    }, {\n      key: \"pending\",\n      get: function get() {\n        return this.control ? this.control.pending : null;\n      }\n      /**\n       * \\@description\n       * Reports whether the control is disabled, meaning that the control is disabled\n       * in the UI and is exempt from validation checks and excluded from aggregate\n       * values of ancestor controls. If the control is not present, null is returned.\n       * @return {?}\n       */\n\n    }, {\n      key: \"disabled\",\n      get: function get() {\n        return this.control ? this.control.disabled : null;\n      }\n      /**\n       * \\@description\n       * Reports whether the control is enabled, meaning that the control is included in ancestor\n       * calculations of validity or value. If the control is not present, null is returned.\n       * @return {?}\n       */\n\n    }, {\n      key: \"enabled\",\n      get: function get() {\n        return this.control ? this.control.enabled : null;\n      }\n      /**\n       * \\@description\n       * Reports the control's validation errors. If the control is not present, null is returned.\n       * @return {?}\n       */\n\n    }, {\n      key: \"errors\",\n      get: function get() {\n        return this.control ? this.control.errors : null;\n      }\n      /**\n       * \\@description\n       * Reports whether the control is pristine, meaning that the user has not yet changed\n       * the value in the UI. If the control is not present, null is returned.\n       * @return {?}\n       */\n\n    }, {\n      key: \"pristine\",\n      get: function get() {\n        return this.control ? this.control.pristine : null;\n      }\n      /**\n       * \\@description\n       * Reports whether the control is dirty, meaning that the user has changed\n       * the value in the UI. If the control is not present, null is returned.\n       * @return {?}\n       */\n\n    }, {\n      key: \"dirty\",\n      get: function get() {\n        return this.control ? this.control.dirty : null;\n      }\n      /**\n       * \\@description\n       * Reports whether the control is touched, meaning that the user has triggered\n       * a `blur` event on it. If the control is not present, null is returned.\n       * @return {?}\n       */\n\n    }, {\n      key: \"touched\",\n      get: function get() {\n        return this.control ? this.control.touched : null;\n      }\n      /**\n       * \\@description\n       * Reports the validation status of the control. Possible values include:\n       * 'VALID', 'INVALID', 'DISABLED', and 'PENDING'.\n       * If the control is not present, null is returned.\n       * @return {?}\n       */\n\n    }, {\n      key: \"status\",\n      get: function get() {\n        return this.control ? this.control.status : null;\n      }\n      /**\n       * \\@description\n       * Reports whether the control is untouched, meaning that the user has not yet triggered\n       * a `blur` event on it. If the control is not present, null is returned.\n       * @return {?}\n       */\n\n    }, {\n      key: \"untouched\",\n      get: function get() {\n        return this.control ? this.control.untouched : null;\n      }\n      /**\n       * \\@description\n       * Returns a multicasting observable that emits a validation status whenever it is\n       * calculated for the control. If the control is not present, null is returned.\n       * @return {?}\n       */\n\n    }, {\n      key: \"statusChanges\",\n      get: function get() {\n        return this.control ? this.control.statusChanges : null;\n      }\n      /**\n       * \\@description\n       * Returns a multicasting observable of value changes for the control that emits every time the\n       * value of the control changes in the UI or programmatically.\n       * If the control is not present, null is returned.\n       * @return {?}\n       */\n\n    }, {\n      key: \"valueChanges\",\n      get: function get() {\n        return this.control ? this.control.valueChanges : null;\n      }\n      /**\n       * \\@description\n       * Returns an array that represents the path from the top-level form to this control.\n       * Each index is the string name of the control on that level.\n       * @return {?}\n       */\n\n    }, {\n      key: \"path\",\n      get: function get() {\n        return null;\n      }\n      /**\n       * \\@description\n       * Resets the control with the provided value if the control is present.\n       * @param {?=} value\n       * @return {?}\n       */\n\n    }, {\n      key: \"reset\",\n      value: function reset() {\n        var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;\n        if (this.control) this.control.reset(value);\n      }\n      /**\n       * \\@description\n       * Reports whether the control with the given path has the error specified.\n       * If no path is given, it checks for the error on the present control.\n       * If the control is not present, false is returned.\n       * @param {?} errorCode\n       * @param {?=} path\n       * @return {?}\n       */\n\n    }, {\n      key: \"hasError\",\n      value: function hasError(errorCode, path) {\n        return this.control ? this.control.hasError(errorCode, path) : false;\n      }\n      /**\n       * \\@description\n       * Reports error data for the control with the given path.\n       * If the control is not present, null is returned.\n       * @param {?} errorCode\n       * @param {?=} path\n       * @return {?}\n       */\n\n    }, {\n      key: \"getError\",\n      value: function getError(errorCode, path) {\n        return this.control ? this.control.getError(errorCode, path) : null;\n      }\n    }]);\n\n    return AbstractControlDirective;\n  }();\n\n  AbstractControlDirective.ɵfac = function AbstractControlDirective_Factory(t) {\n    return new (t || AbstractControlDirective)();\n  };\n\n  AbstractControlDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: AbstractControlDirective\n  });\n  /**\n   * @fileoverview added by tsickle\n   * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n   */\n\n  /**\n   * \\@description\n   * A base class for directives that contain multiple registered instances of `NgControl`.\n   * Only used by the forms module.\n   * @abstract\n   */\n\n  return AbstractControlDirective;\n})();\nvar ControlContainer = /*#__PURE__*/(function () {\n  var ControlContainer = /*#__PURE__*/function (_AbstractControlDirec) {\n    _inherits(ControlContainer, _AbstractControlDirec);\n\n    var _super = _createSuper(ControlContainer);\n\n    function ControlContainer() {\n      _classCallCheck(this, ControlContainer);\n\n      return _super.apply(this, arguments);\n    }\n\n    _createClass(ControlContainer, [{\n      key: \"formDirective\",\n      get:\n      /**\n       * \\@description\n       * The top-level form directive for the control.\n       * @return {?}\n       */\n      function get() {\n        return null;\n      }\n      /**\n       * \\@description\n       * The path to this group.\n       * @return {?}\n       */\n\n    }, {\n      key: \"path\",\n      get: function get() {\n        return null;\n      }\n    }]);\n\n    return ControlContainer;\n  }(AbstractControlDirective);\n\n  ControlContainer.ɵfac = /*@__PURE__*/function () {\n    var ɵControlContainer_BaseFactory;\n    return function ControlContainer_Factory(t) {\n      return (ɵControlContainer_BaseFactory || (ɵControlContainer_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(ControlContainer)))(t || ControlContainer);\n    };\n  }();\n\n  ControlContainer.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: ControlContainer,\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  /**\n   * @fileoverview added by tsickle\n   * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n   */\n\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n\n  return ControlContainer;\n})();\n\nfunction isEmptyInputValue(value) {\n  // we don't check for string here so it also works with arrays\n  return value == null || value.length === 0;\n}\n/** *\n * \\@description\n * An `InjectionToken` for registering additional synchronous validators used with `AbstractControl`s.\n *\n * @see `NG_ASYNC_VALIDATORS`\n *\n * \\@usageNotes\n *\n * ### Providing a custom validator\n *\n * The following example registers a custom validator directive. Adding the validator to the\n * existing collection of validators requires the `multi: true` option.\n *\n * ```typescript\n * \\@Directive({\n *   selector: '[customValidator]',\n *   providers: [{provide: NG_VALIDATORS, useExisting: CustomValidatorDirective, multi: true}]\n * })\n * class CustomValidatorDirective implements Validator {\n *   validate(control: AbstractControl): ValidationErrors | null {\n *     return { 'custom': true };\n *   }\n * }\n * ```\n *\n  @type {?} */\n\n\nvar NG_VALIDATORS = /*#__PURE__*/new InjectionToken('NgValidators');\n/** *\n * \\@description\n * An `InjectionToken` for registering additional asynchronous validators used with `AbstractControl`s.\n *\n * @see `NG_VALIDATORS`\n *\n  @type {?} */\n\nvar NG_ASYNC_VALIDATORS = /*#__PURE__*/new InjectionToken('NgAsyncValidators');\n/** @type {?} */\n\nvar EMAIL_REGEXP = /^(?=.{1,254}$)(?=.{1,64}@)[-!#$%&'*+/0-9=?A-Z^_`a-z{|}~]+(\\.[-!#$%&'*+/0-9=?A-Z^_`a-z{|}~]+)*@[A-Za-z0-9]([A-Za-z0-9-]{0,61}[A-Za-z0-9])?(\\.[A-Za-z0-9]([A-Za-z0-9-]{0,61}[A-Za-z0-9])?)*$/;\n/**\n * \\@description\n * Provides a set of built-in validators that can be used by form controls.\n *\n * A validator is a function that processes a `FormControl` or collection of\n * controls and returns an error map or null. A null map means that validation has passed.\n *\n * @see [Form Validation](/guide/form-validation)\n *\n */\n\nvar Validators = /*#__PURE__*/function () {\n  function Validators() {\n    _classCallCheck(this, Validators);\n  }\n\n  _createClass(Validators, null, [{\n    key: \"min\",\n    value:\n    /**\n     * \\@description\n     * Validator that requires the control's value to be greater than or equal to the provided number.\n     * The validator exists only as a function and not as a directive.\n     *\n     * \\@usageNotes\n     *\n     * ### Validate against a minimum of 3\n     *\n     * ```typescript\n     * const control = new FormControl(2, Validators.min(3));\n     *\n     * console.log(control.errors); // {min: {min: 3, actual: 2}}\n     * ```\n     *\n     * @param {?} min\n     * @return {?} A validator function that returns an error map with the\n     * `min` property if the validation check fails, otherwise `null`.\n     *\n     */\n    function min(_min) {\n      return function (control) {\n        if (isEmptyInputValue(control.value) || isEmptyInputValue(_min)) {\n          return null; // don't validate empty values to allow optional controls\n        }\n        /** @type {?} */\n\n\n        var value = parseFloat(control.value); // Controls with NaN values after parsing should be treated as not having a\n        // minimum, per the HTML forms spec: https://www.w3.org/TR/html5/forms.html#attr-input-min\n\n        return !isNaN(value) && value < _min ? {\n          'min': {\n            'min': _min,\n            'actual': control.value\n          }\n        } : null;\n      };\n    }\n    /**\n     * \\@description\n     * Validator that requires the control's value to be less than or equal to the provided number.\n     * The validator exists only as a function and not as a directive.\n     *\n     * \\@usageNotes\n     *\n     * ### Validate against a maximum of 15\n     *\n     * ```typescript\n     * const control = new FormControl(16, Validators.max(15));\n     *\n     * console.log(control.errors); // {max: {max: 15, actual: 16}}\n     * ```\n     *\n     * @param {?} max\n     * @return {?} A validator function that returns an error map with the\n     * `max` property if the validation check fails, otherwise `null`.\n     *\n     */\n\n  }, {\n    key: \"max\",\n    value: function max(_max) {\n      return function (control) {\n        if (isEmptyInputValue(control.value) || isEmptyInputValue(_max)) {\n          return null; // don't validate empty values to allow optional controls\n        }\n        /** @type {?} */\n\n\n        var value = parseFloat(control.value); // Controls with NaN values after parsing should be treated as not having a\n        // maximum, per the HTML forms spec: https://www.w3.org/TR/html5/forms.html#attr-input-max\n\n        return !isNaN(value) && value > _max ? {\n          'max': {\n            'max': _max,\n            'actual': control.value\n          }\n        } : null;\n      };\n    }\n    /**\n     * \\@description\n     * Validator that requires the control have a non-empty value.\n     *\n     * \\@usageNotes\n     *\n     * ### Validate that the field is non-empty\n     *\n     * ```typescript\n     * const control = new FormControl('', Validators.required);\n     *\n     * console.log(control.errors); // {required: true}\n     * ```\n     *\n     * @param {?} control\n     * @return {?} An error map with the `required` property\n     * if the validation check fails, otherwise `null`.\n     *\n     */\n\n  }, {\n    key: \"required\",\n    value: function required(control) {\n      return isEmptyInputValue(control.value) ? {\n        'required': true\n      } : null;\n    }\n    /**\n     * \\@description\n     * Validator that requires the control's value be true. This validator is commonly\n     * used for required checkboxes.\n     *\n     * \\@usageNotes\n     *\n     * ### Validate that the field value is true\n     *\n     * ```typescript\n     * const control = new FormControl('', Validators.requiredTrue);\n     *\n     * console.log(control.errors); // {required: true}\n     * ```\n     *\n     * @param {?} control\n     * @return {?} An error map that contains the `required` property\n     * set to `true` if the validation check fails, otherwise `null`.\n     */\n\n  }, {\n    key: \"requiredTrue\",\n    value: function requiredTrue(control) {\n      return control.value === true ? null : {\n        'required': true\n      };\n    }\n    /**\n     * \\@description\n     * Validator that requires the control's value pass an email validation test.\n     *\n     * \\@usageNotes\n     *\n     * ### Validate that the field matches a valid email pattern\n     *\n     * ```typescript\n     * const control = new FormControl('bad\\@', Validators.email);\n     *\n     * console.log(control.errors); // {email: true}\n     * ```\n     *\n     * @param {?} control\n     * @return {?} An error map with the `email` property\n     * if the validation check fails, otherwise `null`.\n     *\n     */\n\n  }, {\n    key: \"email\",\n    value: function email(control) {\n      if (isEmptyInputValue(control.value)) {\n        return null; // don't validate empty values to allow optional controls\n      }\n\n      return EMAIL_REGEXP.test(control.value) ? null : {\n        'email': true\n      };\n    }\n    /**\n     * \\@description\n     * Validator that requires the length of the control's value to be greater than or equal\n     * to the provided minimum length. This validator is also provided by default if you use the\n     * the HTML5 `minlength` attribute.\n     *\n     * \\@usageNotes\n     *\n     * ### Validate that the field has a minimum of 3 characters\n     *\n     * ```typescript\n     * const control = new FormControl('ng', Validators.minLength(3));\n     *\n     * console.log(control.errors); // {minlength: {requiredLength: 3, actualLength: 2}}\n     * ```\n     *\n     * ```html\n     * <input minlength=\"5\">\n     * ```\n     *\n     * @param {?} minLength\n     * @return {?} A validator function that returns an error map with the\n     * `minlength` if the validation check fails, otherwise `null`.\n     */\n\n  }, {\n    key: \"minLength\",\n    value: function minLength(_minLength) {\n      return function (control) {\n        if (isEmptyInputValue(control.value)) {\n          return null; // don't validate empty values to allow optional controls\n        }\n        /** @type {?} */\n\n\n        var length = control.value ? control.value.length : 0;\n        return length < _minLength ? {\n          'minlength': {\n            'requiredLength': _minLength,\n            'actualLength': length\n          }\n        } : null;\n      };\n    }\n    /**\n     * \\@description\n     * Validator that requires the length of the control's value to be less than or equal\n     * to the provided maximum length. This validator is also provided by default if you use the\n     * the HTML5 `maxlength` attribute.\n     *\n     * \\@usageNotes\n     *\n     * ### Validate that the field has maximum of 5 characters\n     *\n     * ```typescript\n     * const control = new FormControl('Angular', Validators.maxLength(5));\n     *\n     * console.log(control.errors); // {maxlength: {requiredLength: 5, actualLength: 7}}\n     * ```\n     *\n     * ```html\n     * <input maxlength=\"5\">\n     * ```\n     *\n     * @param {?} maxLength\n     * @return {?} A validator function that returns an error map with the\n     * `maxlength` property if the validation check fails, otherwise `null`.\n     */\n\n  }, {\n    key: \"maxLength\",\n    value: function maxLength(_maxLength) {\n      return function (control) {\n        /** @type {?} */\n        var length = control.value ? control.value.length : 0;\n        return length > _maxLength ? {\n          'maxlength': {\n            'requiredLength': _maxLength,\n            'actualLength': length\n          }\n        } : null;\n      };\n    }\n    /**\n     * \\@description\n     * Validator that requires the control's value to match a regex pattern. This validator is also\n     * provided\n     * by default if you use the HTML5 `pattern` attribute.\n     *\n     * \\@usageNotes\n     *\n     * ### Validate that the field only contains letters or spaces\n     *\n     * ```typescript\n     * const control = new FormControl('1', Validators.pattern('[a-zA-Z ]*'));\n     *\n     * console.log(control.errors); // {pattern: {requiredPattern: '^[a-zA-Z ]*$', actualValue: '1'}}\n     * ```\n     *\n     * ```html\n     * <input pattern=\"[a-zA-Z ]*\">\n     * ```\n     *\n     * @param {?} pattern\n     * @return {?} A validator function that returns an error map with the\n     * `pattern` property if the validation check fails, otherwise `null`.\n     */\n\n  }, {\n    key: \"pattern\",\n    value: function pattern(_pattern) {\n      if (!_pattern) return Validators.nullValidator;\n      /** @type {?} */\n\n      var regex;\n      /** @type {?} */\n\n      var regexStr;\n\n      if (typeof _pattern === 'string') {\n        regexStr = '';\n        if (_pattern.charAt(0) !== '^') regexStr += '^';\n        regexStr += _pattern;\n        if (_pattern.charAt(_pattern.length - 1) !== '$') regexStr += '$';\n        regex = new RegExp(regexStr);\n      } else {\n        regexStr = _pattern.toString();\n        regex = _pattern;\n      }\n\n      return function (control) {\n        if (isEmptyInputValue(control.value)) {\n          return null; // don't validate empty values to allow optional controls\n        }\n        /** @type {?} */\n\n\n        var value = control.value;\n        return regex.test(value) ? null : {\n          'pattern': {\n            'requiredPattern': regexStr,\n            'actualValue': value\n          }\n        };\n      };\n    }\n    /**\n     * \\@description\n     * Validator that performs no operation.\n     * @param {?} control\n     * @return {?}\n     */\n\n  }, {\n    key: \"nullValidator\",\n    value: function nullValidator(control) {\n      return null;\n    }\n    /**\n     * @param {?} validators\n     * @return {?}\n     */\n\n  }, {\n    key: \"compose\",\n    value: function compose(validators) {\n      if (!validators) return null;\n      /** @type {?} */\n\n      var presentValidators =\n      /** @type {?} */\n      validators.filter(isPresent);\n      if (presentValidators.length == 0) return null;\n      return function (control) {\n        return _mergeErrors(_executeValidators(control, presentValidators));\n      };\n    }\n    /**\n     * \\@description\n     * Compose multiple async validators into a single function that returns the union\n     * of the individual error objects for the provided control.\n     *\n     * @param {?} validators\n     * @return {?} A validator function that returns an error map with the\n     * merged error objects of the async validators if the validation check fails, otherwise `null`.\n     */\n\n  }, {\n    key: \"composeAsync\",\n    value: function composeAsync(validators) {\n      if (!validators) return null;\n      /** @type {?} */\n\n      var presentValidators =\n      /** @type {?} */\n      validators.filter(isPresent);\n      if (presentValidators.length == 0) return null;\n      return function (control) {\n        /** @type {?} */\n        var observables = _executeAsyncValidators(control, presentValidators).map(toObservable);\n\n        return forkJoin(observables).pipe(map(_mergeErrors));\n      };\n    }\n  }]);\n\n  return Validators;\n}();\n/**\n * @param {?} o\n * @return {?}\n */\n\n\nfunction isPresent(o) {\n  return o != null;\n}\n/**\n * @param {?} r\n * @return {?}\n */\n\n\nfunction toObservable(r) {\n  /** @type {?} */\n  var obs = ɵisPromise(r) ? from(r) : r;\n\n  if (!ɵisObservable(obs)) {\n    throw new Error(\"Expected validator to return Promise or Observable.\");\n  }\n\n  return obs;\n}\n/**\n * @param {?} control\n * @param {?} validators\n * @return {?}\n */\n\n\nfunction _executeValidators(control, validators) {\n  return validators.map(function (v) {\n    return v(control);\n  });\n}\n/**\n * @param {?} control\n * @param {?} validators\n * @return {?}\n */\n\n\nfunction _executeAsyncValidators(control, validators) {\n  return validators.map(function (v) {\n    return v(control);\n  });\n}\n/**\n * @param {?} arrayOfErrors\n * @return {?}\n */\n\n\nfunction _mergeErrors(arrayOfErrors) {\n  /** @type {?} */\n  var res = arrayOfErrors.reduce(function (res, errors) {\n    return errors != null ? Object.assign({},\n    /** @type {?} */\n    res, errors) :\n    /** @type {?} */\n    res;\n  }, {});\n  return Object.keys(res).length === 0 ? null : res;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** *\n * Used to provide a `ControlValueAccessor` for form controls.\n *\n * See `DefaultValueAccessor` for how to implement one.\n *\n  @type {?} */\n\n\nvar NG_VALUE_ACCESSOR = /*#__PURE__*/new InjectionToken('NgValueAccessor');\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\nvar CHECKBOX_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: /*#__PURE__*/forwardRef(function () {\n    return CheckboxControlValueAccessor;\n  }),\n  multi: true\n};\n/**\n * The accessor for writing a value and listening to changes on a checkbox input element.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```\n * <input type=\"checkbox\" name=\"rememberLogin\" ngModel>\n * ```\n *\n * \\@ngModule FormsModule\n * \\@ngModule ReactiveFormsModule\n */\n\nvar CheckboxControlValueAccessor = /*#__PURE__*/(function () {\n  var CheckboxControlValueAccessor = /*#__PURE__*/function () {\n    /**\n     * @param {?} _renderer\n     * @param {?} _elementRef\n     */\n    function CheckboxControlValueAccessor(_renderer, _elementRef) {\n      _classCallCheck(this, CheckboxControlValueAccessor);\n\n      this._renderer = _renderer;\n      this._elementRef = _elementRef;\n\n      this.onChange = function (_) {};\n\n      this.onTouched = function () {};\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n\n    _createClass(CheckboxControlValueAccessor, [{\n      key: \"writeValue\",\n      value: function writeValue(value) {\n        this._renderer.setProperty(this._elementRef.nativeElement, 'checked', value);\n      }\n      /**\n       * @param {?} fn\n       * @return {?}\n       */\n\n    }, {\n      key: \"registerOnChange\",\n      value: function registerOnChange(fn) {\n        this.onChange = fn;\n      }\n      /**\n       * @param {?} fn\n       * @return {?}\n       */\n\n    }, {\n      key: \"registerOnTouched\",\n      value: function registerOnTouched(fn) {\n        this.onTouched = fn;\n      }\n      /**\n       * @param {?} isDisabled\n       * @return {?}\n       */\n\n    }, {\n      key: \"setDisabledState\",\n      value: function setDisabledState(isDisabled) {\n        this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n      }\n    }]);\n\n    return CheckboxControlValueAccessor;\n  }();\n\n  CheckboxControlValueAccessor.ɵfac = function CheckboxControlValueAccessor_Factory(t) {\n    return new (t || CheckboxControlValueAccessor)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n  };\n\n  CheckboxControlValueAccessor.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: CheckboxControlValueAccessor,\n    selectors: [[\"input\", \"type\", \"checkbox\", \"formControlName\", \"\"], [\"input\", \"type\", \"checkbox\", \"formControl\", \"\"], [\"input\", \"type\", \"checkbox\", \"ngModel\", \"\"]],\n    hostBindings: function CheckboxControlValueAccessor_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"change\", function CheckboxControlValueAccessor_change_HostBindingHandler($event) {\n          return ctx.onChange($event.target.checked);\n        })(\"blur\", function CheckboxControlValueAccessor_blur_HostBindingHandler() {\n          return ctx.onTouched();\n        });\n      }\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([CHECKBOX_VALUE_ACCESSOR])]\n  });\n  /** @nocollapse */\n\n  return CheckboxControlValueAccessor;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nvar DEFAULT_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: /*#__PURE__*/forwardRef(function () {\n    return DefaultValueAccessor;\n  }),\n  multi: true\n};\n/**\n * We must check whether the agent is Android because composition events\n * behave differently between iOS and Android.\n * @return {?}\n */\n\nfunction _isAndroid() {\n  /** @type {?} */\n  var userAgent = ɵgetDOM() ? ɵgetDOM().getUserAgent() : '';\n  return /android (\\d+)/.test(userAgent.toLowerCase());\n}\n/** *\n * Turn this mode on if you want form directives to buffer IME input until compositionend\n * \\@experimental\n  @type {?} */\n\n\nvar COMPOSITION_BUFFER_MODE = /*#__PURE__*/new InjectionToken('CompositionEventMode');\n/**\n * The default accessor for writing a value and listening to changes that is used by the\n * `NgModel`, `FormControlDirective`, and `FormControlName` directives.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```\n * <input type=\"text\" name=\"searchQuery\" ngModel>\n * ```\n *\n * \\@ngModule FormsModule\n * \\@ngModule ReactiveFormsModule\n */\n\nvar DefaultValueAccessor = /*#__PURE__*/(function () {\n  var DefaultValueAccessor = /*#__PURE__*/function () {\n    /**\n     * @param {?} _renderer\n     * @param {?} _elementRef\n     * @param {?} _compositionMode\n     */\n    function DefaultValueAccessor(_renderer, _elementRef, _compositionMode) {\n      _classCallCheck(this, DefaultValueAccessor);\n\n      this._renderer = _renderer;\n      this._elementRef = _elementRef;\n      this._compositionMode = _compositionMode;\n\n      this.onChange = function (_) {};\n\n      this.onTouched = function () {};\n      /**\n       * Whether the user is creating a composition string (IME events).\n       */\n\n\n      this._composing = false;\n\n      if (this._compositionMode == null) {\n        this._compositionMode = !_isAndroid();\n      }\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n\n    _createClass(DefaultValueAccessor, [{\n      key: \"writeValue\",\n      value: function writeValue(value) {\n        /** @type {?} */\n        var normalizedValue = value == null ? '' : value;\n\n        this._renderer.setProperty(this._elementRef.nativeElement, 'value', normalizedValue);\n      }\n      /**\n       * @param {?} fn\n       * @return {?}\n       */\n\n    }, {\n      key: \"registerOnChange\",\n      value: function registerOnChange(fn) {\n        this.onChange = fn;\n      }\n      /**\n       * @param {?} fn\n       * @return {?}\n       */\n\n    }, {\n      key: \"registerOnTouched\",\n      value: function registerOnTouched(fn) {\n        this.onTouched = fn;\n      }\n      /**\n       * @param {?} isDisabled\n       * @return {?}\n       */\n\n    }, {\n      key: \"setDisabledState\",\n      value: function setDisabledState(isDisabled) {\n        this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n      }\n      /**\n       * \\@internal\n       * @param {?} value\n       * @return {?}\n       */\n\n    }, {\n      key: \"_handleInput\",\n      value: function _handleInput(value) {\n        if (!this._compositionMode || this._compositionMode && !this._composing) {\n          this.onChange(value);\n        }\n      }\n      /**\n       * \\@internal\n       * @return {?}\n       */\n\n    }, {\n      key: \"_compositionStart\",\n      value: function _compositionStart() {\n        this._composing = true;\n      }\n      /**\n       * \\@internal\n       * @param {?} value\n       * @return {?}\n       */\n\n    }, {\n      key: \"_compositionEnd\",\n      value: function _compositionEnd(value) {\n        this._composing = false;\n        this._compositionMode && this.onChange(value);\n      }\n    }]);\n\n    return DefaultValueAccessor;\n  }();\n\n  DefaultValueAccessor.ɵfac = function DefaultValueAccessor_Factory(t) {\n    return new (t || DefaultValueAccessor)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(COMPOSITION_BUFFER_MODE, 8));\n  };\n\n  DefaultValueAccessor.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: DefaultValueAccessor,\n    selectors: [[\"input\", \"formControlName\", \"\", 3, \"type\", \"checkbox\"], [\"textarea\", \"formControlName\", \"\"], [\"input\", \"formControl\", \"\", 3, \"type\", \"checkbox\"], [\"textarea\", \"formControl\", \"\"], [\"input\", \"ngModel\", \"\", 3, \"type\", \"checkbox\"], [\"textarea\", \"ngModel\", \"\"], [\"\", \"ngDefaultControl\", \"\"]],\n    hostBindings: function DefaultValueAccessor_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"input\", function DefaultValueAccessor_input_HostBindingHandler($event) {\n          return ctx._handleInput($event.target.value);\n        })(\"blur\", function DefaultValueAccessor_blur_HostBindingHandler() {\n          return ctx.onTouched();\n        })(\"compositionstart\", function DefaultValueAccessor_compositionstart_HostBindingHandler() {\n          return ctx._compositionStart();\n        })(\"compositionend\", function DefaultValueAccessor_compositionend_HostBindingHandler($event) {\n          return ctx._compositionEnd($event.target.value);\n        });\n      }\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([DEFAULT_VALUE_ACCESSOR])]\n  });\n  /** @nocollapse */\n\n  return DefaultValueAccessor;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @param {?} validator\n * @return {?}\n */\n\n\nfunction normalizeValidator(validator) {\n  if (\n  /** @type {?} */\n  validator.validate) {\n    return function (c) {\n      return (\n        /** @type {?} */\n        validator.validate(c)\n      );\n    };\n  } else {\n    return (\n      /** @type {?} */\n      validator\n    );\n  }\n}\n/**\n * @param {?} validator\n * @return {?}\n */\n\n\nfunction normalizeAsyncValidator(validator) {\n  if (\n  /** @type {?} */\n  validator.validate) {\n    return function (c) {\n      return (\n        /** @type {?} */\n        validator.validate(c)\n      );\n    };\n  } else {\n    return (\n      /** @type {?} */\n      validator\n    );\n  }\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nvar NUMBER_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: /*#__PURE__*/forwardRef(function () {\n    return NumberValueAccessor;\n  }),\n  multi: true\n};\n/**\n * The accessor for writing a number value and listening to changes that is used by the\n * `NgModel`, `FormControlDirective`, and `FormControlName` directives.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```\n * <input type=\"number\" [(ngModel)]=\"age\">\n * ```\n *\n * \\@ngModule FormsModule\n * \\@ngModule ReactiveFormsModule\n */\n\nvar NumberValueAccessor = /*#__PURE__*/(function () {\n  var NumberValueAccessor = /*#__PURE__*/function () {\n    /**\n     * @param {?} _renderer\n     * @param {?} _elementRef\n     */\n    function NumberValueAccessor(_renderer, _elementRef) {\n      _classCallCheck(this, NumberValueAccessor);\n\n      this._renderer = _renderer;\n      this._elementRef = _elementRef;\n\n      this.onChange = function (_) {};\n\n      this.onTouched = function () {};\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n\n    _createClass(NumberValueAccessor, [{\n      key: \"writeValue\",\n      value: function writeValue(value) {\n        /** @type {?} */\n        var normalizedValue = value == null ? '' : value;\n\n        this._renderer.setProperty(this._elementRef.nativeElement, 'value', normalizedValue);\n      }\n      /**\n       * @param {?} fn\n       * @return {?}\n       */\n\n    }, {\n      key: \"registerOnChange\",\n      value: function registerOnChange(fn) {\n        this.onChange = function (value) {\n          fn(value == '' ? null : parseFloat(value));\n        };\n      }\n      /**\n       * @param {?} fn\n       * @return {?}\n       */\n\n    }, {\n      key: \"registerOnTouched\",\n      value: function registerOnTouched(fn) {\n        this.onTouched = fn;\n      }\n      /**\n       * @param {?} isDisabled\n       * @return {?}\n       */\n\n    }, {\n      key: \"setDisabledState\",\n      value: function setDisabledState(isDisabled) {\n        this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n      }\n    }]);\n\n    return NumberValueAccessor;\n  }();\n\n  NumberValueAccessor.ɵfac = function NumberValueAccessor_Factory(t) {\n    return new (t || NumberValueAccessor)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n  };\n\n  NumberValueAccessor.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: NumberValueAccessor,\n    selectors: [[\"input\", \"type\", \"number\", \"formControlName\", \"\"], [\"input\", \"type\", \"number\", \"formControl\", \"\"], [\"input\", \"type\", \"number\", \"ngModel\", \"\"]],\n    hostBindings: function NumberValueAccessor_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"change\", function NumberValueAccessor_change_HostBindingHandler($event) {\n          return ctx.onChange($event.target.value);\n        })(\"input\", function NumberValueAccessor_input_HostBindingHandler($event) {\n          return ctx.onChange($event.target.value);\n        })(\"blur\", function NumberValueAccessor_blur_HostBindingHandler() {\n          return ctx.onTouched();\n        });\n      }\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([NUMBER_VALUE_ACCESSOR])]\n  });\n  /** @nocollapse */\n\n  return NumberValueAccessor;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @return {?}\n */\n\n\nfunction unimplemented() {\n  throw new Error('unimplemented');\n}\n/**\n * \\@description\n * A base class that all control `FormControl`-based directives extend. It binds a `FormControl`\n * object to a DOM element.\n * @abstract\n */\n\n\nvar NgControl = /*#__PURE__*/function (_AbstractControlDirec2) {\n  _inherits(NgControl, _AbstractControlDirec2);\n\n  var _super2 = _createSuper(NgControl);\n\n  function NgControl() {\n    var _this;\n\n    _classCallCheck(this, NgControl);\n\n    _this = _super2.apply(this, arguments);\n    /**\n     * \\@description\n     * The parent form for the control.\n     *\n     * \\@internal\n     */\n\n    _this._parent = null;\n    /**\n     * \\@description\n     * The name for the control\n     */\n\n    _this.name = null;\n    /**\n     * \\@description\n     * The value accessor for the control\n     */\n\n    _this.valueAccessor = null;\n    /**\n     * \\@description\n     * The uncomposed array of synchronous validators for the control\n     *\n     * \\@internal\n     */\n\n    _this._rawValidators = [];\n    /**\n     * \\@description\n     * The uncomposed array of async validators for the control\n     *\n     * \\@internal\n     */\n\n    _this._rawAsyncValidators = [];\n    return _this;\n  }\n  /**\n   * \\@description\n   * The registered synchronous validator function for the control\n   *\n   * @throws An exception that this method is not implemented\n   * @return {?}\n   */\n\n\n  _createClass(NgControl, [{\n    key: \"validator\",\n    get: function get() {\n      return (\n        /** @type {?} */\n        unimplemented()\n      );\n    }\n    /**\n     * \\@description\n     * The registered async validator function for the control\n     *\n     * @throws An exception that this method is not implemented\n     * @return {?}\n     */\n\n  }, {\n    key: \"asyncValidator\",\n    get: function get() {\n      return (\n        /** @type {?} */\n        unimplemented()\n      );\n    }\n  }]);\n\n  return NgControl;\n}(AbstractControlDirective);\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nvar RADIO_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: /*#__PURE__*/forwardRef(function () {\n    return RadioControlValueAccessor;\n  }),\n  multi: true\n};\n/**\n * Internal class used by Angular to uncheck radio buttons with the matching name.\n */\n\nvar RadioControlRegistry = /*#__PURE__*/(function () {\n  var RadioControlRegistry = /*#__PURE__*/function () {\n    function RadioControlRegistry() {\n      _classCallCheck(this, RadioControlRegistry);\n\n      this._accessors = [];\n    }\n    /**\n     * @param {?} control\n     * @param {?} accessor\n     * @return {?}\n     */\n\n\n    _createClass(RadioControlRegistry, [{\n      key: \"add\",\n      value: function add(control, accessor) {\n        this._accessors.push([control, accessor]);\n      }\n      /**\n       * @param {?} accessor\n       * @return {?}\n       */\n\n    }, {\n      key: \"remove\",\n      value: function remove(accessor) {\n        for (var i = this._accessors.length - 1; i >= 0; --i) {\n          if (this._accessors[i][1] === accessor) {\n            this._accessors.splice(i, 1);\n\n            return;\n          }\n        }\n      }\n      /**\n       * @param {?} accessor\n       * @return {?}\n       */\n\n    }, {\n      key: \"select\",\n      value: function select(accessor) {\n        var _this2 = this;\n\n        this._accessors.forEach(function (c) {\n          if (_this2._isSameGroup(c, accessor) && c[1] !== accessor) {\n            c[1].fireUncheck(accessor.value);\n          }\n        });\n      }\n      /**\n       * @param {?} controlPair\n       * @param {?} accessor\n       * @return {?}\n       */\n\n    }, {\n      key: \"_isSameGroup\",\n      value: function _isSameGroup(controlPair, accessor) {\n        if (!controlPair[0].control) return false;\n        return controlPair[0]._parent === accessor._control._parent && controlPair[1].name === accessor.name;\n      }\n    }]);\n\n    return RadioControlRegistry;\n  }();\n\n  RadioControlRegistry.ɵfac = function RadioControlRegistry_Factory(t) {\n    return new (t || RadioControlRegistry)();\n  };\n\n  RadioControlRegistry.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: RadioControlRegistry,\n    factory: RadioControlRegistry.ɵfac\n  });\n  return RadioControlRegistry;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * \\@description\n *\n * Writes radio control values and listens to radio control changes.\n *\n * Used by `NgModel`, `FormControlDirective`, and `FormControlName`\n * to keep the view synced with the `FormControl` model.\n *\n * If you have imported the `FormsModule` or the `ReactiveFormsModule`, this\n * value accessor will be active on any radio control that has a form directive. You do\n * **not** need to add a special selector to activate it.\n *\n * \\@usageNotes\n * ### How to use radio buttons with form directives\n *\n * To use radio buttons in a template-driven form, you'll want to ensure that radio buttons\n * in the same group have the same `name` attribute.  Radio buttons with different `name`\n * attributes do not affect each other.\n *\n * {\\@example forms/ts/radioButtons/radio_button_example.ts region='TemplateDriven'}\n *\n * When using radio buttons in a reactive form, radio buttons in the same group should have the\n * same `formControlName`. You can also add a `name` attribute, but it's optional.\n *\n * {\\@example forms/ts/reactiveRadioButtons/reactive_radio_button_example.ts region='Reactive'}\n *\n * \\@ngModule FormsModule\n * \\@ngModule ReactiveFormsModule\n */\n\n\nvar RadioControlValueAccessor = /*#__PURE__*/(function () {\n  var RadioControlValueAccessor = /*#__PURE__*/function () {\n    /**\n     * @param {?} _renderer\n     * @param {?} _elementRef\n     * @param {?} _registry\n     * @param {?} _injector\n     */\n    function RadioControlValueAccessor(_renderer, _elementRef, _registry, _injector) {\n      _classCallCheck(this, RadioControlValueAccessor);\n\n      this._renderer = _renderer;\n      this._elementRef = _elementRef;\n      this._registry = _registry;\n      this._injector = _injector;\n\n      this.onChange = function () {};\n\n      this.onTouched = function () {};\n    }\n    /**\n     * @return {?}\n     */\n\n\n    _createClass(RadioControlValueAccessor, [{\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        this._control = this._injector.get(NgControl);\n\n        this._checkName();\n\n        this._registry.add(this._control, this);\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this._registry.remove(this);\n      }\n      /**\n       * @param {?} value\n       * @return {?}\n       */\n\n    }, {\n      key: \"writeValue\",\n      value: function writeValue(value) {\n        this._state = value === this.value;\n\n        this._renderer.setProperty(this._elementRef.nativeElement, 'checked', this._state);\n      }\n      /**\n       * @param {?} fn\n       * @return {?}\n       */\n\n    }, {\n      key: \"registerOnChange\",\n      value: function registerOnChange(fn) {\n        var _this3 = this;\n\n        this._fn = fn;\n\n        this.onChange = function () {\n          fn(_this3.value);\n\n          _this3._registry.select(_this3);\n        };\n      }\n      /**\n       * @param {?} value\n       * @return {?}\n       */\n\n    }, {\n      key: \"fireUncheck\",\n      value: function fireUncheck(value) {\n        this.writeValue(value);\n      }\n      /**\n       * @param {?} fn\n       * @return {?}\n       */\n\n    }, {\n      key: \"registerOnTouched\",\n      value: function registerOnTouched(fn) {\n        this.onTouched = fn;\n      }\n      /**\n       * @param {?} isDisabled\n       * @return {?}\n       */\n\n    }, {\n      key: \"setDisabledState\",\n      value: function setDisabledState(isDisabled) {\n        this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"_checkName\",\n      value: function _checkName() {\n        if (this.name && this.formControlName && this.name !== this.formControlName) {\n          this._throwNameError();\n        }\n\n        if (!this.name && this.formControlName) this.name = this.formControlName;\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"_throwNameError\",\n      value: function _throwNameError() {\n        throw new Error(\"\\n      If you define both a name and a formControlName attribute on your radio button, their values\\n      must match. Ex: <input type=\\\"radio\\\" formControlName=\\\"food\\\" name=\\\"food\\\">\\n    \");\n      }\n    }]);\n\n    return RadioControlValueAccessor;\n  }();\n\n  RadioControlValueAccessor.ɵfac = function RadioControlValueAccessor_Factory(t) {\n    return new (t || RadioControlValueAccessor)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(RadioControlRegistry), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector));\n  };\n\n  RadioControlValueAccessor.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: RadioControlValueAccessor,\n    selectors: [[\"input\", \"type\", \"radio\", \"formControlName\", \"\"], [\"input\", \"type\", \"radio\", \"formControl\", \"\"], [\"input\", \"type\", \"radio\", \"ngModel\", \"\"]],\n    hostBindings: function RadioControlValueAccessor_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"change\", function RadioControlValueAccessor_change_HostBindingHandler() {\n          return ctx.onChange();\n        })(\"blur\", function RadioControlValueAccessor_blur_HostBindingHandler() {\n          return ctx.onTouched();\n        });\n      }\n    },\n    inputs: {\n      name: \"name\",\n      formControlName: \"formControlName\",\n      value: \"value\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([RADIO_VALUE_ACCESSOR])]\n  });\n  /** @nocollapse */\n\n  return RadioControlValueAccessor;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nvar RANGE_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: /*#__PURE__*/forwardRef(function () {\n    return RangeValueAccessor;\n  }),\n  multi: true\n};\n/**\n * The accessor for writing a range value and listening to changes that is used by the\n * `NgModel`, `FormControlDirective`, and `FormControlName` directives.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```\n * <input type=\"range\" [(ngModel)]=\"age\" >\n * ```\n *\n * \\@ngModule FormsModule\n * \\@ngModule ReactiveFormsModule\n */\n\nvar RangeValueAccessor = /*#__PURE__*/(function () {\n  var RangeValueAccessor = /*#__PURE__*/function () {\n    /**\n     * @param {?} _renderer\n     * @param {?} _elementRef\n     */\n    function RangeValueAccessor(_renderer, _elementRef) {\n      _classCallCheck(this, RangeValueAccessor);\n\n      this._renderer = _renderer;\n      this._elementRef = _elementRef;\n\n      this.onChange = function (_) {};\n\n      this.onTouched = function () {};\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n\n    _createClass(RangeValueAccessor, [{\n      key: \"writeValue\",\n      value: function writeValue(value) {\n        this._renderer.setProperty(this._elementRef.nativeElement, 'value', parseFloat(value));\n      }\n      /**\n       * @param {?} fn\n       * @return {?}\n       */\n\n    }, {\n      key: \"registerOnChange\",\n      value: function registerOnChange(fn) {\n        this.onChange = function (value) {\n          fn(value == '' ? null : parseFloat(value));\n        };\n      }\n      /**\n       * @param {?} fn\n       * @return {?}\n       */\n\n    }, {\n      key: \"registerOnTouched\",\n      value: function registerOnTouched(fn) {\n        this.onTouched = fn;\n      }\n      /**\n       * @param {?} isDisabled\n       * @return {?}\n       */\n\n    }, {\n      key: \"setDisabledState\",\n      value: function setDisabledState(isDisabled) {\n        this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n      }\n    }]);\n\n    return RangeValueAccessor;\n  }();\n\n  RangeValueAccessor.ɵfac = function RangeValueAccessor_Factory(t) {\n    return new (t || RangeValueAccessor)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n  };\n\n  RangeValueAccessor.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: RangeValueAccessor,\n    selectors: [[\"input\", \"type\", \"range\", \"formControlName\", \"\"], [\"input\", \"type\", \"range\", \"formControl\", \"\"], [\"input\", \"type\", \"range\", \"ngModel\", \"\"]],\n    hostBindings: function RangeValueAccessor_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"change\", function RangeValueAccessor_change_HostBindingHandler($event) {\n          return ctx.onChange($event.target.value);\n        })(\"input\", function RangeValueAccessor_input_HostBindingHandler($event) {\n          return ctx.onChange($event.target.value);\n        })(\"blur\", function RangeValueAccessor_blur_HostBindingHandler() {\n          return ctx.onTouched();\n        });\n      }\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([RANGE_VALUE_ACCESSOR])]\n  });\n  /** @nocollapse */\n\n  return RangeValueAccessor;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @type {?} */\n\n\nvar FormErrorExamples = {\n  formControlName: \"\\n    <div [formGroup]=\\\"myGroup\\\">\\n      <input formControlName=\\\"firstName\\\">\\n    </div>\\n\\n    In your class:\\n\\n    this.myGroup = new FormGroup({\\n       firstName: new FormControl()\\n    });\",\n  formGroupName: \"\\n    <div [formGroup]=\\\"myGroup\\\">\\n       <div formGroupName=\\\"person\\\">\\n          <input formControlName=\\\"firstName\\\">\\n       </div>\\n    </div>\\n\\n    In your class:\\n\\n    this.myGroup = new FormGroup({\\n       person: new FormGroup({ firstName: new FormControl() })\\n    });\",\n  formArrayName: \"\\n    <div [formGroup]=\\\"myGroup\\\">\\n      <div formArrayName=\\\"cities\\\">\\n        <div *ngFor=\\\"let city of cityArray.controls; index as i\\\">\\n          <input [formControlName]=\\\"i\\\">\\n        </div>\\n      </div>\\n    </div>\\n\\n    In your class:\\n\\n    this.cityArray = new FormArray([new FormControl('SF')]);\\n    this.myGroup = new FormGroup({\\n      cities: this.cityArray\\n    });\",\n  ngModelGroup: \"\\n    <form>\\n       <div ngModelGroup=\\\"person\\\">\\n          <input [(ngModel)]=\\\"person.name\\\" name=\\\"firstName\\\">\\n       </div>\\n    </form>\",\n  ngModelWithFormGroup: \"\\n    <div [formGroup]=\\\"myGroup\\\">\\n       <input formControlName=\\\"firstName\\\">\\n       <input [(ngModel)]=\\\"showMoreControls\\\" [ngModelOptions]=\\\"{standalone: true}\\\">\\n    </div>\\n  \"\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\nvar ReactiveErrors = /*#__PURE__*/function () {\n  function ReactiveErrors() {\n    _classCallCheck(this, ReactiveErrors);\n  }\n\n  _createClass(ReactiveErrors, null, [{\n    key: \"controlParentException\",\n    value:\n    /**\n     * @return {?}\n     */\n    function controlParentException() {\n      throw new Error(\"formControlName must be used with a parent formGroup directive.  You'll want to add a formGroup\\n       directive and pass it an existing FormGroup instance (you can create one in your class).\\n\\n      Example:\\n\\n      \".concat(FormErrorExamples.formControlName));\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngModelGroupException\",\n    value: function ngModelGroupException() {\n      throw new Error(\"formControlName cannot be used with an ngModelGroup parent. It is only compatible with parents\\n       that also have a \\\"form\\\" prefix: formGroupName, formArrayName, or formGroup.\\n\\n       Option 1:  Update the parent to be formGroupName (reactive form strategy)\\n\\n        \".concat(FormErrorExamples.formGroupName, \"\\n\\n        Option 2: Use ngModel instead of formControlName (template-driven strategy)\\n\\n        \").concat(FormErrorExamples.ngModelGroup));\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"missingFormException\",\n    value: function missingFormException() {\n      throw new Error(\"formGroup expects a FormGroup instance. Please pass one in.\\n\\n       Example:\\n\\n       \".concat(FormErrorExamples.formControlName));\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"groupParentException\",\n    value: function groupParentException() {\n      throw new Error(\"formGroupName must be used with a parent formGroup directive.  You'll want to add a formGroup\\n      directive and pass it an existing FormGroup instance (you can create one in your class).\\n\\n      Example:\\n\\n      \".concat(FormErrorExamples.formGroupName));\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"arrayParentException\",\n    value: function arrayParentException() {\n      throw new Error(\"formArrayName must be used with a parent formGroup directive.  You'll want to add a formGroup\\n       directive and pass it an existing FormGroup instance (you can create one in your class).\\n\\n        Example:\\n\\n        \".concat(FormErrorExamples.formArrayName));\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"disabledAttrWarning\",\n    value: function disabledAttrWarning() {\n      console.warn(\"\\n      It looks like you're using the disabled attribute with a reactive form directive. If you set disabled to true\\n      when you set up this control in your component class, the disabled attribute will actually be set in the DOM for\\n      you. We recommend using this approach to avoid 'changed after checked' errors.\\n       \\n      Example: \\n      form = new FormGroup({\\n        first: new FormControl({value: 'Nancy', disabled: true}, Validators.required),\\n        last: new FormControl('Drew', Validators.required)\\n      });\\n    \");\n    }\n    /**\n     * @param {?} directiveName\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngModelWarning\",\n    value: function ngModelWarning(directiveName) {\n      console.warn(\"\\n    It looks like you're using ngModel on the same form field as \".concat(directiveName, \". \\n    Support for using the ngModel input property and ngModelChange event with \\n    reactive form directives has been deprecated in Angular v6 and will be removed \\n    in Angular v7.\\n    \\n    For more information on this, see our API docs here:\\n    https://angular.io/api/forms/\").concat(directiveName === 'formControl' ? 'FormControlDirective' : 'FormControlName', \"#use-with-ngmodel\\n    \"));\n    }\n  }]);\n\n  return ReactiveErrors;\n}();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nvar SELECT_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: /*#__PURE__*/forwardRef(function () {\n    return SelectControlValueAccessor;\n  }),\n  multi: true\n};\n/**\n * @param {?} id\n * @param {?} value\n * @return {?}\n */\n\nfunction _buildValueString(id, value) {\n  if (id == null) return \"\".concat(value);\n  if (value && typeof value === 'object') value = 'Object';\n  return \"\".concat(id, \": \").concat(value).slice(0, 50);\n}\n/**\n * @param {?} valueString\n * @return {?}\n */\n\n\nfunction _extractId(valueString) {\n  return valueString.split(':')[0];\n}\n/**\n * \\@description\n *\n * Writes values and listens to changes on a select element.\n *\n * Used by `NgModel`, `FormControlDirective`, and `FormControlName`\n * to keep the view synced with the `FormControl` model.\n *\n * If you have imported the `FormsModule` or the `ReactiveFormsModule`, this\n * value accessor will be active on any select control that has a form directive. You do\n * **not** need to add a special selector to activate it.\n *\n * \\@usageNotes\n * ### How to use select controls with form directives\n *\n * To use a select in a template-driven form, simply add an `ngModel` and a `name`\n * attribute to the main `<select>` tag.\n *\n * If your option values are simple strings, you can bind to the normal `value` property\n * on the option.  If your option values happen to be objects (and you'd like to save the\n * selection in your form as an object), use `ngValue` instead:\n *\n * {\\@example forms/ts/selectControl/select_control_example.ts region='Component'}\n *\n * In reactive forms, you'll also want to add your form directive (`formControlName` or\n * `formControl`) on the main `<select>` tag. Like in the former example, you have the\n * choice of binding to the  `value` or `ngValue` property on the select's options.\n *\n * {\\@example forms/ts/reactiveSelectControl/reactive_select_control_example.ts region='Component'}\n *\n * ### Caveat: Option selection\n *\n * Angular uses object identity to select option. It's possible for the identities of items\n * to change while the data does not. This can happen, for example, if the items are produced\n * from an RPC to the server, and that RPC is re-run. Even if the data hasn't changed, the\n * second response will produce objects with different identities.\n *\n * To customize the default option comparison algorithm, `<select>` supports `compareWith` input.\n * `compareWith` takes a **function** which has two arguments: `option1` and `option2`.\n * If `compareWith` is given, Angular selects option by the return value of the function.\n *\n * ### Syntax\n *\n * ```\n * <select [compareWith]=\"compareFn\"  [(ngModel)]=\"selectedCountries\">\n *     <option *ngFor=\"let country of countries\" [ngValue]=\"country\">\n *         {{country.name}}\n *     </option>\n * </select>\n *\n * compareFn(c1: Country, c2: Country): boolean {\n *     return c1 && c2 ? c1.id === c2.id : c1 === c2;\n * }\n * ```\n *\n * Note: We listen to the 'change' event because 'input' events aren't fired\n * for selects in Firefox and IE:\n * https://bugzilla.mozilla.org/show_bug.cgi?id=1024350\n * https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/4660045/\n *\n * \\@ngModule FormsModule\n * \\@ngModule ReactiveFormsModule\n */\n\n\nvar SelectControlValueAccessor = /*#__PURE__*/(function () {\n  var SelectControlValueAccessor = /*#__PURE__*/function () {\n    /**\n     * @param {?} _renderer\n     * @param {?} _elementRef\n     */\n    function SelectControlValueAccessor(_renderer, _elementRef) {\n      _classCallCheck(this, SelectControlValueAccessor);\n\n      this._renderer = _renderer;\n      this._elementRef = _elementRef;\n      /**\n       * \\@internal\n       */\n\n      this._optionMap = new Map();\n      /**\n       * \\@internal\n       */\n\n      this._idCounter = 0;\n\n      this.onChange = function (_) {};\n\n      this.onTouched = function () {};\n\n      this._compareWith = ɵlooseIdentical;\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n\n\n    _createClass(SelectControlValueAccessor, [{\n      key: \"compareWith\",\n      set: function set(fn) {\n        if (typeof fn !== 'function') {\n          throw new Error(\"compareWith must be a function, but received \".concat(JSON.stringify(fn)));\n        }\n\n        this._compareWith = fn;\n      }\n      /**\n       * @param {?} value\n       * @return {?}\n       */\n\n    }, {\n      key: \"writeValue\",\n      value: function writeValue(value) {\n        this.value = value;\n        /** @type {?} */\n\n        var id = this._getOptionId(value);\n\n        if (id == null) {\n          this._renderer.setProperty(this._elementRef.nativeElement, 'selectedIndex', -1);\n        }\n        /** @type {?} */\n\n\n        var valueString = _buildValueString(id, value);\n\n        this._renderer.setProperty(this._elementRef.nativeElement, 'value', valueString);\n      }\n      /**\n       * @param {?} fn\n       * @return {?}\n       */\n\n    }, {\n      key: \"registerOnChange\",\n      value: function registerOnChange(fn) {\n        var _this4 = this;\n\n        this.onChange = function (valueString) {\n          _this4.value = _this4._getOptionValue(valueString);\n          fn(_this4.value);\n        };\n      }\n      /**\n       * @param {?} fn\n       * @return {?}\n       */\n\n    }, {\n      key: \"registerOnTouched\",\n      value: function registerOnTouched(fn) {\n        this.onTouched = fn;\n      }\n      /**\n       * @param {?} isDisabled\n       * @return {?}\n       */\n\n    }, {\n      key: \"setDisabledState\",\n      value: function setDisabledState(isDisabled) {\n        this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n      }\n      /**\n       * \\@internal\n       * @return {?}\n       */\n\n    }, {\n      key: \"_registerOption\",\n      value: function _registerOption() {\n        return (this._idCounter++).toString();\n      }\n      /**\n       * \\@internal\n       * @param {?} value\n       * @return {?}\n       */\n\n    }, {\n      key: \"_getOptionId\",\n      value: function _getOptionId(value) {\n        for (var _i = 0, _Array$from = Array.from(this._optionMap.keys()); _i < _Array$from.length; _i++) {\n          var id = _Array$from[_i];\n          if (this._compareWith(this._optionMap.get(id), value)) return id;\n        }\n\n        return null;\n      }\n      /**\n       * \\@internal\n       * @param {?} valueString\n       * @return {?}\n       */\n\n    }, {\n      key: \"_getOptionValue\",\n      value: function _getOptionValue(valueString) {\n        /** @type {?} */\n        var id = _extractId(valueString);\n\n        return this._optionMap.has(id) ? this._optionMap.get(id) : valueString;\n      }\n    }]);\n\n    return SelectControlValueAccessor;\n  }();\n\n  SelectControlValueAccessor.ɵfac = function SelectControlValueAccessor_Factory(t) {\n    return new (t || SelectControlValueAccessor)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n  };\n\n  SelectControlValueAccessor.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: SelectControlValueAccessor,\n    selectors: [[\"select\", \"formControlName\", \"\", 3, \"multiple\", \"\"], [\"select\", \"formControl\", \"\", 3, \"multiple\", \"\"], [\"select\", \"ngModel\", \"\", 3, \"multiple\", \"\"]],\n    hostBindings: function SelectControlValueAccessor_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"change\", function SelectControlValueAccessor_change_HostBindingHandler($event) {\n          return ctx.onChange($event.target.value);\n        })(\"blur\", function SelectControlValueAccessor_blur_HostBindingHandler() {\n          return ctx.onTouched();\n        });\n      }\n    },\n    inputs: {\n      compareWith: \"compareWith\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([SELECT_VALUE_ACCESSOR])]\n  });\n  /** @nocollapse */\n\n  return SelectControlValueAccessor;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * \\@description\n *\n * Marks `<option>` as dynamic, so Angular can be notified when options change.\n *\n * See docs for `SelectControlValueAccessor` for usage examples.\n *\n * \\@ngModule FormsModule\n * \\@ngModule ReactiveFormsModule\n */\n\n\nvar NgSelectOption = /*#__PURE__*/(function () {\n  var NgSelectOption = /*#__PURE__*/function () {\n    /**\n     * @param {?} _element\n     * @param {?} _renderer\n     * @param {?} _select\n     */\n    function NgSelectOption(_element, _renderer, _select) {\n      _classCallCheck(this, NgSelectOption);\n\n      this._element = _element;\n      this._renderer = _renderer;\n      this._select = _select;\n      if (this._select) this.id = this._select._registerOption();\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n\n    _createClass(NgSelectOption, [{\n      key: \"ngValue\",\n      set: function set(value) {\n        if (this._select == null) return;\n\n        this._select._optionMap.set(this.id, value);\n\n        this._setElementValue(_buildValueString(this.id, value));\n\n        this._select.writeValue(this._select.value);\n      }\n      /**\n       * @param {?} value\n       * @return {?}\n       */\n\n    }, {\n      key: \"value\",\n      set: function set(value) {\n        this._setElementValue(value);\n\n        if (this._select) this._select.writeValue(this._select.value);\n      }\n      /**\n       * \\@internal\n       * @param {?} value\n       * @return {?}\n       */\n\n    }, {\n      key: \"_setElementValue\",\n      value: function _setElementValue(value) {\n        this._renderer.setProperty(this._element.nativeElement, 'value', value);\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        if (this._select) {\n          this._select._optionMap.delete(this.id);\n\n          this._select.writeValue(this._select.value);\n        }\n      }\n    }]);\n\n    return NgSelectOption;\n  }();\n\n  NgSelectOption.ɵfac = function NgSelectOption_Factory(t) {\n    return new (t || NgSelectOption)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(SelectControlValueAccessor, 9));\n  };\n\n  NgSelectOption.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: NgSelectOption,\n    selectors: [[\"option\"]],\n    inputs: {\n      ngValue: \"ngValue\",\n      value: \"value\"\n    }\n  });\n  /** @nocollapse */\n\n  return NgSelectOption;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nvar SELECT_MULTIPLE_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: /*#__PURE__*/forwardRef(function () {\n    return SelectMultipleControlValueAccessor;\n  }),\n  multi: true\n};\n/**\n * @param {?} id\n * @param {?} value\n * @return {?}\n */\n\nfunction _buildValueString$1(id, value) {\n  if (id == null) return \"\".concat(value);\n  if (typeof value === 'string') value = \"'\".concat(value, \"'\");\n  if (value && typeof value === 'object') value = 'Object';\n  return \"\".concat(id, \": \").concat(value).slice(0, 50);\n}\n/**\n * @param {?} valueString\n * @return {?}\n */\n\n\nfunction _extractId$1(valueString) {\n  return valueString.split(':')[0];\n}\n/**\n * The accessor for writing a value and listening to changes on a select element.\n *\n * \\@usageNotes\n * ### Caveat: Options selection\n *\n * Angular uses object identity to select options. It's possible for the identities of items\n * to change while the data does not. This can happen, for example, if the items are produced\n * from an RPC to the server, and that RPC is re-run. Even if the data hasn't changed, the\n * second response will produce objects with different identities.\n *\n * To customize the default option comparison algorithm, `<select multiple>` supports `compareWith`\n * input. `compareWith` takes a **function** which has two arguments: `option1` and `option2`.\n * If `compareWith` is given, Angular selects options by the return value of the function.\n *\n * ### Syntax\n *\n * ```\n * <select multiple [compareWith]=\"compareFn\"  [(ngModel)]=\"selectedCountries\">\n *     <option *ngFor=\"let country of countries\" [ngValue]=\"country\">\n *         {{country.name}}\n *     </option>\n * </select>\n *\n * compareFn(c1: Country, c2: Country): boolean {\n *     return c1 && c2 ? c1.id === c2.id : c1 === c2;\n * }\n * ```\n *\n * \\@ngModule ReactiveFormsModule\n * \\@ngModule FormsModule\n */\n\n\nvar SelectMultipleControlValueAccessor = /*#__PURE__*/(function () {\n  var SelectMultipleControlValueAccessor = /*#__PURE__*/function () {\n    /**\n     * @param {?} _renderer\n     * @param {?} _elementRef\n     */\n    function SelectMultipleControlValueAccessor(_renderer, _elementRef) {\n      _classCallCheck(this, SelectMultipleControlValueAccessor);\n\n      this._renderer = _renderer;\n      this._elementRef = _elementRef;\n      /**\n       * \\@internal\n       */\n\n      this._optionMap = new Map();\n      /**\n       * \\@internal\n       */\n\n      this._idCounter = 0;\n\n      this.onChange = function (_) {};\n\n      this.onTouched = function () {};\n\n      this._compareWith = ɵlooseIdentical;\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n\n\n    _createClass(SelectMultipleControlValueAccessor, [{\n      key: \"compareWith\",\n      set: function set(fn) {\n        if (typeof fn !== 'function') {\n          throw new Error(\"compareWith must be a function, but received \".concat(JSON.stringify(fn)));\n        }\n\n        this._compareWith = fn;\n      }\n      /**\n       * @param {?} value\n       * @return {?}\n       */\n\n    }, {\n      key: \"writeValue\",\n      value: function writeValue(value) {\n        var _this5 = this;\n\n        this.value = value;\n        /** @type {?} */\n\n        var optionSelectedStateSetter;\n\n        if (Array.isArray(value)) {\n          /** @type {?} */\n          var ids = value.map(function (v) {\n            return _this5._getOptionId(v);\n          });\n\n          optionSelectedStateSetter = function optionSelectedStateSetter(opt, o) {\n            opt._setSelected(ids.indexOf(o.toString()) > -1);\n          };\n        } else {\n          optionSelectedStateSetter = function optionSelectedStateSetter(opt, o) {\n            opt._setSelected(false);\n          };\n        }\n\n        this._optionMap.forEach(optionSelectedStateSetter);\n      }\n      /**\n       * @param {?} fn\n       * @return {?}\n       */\n\n    }, {\n      key: \"registerOnChange\",\n      value: function registerOnChange(fn) {\n        var _this6 = this;\n\n        this.onChange = function (_) {\n          /** @type {?} */\n          var selected = [];\n\n          if (_.hasOwnProperty('selectedOptions')) {\n            /** @type {?} */\n            var options = _.selectedOptions;\n\n            for (var i = 0; i < options.length; i++) {\n              /** @type {?} */\n              var opt = options.item(i);\n              /** @type {?} */\n\n              var val = _this6._getOptionValue(opt.value);\n\n              selected.push(val);\n            }\n          } // Degrade on IE\n          else {\n            /** @type {?} */\n            var _options =\n            /** @type {?} */\n            _.options;\n\n            for (var _i2 = 0; _i2 < _options.length; _i2++) {\n              /** @type {?} */\n              var _opt = _options.item(_i2);\n\n              if (_opt.selected) {\n                /** @type {?} */\n                var _val = _this6._getOptionValue(_opt.value);\n\n                selected.push(_val);\n              }\n            }\n          }\n\n          _this6.value = selected;\n          fn(selected);\n        };\n      }\n      /**\n       * @param {?} fn\n       * @return {?}\n       */\n\n    }, {\n      key: \"registerOnTouched\",\n      value: function registerOnTouched(fn) {\n        this.onTouched = fn;\n      }\n      /**\n       * @param {?} isDisabled\n       * @return {?}\n       */\n\n    }, {\n      key: \"setDisabledState\",\n      value: function setDisabledState(isDisabled) {\n        this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n      }\n      /**\n       * \\@internal\n       * @param {?} value\n       * @return {?}\n       */\n\n    }, {\n      key: \"_registerOption\",\n      value: function _registerOption(value) {\n        /** @type {?} */\n        var id = (this._idCounter++).toString();\n\n        this._optionMap.set(id, value);\n\n        return id;\n      }\n      /**\n       * \\@internal\n       * @param {?} value\n       * @return {?}\n       */\n\n    }, {\n      key: \"_getOptionId\",\n      value: function _getOptionId(value) {\n        for (var _i3 = 0, _Array$from2 = Array.from(this._optionMap.keys()); _i3 < _Array$from2.length; _i3++) {\n          var id = _Array$from2[_i3];\n          if (this._compareWith(\n          /** @type {?} */\n          this._optionMap.get(id)._value, value)) return id;\n        }\n\n        return null;\n      }\n      /**\n       * \\@internal\n       * @param {?} valueString\n       * @return {?}\n       */\n\n    }, {\n      key: \"_getOptionValue\",\n      value: function _getOptionValue(valueString) {\n        /** @type {?} */\n        var id = _extractId$1(valueString);\n\n        return this._optionMap.has(id) ?\n        /** @type {?} */\n        this._optionMap.get(id)._value : valueString;\n      }\n    }]);\n\n    return SelectMultipleControlValueAccessor;\n  }();\n\n  SelectMultipleControlValueAccessor.ɵfac = function SelectMultipleControlValueAccessor_Factory(t) {\n    return new (t || SelectMultipleControlValueAccessor)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n  };\n\n  SelectMultipleControlValueAccessor.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: SelectMultipleControlValueAccessor,\n    selectors: [[\"select\", \"multiple\", \"\", \"formControlName\", \"\"], [\"select\", \"multiple\", \"\", \"formControl\", \"\"], [\"select\", \"multiple\", \"\", \"ngModel\", \"\"]],\n    hostBindings: function SelectMultipleControlValueAccessor_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"change\", function SelectMultipleControlValueAccessor_change_HostBindingHandler($event) {\n          return ctx.onChange($event.target);\n        })(\"blur\", function SelectMultipleControlValueAccessor_blur_HostBindingHandler() {\n          return ctx.onTouched();\n        });\n      }\n    },\n    inputs: {\n      compareWith: \"compareWith\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([SELECT_MULTIPLE_VALUE_ACCESSOR])]\n  });\n  /** @nocollapse */\n\n  return SelectMultipleControlValueAccessor;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Marks `<option>` as dynamic, so Angular can be notified when options change.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```\n * <select multiple name=\"city\" ngModel>\n *   <option *ngFor=\"let c of cities\" [value]=\"c\"></option>\n * </select>\n * ```\n * \\@ngModule FormsModule\n * \\@ngModule ReactiveFormsModule\n */\n\n\nvar NgSelectMultipleOption = /*#__PURE__*/(function () {\n  var NgSelectMultipleOption = /*#__PURE__*/function () {\n    /**\n     * @param {?} _element\n     * @param {?} _renderer\n     * @param {?} _select\n     */\n    function NgSelectMultipleOption(_element, _renderer, _select) {\n      _classCallCheck(this, NgSelectMultipleOption);\n\n      this._element = _element;\n      this._renderer = _renderer;\n      this._select = _select;\n\n      if (this._select) {\n        this.id = this._select._registerOption(this);\n      }\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n\n    _createClass(NgSelectMultipleOption, [{\n      key: \"ngValue\",\n      set: function set(value) {\n        if (this._select == null) return;\n        this._value = value;\n\n        this._setElementValue(_buildValueString$1(this.id, value));\n\n        this._select.writeValue(this._select.value);\n      }\n      /**\n       * @param {?} value\n       * @return {?}\n       */\n\n    }, {\n      key: \"value\",\n      set: function set(value) {\n        if (this._select) {\n          this._value = value;\n\n          this._setElementValue(_buildValueString$1(this.id, value));\n\n          this._select.writeValue(this._select.value);\n        } else {\n          this._setElementValue(value);\n        }\n      }\n      /**\n       * \\@internal\n       * @param {?} value\n       * @return {?}\n       */\n\n    }, {\n      key: \"_setElementValue\",\n      value: function _setElementValue(value) {\n        this._renderer.setProperty(this._element.nativeElement, 'value', value);\n      }\n      /**\n       * \\@internal\n       * @param {?} selected\n       * @return {?}\n       */\n\n    }, {\n      key: \"_setSelected\",\n      value: function _setSelected(selected) {\n        this._renderer.setProperty(this._element.nativeElement, 'selected', selected);\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        if (this._select) {\n          this._select._optionMap.delete(this.id);\n\n          this._select.writeValue(this._select.value);\n        }\n      }\n    }]);\n\n    return NgSelectMultipleOption;\n  }();\n\n  NgSelectMultipleOption.ɵfac = function NgSelectMultipleOption_Factory(t) {\n    return new (t || NgSelectMultipleOption)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(SelectMultipleControlValueAccessor, 9));\n  };\n\n  NgSelectMultipleOption.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: NgSelectMultipleOption,\n    selectors: [[\"option\"]],\n    inputs: {\n      ngValue: \"ngValue\",\n      value: \"value\"\n    }\n  });\n  /** @nocollapse */\n\n  return NgSelectMultipleOption;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @param {?} name\n * @param {?} parent\n * @return {?}\n */\n\n\nfunction controlPath(name, parent) {\n  return [].concat(_toConsumableArray(\n  /** @type {?} */\n  parent.path), [name]);\n}\n/**\n * @param {?} control\n * @param {?} dir\n * @return {?}\n */\n\n\nfunction setUpControl(control, dir) {\n  if (!control) _throwError(dir, 'Cannot find control with');\n  if (!dir.valueAccessor) _throwError(dir, 'No value accessor for form control with');\n  control.validator = Validators.compose([\n  /** @type {?} */\n  control.validator, dir.validator]);\n  control.asyncValidator = Validators.composeAsync([\n  /** @type {?} */\n  control.asyncValidator, dir.asyncValidator]);\n  /** @type {?} */\n\n  dir.valueAccessor.writeValue(control.value);\n  setUpViewChangePipeline(control, dir);\n  setUpModelChangePipeline(control, dir);\n  setUpBlurPipeline(control, dir);\n\n  if (\n  /** @type {?} */\n  dir.valueAccessor.setDisabledState) {\n    control.registerOnDisabledChange(function (isDisabled) {\n      /** @type {?} */\n\n      /** @type {?} */\n      dir.valueAccessor.setDisabledState(isDisabled);\n    });\n  } // re-run validation when validator binding changes, e.g. minlength=3 -> minlength=4\n\n\n  dir._rawValidators.forEach(function (validator) {\n    if (\n    /** @type {?} */\n    validator.registerOnValidatorChange)\n      /** @type {?} */\n\n      /** @type {?} */\n      validator.registerOnValidatorChange(function () {\n        return control.updateValueAndValidity();\n      });\n  });\n\n  dir._rawAsyncValidators.forEach(function (validator) {\n    if (\n    /** @type {?} */\n    validator.registerOnValidatorChange)\n      /** @type {?} */\n\n      /** @type {?} */\n      validator.registerOnValidatorChange(function () {\n        return control.updateValueAndValidity();\n      });\n  });\n}\n/**\n * @param {?} control\n * @param {?} dir\n * @return {?}\n */\n\n\nfunction cleanUpControl(control, dir) {\n  /** @type {?} */\n  dir.valueAccessor.registerOnChange(function () {\n    return _noControlError(dir);\n  });\n  /** @type {?} */\n\n  dir.valueAccessor.registerOnTouched(function () {\n    return _noControlError(dir);\n  });\n\n  dir._rawValidators.forEach(function (validator) {\n    if (validator.registerOnValidatorChange) {\n      validator.registerOnValidatorChange(null);\n    }\n  });\n\n  dir._rawAsyncValidators.forEach(function (validator) {\n    if (validator.registerOnValidatorChange) {\n      validator.registerOnValidatorChange(null);\n    }\n  });\n\n  if (control) control._clearChangeFns();\n}\n/**\n * @param {?} control\n * @param {?} dir\n * @return {?}\n */\n\n\nfunction setUpViewChangePipeline(control, dir) {\n  /** @type {?} */\n  dir.valueAccessor.registerOnChange(function (newValue) {\n    control._pendingValue = newValue;\n    control._pendingChange = true;\n    control._pendingDirty = true;\n    if (control.updateOn === 'change') updateControl(control, dir);\n  });\n}\n/**\n * @param {?} control\n * @param {?} dir\n * @return {?}\n */\n\n\nfunction setUpBlurPipeline(control, dir) {\n  /** @type {?} */\n  dir.valueAccessor.registerOnTouched(function () {\n    control._pendingTouched = true;\n    if (control.updateOn === 'blur' && control._pendingChange) updateControl(control, dir);\n    if (control.updateOn !== 'submit') control.markAsTouched();\n  });\n}\n/**\n * @param {?} control\n * @param {?} dir\n * @return {?}\n */\n\n\nfunction updateControl(control, dir) {\n  if (control._pendingDirty) control.markAsDirty();\n  control.setValue(control._pendingValue, {\n    emitModelToViewChange: false\n  });\n  dir.viewToModelUpdate(control._pendingValue);\n  control._pendingChange = false;\n}\n/**\n * @param {?} control\n * @param {?} dir\n * @return {?}\n */\n\n\nfunction setUpModelChangePipeline(control, dir) {\n  control.registerOnChange(function (newValue, emitModelEvent) {\n    /** @type {?} */\n    // control -> view\n    dir.valueAccessor.writeValue(newValue); // control -> ngModel\n\n    if (emitModelEvent) dir.viewToModelUpdate(newValue);\n  });\n}\n/**\n * @param {?} control\n * @param {?} dir\n * @return {?}\n */\n\n\nfunction setUpFormContainer(control, dir) {\n  if (control == null) _throwError(dir, 'Cannot find control with');\n  control.validator = Validators.compose([control.validator, dir.validator]);\n  control.asyncValidator = Validators.composeAsync([control.asyncValidator, dir.asyncValidator]);\n}\n/**\n * @param {?} dir\n * @return {?}\n */\n\n\nfunction _noControlError(dir) {\n  return _throwError(dir, 'There is no FormControl instance attached to form control element with');\n}\n/**\n * @param {?} dir\n * @param {?} message\n * @return {?}\n */\n\n\nfunction _throwError(dir, message) {\n  /** @type {?} */\n  var messageEnd;\n\n  if (\n  /** @type {?} */\n  dir.path.length > 1) {\n    messageEnd = \"path: '\".concat(\n    /** @type {?} */\n    dir.path.join(' -> '), \"'\");\n  } else if (\n  /** @type {?} */\n  dir.path[0]) {\n    messageEnd = \"name: '\".concat(dir.path, \"'\");\n  } else {\n    messageEnd = 'unspecified name attribute';\n  }\n\n  throw new Error(\"\".concat(message, \" \").concat(messageEnd));\n}\n/**\n * @param {?} validators\n * @return {?}\n */\n\n\nfunction composeValidators(validators) {\n  return validators != null ? Validators.compose(validators.map(normalizeValidator)) : null;\n}\n/**\n * @param {?} validators\n * @return {?}\n */\n\n\nfunction composeAsyncValidators(validators) {\n  return validators != null ? Validators.composeAsync(validators.map(normalizeAsyncValidator)) : null;\n}\n/**\n * @param {?} changes\n * @param {?} viewModel\n * @return {?}\n */\n\n\nfunction isPropertyUpdated(changes, viewModel) {\n  if (!changes.hasOwnProperty('model')) return false;\n  /** @type {?} */\n\n  var change = changes['model'];\n  if (change.isFirstChange()) return true;\n  return !ɵlooseIdentical(viewModel, change.currentValue);\n}\n/** @type {?} */\n\n\nvar BUILTIN_ACCESSORS = [CheckboxControlValueAccessor, RangeValueAccessor, NumberValueAccessor, SelectControlValueAccessor, SelectMultipleControlValueAccessor, RadioControlValueAccessor];\n/**\n * @param {?} valueAccessor\n * @return {?}\n */\n\nfunction isBuiltInAccessor(valueAccessor) {\n  return BUILTIN_ACCESSORS.some(function (a) {\n    return valueAccessor.constructor === a;\n  });\n}\n/**\n * @param {?} form\n * @param {?} directives\n * @return {?}\n */\n\n\nfunction syncPendingControls(form, directives) {\n  form._syncPendingControls();\n\n  directives.forEach(function (dir) {\n    /** @type {?} */\n    var control =\n    /** @type {?} */\n    dir.control;\n\n    if (control.updateOn === 'submit' && control._pendingChange) {\n      dir.viewToModelUpdate(control._pendingValue);\n      control._pendingChange = false;\n    }\n  });\n}\n/**\n * @param {?} dir\n * @param {?} valueAccessors\n * @return {?}\n */\n\n\nfunction selectValueAccessor(dir, valueAccessors) {\n  if (!valueAccessors) return null;\n  if (!Array.isArray(valueAccessors)) _throwError(dir, 'Value accessor was not provided as an array for form control with');\n  /** @type {?} */\n\n  var defaultAccessor = undefined;\n  /** @type {?} */\n\n  var builtinAccessor = undefined;\n  /** @type {?} */\n\n  var customAccessor = undefined;\n  valueAccessors.forEach(function (v) {\n    if (v.constructor === DefaultValueAccessor) {\n      defaultAccessor = v;\n    } else if (isBuiltInAccessor(v)) {\n      if (builtinAccessor) _throwError(dir, 'More than one built-in value accessor matches form control with');\n      builtinAccessor = v;\n    } else {\n      if (customAccessor) _throwError(dir, 'More than one custom value accessor matches form control with');\n      customAccessor = v;\n    }\n  });\n  if (customAccessor) return customAccessor;\n  if (builtinAccessor) return builtinAccessor;\n  if (defaultAccessor) return defaultAccessor;\n\n  _throwError(dir, 'No valid value accessor for form control with');\n\n  return null;\n}\n/**\n * @template T\n * @param {?} list\n * @param {?} el\n * @return {?}\n */\n\n\nfunction removeDir(list, el) {\n  /** @type {?} */\n  var index = list.indexOf(el);\n  if (index > -1) list.splice(index, 1);\n}\n/**\n * @param {?} name\n * @param {?} type\n * @param {?} instance\n * @param {?} warningConfig\n * @return {?}\n */\n\n\nfunction _ngModelWarning(name, type, instance, warningConfig) {\n  if (!isDevMode() || warningConfig === 'never') return;\n\n  if ((warningConfig === null || warningConfig === 'once') && !type._ngModelWarningSentOnce || warningConfig === 'always' && !instance._ngModelWarningSent) {\n    ReactiveErrors.ngModelWarning(name);\n    type._ngModelWarningSentOnce = true;\n    instance._ngModelWarningSent = true;\n  }\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * \\@description\n * A base class for code shared between the `NgModelGroup` and `FormGroupName` directives.\n *\n */\n\n\nvar AbstractFormGroupDirective = /*#__PURE__*/(function () {\n  var AbstractFormGroupDirective = /*#__PURE__*/function (_ControlContainer) {\n    _inherits(AbstractFormGroupDirective, _ControlContainer);\n\n    var _super3 = _createSuper(AbstractFormGroupDirective);\n\n    function AbstractFormGroupDirective() {\n      _classCallCheck(this, AbstractFormGroupDirective);\n\n      return _super3.apply(this, arguments);\n    }\n\n    _createClass(AbstractFormGroupDirective, [{\n      key: \"ngOnInit\",\n      value:\n      /**\n       * \\@description\n       * An internal callback method triggered on the instance after the inputs are set.\n       * Registers the group with its parent group.\n       * @return {?}\n       */\n      function ngOnInit() {\n        this._checkParentType();\n        /** @type {?} */\n\n\n        this.formDirective.addFormGroup(this);\n      }\n      /**\n       * \\@description\n       * An internal callback method triggered before the instance is destroyed.\n       * Removes the group from its parent group.\n       * @return {?}\n       */\n\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        if (this.formDirective) {\n          this.formDirective.removeFormGroup(this);\n        }\n      }\n      /**\n       * \\@description\n       * The `FormGroup` bound to this directive.\n       * @return {?}\n       */\n\n    }, {\n      key: \"control\",\n      get: function get() {\n        return (\n          /** @type {?} */\n          this.formDirective.getFormGroup(this)\n        );\n      }\n      /**\n       * \\@description\n       * The path to this group from the top-level directive.\n       * @return {?}\n       */\n\n    }, {\n      key: \"path\",\n      get: function get() {\n        return controlPath(this.name, this._parent);\n      }\n      /**\n       * \\@description\n       * The top-level directive for this group if present, otherwise null.\n       * @return {?}\n       */\n\n    }, {\n      key: \"formDirective\",\n      get: function get() {\n        return this._parent ? this._parent.formDirective : null;\n      }\n      /**\n       * \\@description\n       * The synchronous validators registered with this group.\n       * @return {?}\n       */\n\n    }, {\n      key: \"validator\",\n      get: function get() {\n        return composeValidators(this._validators);\n      }\n      /**\n       * \\@description\n       * The async validators registered with this group.\n       * @return {?}\n       */\n\n    }, {\n      key: \"asyncValidator\",\n      get: function get() {\n        return composeAsyncValidators(this._asyncValidators);\n      }\n      /**\n       * \\@internal\n       * @return {?}\n       */\n\n    }, {\n      key: \"_checkParentType\",\n      value: function _checkParentType() {}\n    }]);\n\n    return AbstractFormGroupDirective;\n  }(ControlContainer);\n\n  AbstractFormGroupDirective.ɵfac = /*@__PURE__*/function () {\n    var ɵAbstractFormGroupDirective_BaseFactory;\n    return function AbstractFormGroupDirective_Factory(t) {\n      return (ɵAbstractFormGroupDirective_BaseFactory || (ɵAbstractFormGroupDirective_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(AbstractFormGroupDirective)))(t || AbstractFormGroupDirective);\n    };\n  }();\n\n  AbstractFormGroupDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: AbstractFormGroupDirective,\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  /**\n   * @fileoverview added by tsickle\n   * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n   */\n\n  return AbstractFormGroupDirective;\n})();\n\nvar AbstractControlStatus = /*#__PURE__*/function () {\n  /**\n   * @param {?} cd\n   */\n  function AbstractControlStatus(cd) {\n    _classCallCheck(this, AbstractControlStatus);\n\n    this._cd = cd;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _createClass(AbstractControlStatus, [{\n    key: \"ngClassUntouched\",\n    get: function get() {\n      return this._cd.control ? this._cd.control.untouched : false;\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngClassTouched\",\n    get: function get() {\n      return this._cd.control ? this._cd.control.touched : false;\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngClassPristine\",\n    get: function get() {\n      return this._cd.control ? this._cd.control.pristine : false;\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngClassDirty\",\n    get: function get() {\n      return this._cd.control ? this._cd.control.dirty : false;\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngClassValid\",\n    get: function get() {\n      return this._cd.control ? this._cd.control.valid : false;\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngClassInvalid\",\n    get: function get() {\n      return this._cd.control ? this._cd.control.invalid : false;\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngClassPending\",\n    get: function get() {\n      return this._cd.control ? this._cd.control.pending : false;\n    }\n  }]);\n\n  return AbstractControlStatus;\n}();\n/** @type {?} */\n\n\nvar ngControlStatusHost = {\n  '[class.ng-untouched]': 'ngClassUntouched',\n  '[class.ng-touched]': 'ngClassTouched',\n  '[class.ng-pristine]': 'ngClassPristine',\n  '[class.ng-dirty]': 'ngClassDirty',\n  '[class.ng-valid]': 'ngClassValid',\n  '[class.ng-invalid]': 'ngClassInvalid',\n  '[class.ng-pending]': 'ngClassPending'\n};\n/**\n * Directive automatically applied to Angular form controls that sets CSS classes\n * based on control status. The following classes are applied as the properties\n * become true:\n *\n * * ng-valid\n * * ng-invalid\n * * ng-pending\n * * ng-pristine\n * * ng-dirty\n * * ng-untouched\n * * ng-touched\n *\n * \\@ngModule FormsModule\n * \\@ngModule ReactiveFormsModule\n */\n\nvar NgControlStatus = /*#__PURE__*/(function () {\n  var NgControlStatus = /*#__PURE__*/function (_AbstractControlStatu) {\n    _inherits(NgControlStatus, _AbstractControlStatu);\n\n    var _super4 = _createSuper(NgControlStatus);\n\n    /**\n     * @param {?} cd\n     */\n    function NgControlStatus(cd) {\n      _classCallCheck(this, NgControlStatus);\n\n      return _super4.call(this, cd);\n    }\n\n    return _createClass(NgControlStatus);\n  }(AbstractControlStatus);\n\n  NgControlStatus.ɵfac = function NgControlStatus_Factory(t) {\n    return new (t || NgControlStatus)(ɵngcc0.ɵɵdirectiveInject(NgControl, 2));\n  };\n\n  NgControlStatus.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: NgControlStatus,\n    selectors: [[\"\", \"formControlName\", \"\"], [\"\", \"ngModel\", \"\"], [\"\", \"formControl\", \"\"]],\n    hostVars: 14,\n    hostBindings: function NgControlStatus_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"ng-untouched\", ctx.ngClassUntouched)(\"ng-touched\", ctx.ngClassTouched)(\"ng-pristine\", ctx.ngClassPristine)(\"ng-dirty\", ctx.ngClassDirty)(\"ng-valid\", ctx.ngClassValid)(\"ng-invalid\", ctx.ngClassInvalid)(\"ng-pending\", ctx.ngClassPending);\n      }\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  /** @nocollapse */\n\n  return NgControlStatus;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Directive automatically applied to Angular form groups that sets CSS classes\n * based on control status (valid/invalid/dirty/etc).\n *\n * \\@ngModule FormsModule\n * \\@ngModule ReactiveFormsModule\n */\n\n\nvar NgControlStatusGroup = /*#__PURE__*/(function () {\n  var NgControlStatusGroup = /*#__PURE__*/function (_AbstractControlStatu2) {\n    _inherits(NgControlStatusGroup, _AbstractControlStatu2);\n\n    var _super5 = _createSuper(NgControlStatusGroup);\n\n    /**\n     * @param {?} cd\n     */\n    function NgControlStatusGroup(cd) {\n      _classCallCheck(this, NgControlStatusGroup);\n\n      return _super5.call(this, cd);\n    }\n\n    return _createClass(NgControlStatusGroup);\n  }(AbstractControlStatus);\n\n  NgControlStatusGroup.ɵfac = function NgControlStatusGroup_Factory(t) {\n    return new (t || NgControlStatusGroup)(ɵngcc0.ɵɵdirectiveInject(ControlContainer, 2));\n  };\n\n  NgControlStatusGroup.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: NgControlStatusGroup,\n    selectors: [[\"\", \"formGroupName\", \"\"], [\"\", \"formArrayName\", \"\"], [\"\", \"ngModelGroup\", \"\"], [\"\", \"formGroup\", \"\"], [\"form\", 3, \"ngNoForm\", \"\"], [\"\", \"ngForm\", \"\"]],\n    hostVars: 14,\n    hostBindings: function NgControlStatusGroup_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"ng-untouched\", ctx.ngClassUntouched)(\"ng-touched\", ctx.ngClassTouched)(\"ng-pristine\", ctx.ngClassPristine)(\"ng-dirty\", ctx.ngClassDirty)(\"ng-valid\", ctx.ngClassValid)(\"ng-invalid\", ctx.ngClassInvalid)(\"ng-pending\", ctx.ngClassPending);\n      }\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  /** @nocollapse */\n\n  return NgControlStatusGroup;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** *\n * Reports that a FormControl is valid, meaning that no errors exist in the input value.\n *\n * @see `status`\n  @type {?} */\n\n\nvar VALID = 'VALID';\n/** *\n * Reports that a FormControl is invalid, meaning that an error exists in the input value.\n *\n * @see `status`\n  @type {?} */\n\nvar INVALID = 'INVALID';\n/** *\n * Reports that a FormControl is pending, meaning that that async validation is occurring and\n * errors are not yet available for the input value.\n *\n * @see `markAsPending`\n * @see `status`\n  @type {?} */\n\nvar PENDING = 'PENDING';\n/** *\n * Reports that a FormControl is disabled, meaning that the control is exempt from ancestor\n * calculations of validity or value.\n *\n * @see `markAsDisabled`\n * @see `status`\n  @type {?} */\n\nvar DISABLED = 'DISABLED';\n/**\n * @param {?} control\n * @param {?} path\n * @param {?} delimiter\n * @return {?}\n */\n\nfunction _find(control, path, delimiter) {\n  if (path == null) return null;\n\n  if (!(path instanceof Array)) {\n    path =\n    /** @type {?} */\n    path.split(delimiter);\n  }\n\n  if (path instanceof Array && path.length === 0) return null;\n  return (\n    /** @type {?} */\n    path.reduce(function (v, name) {\n      if (v instanceof FormGroup) {\n        return v.controls.hasOwnProperty(\n        /** @type {?} */\n        name) ? v.controls[name] : null;\n      }\n\n      if (v instanceof FormArray) {\n        return v.at(\n        /** @type {?} */\n        name) || null;\n      }\n\n      return null;\n    }, control)\n  );\n}\n/**\n * @param {?=} validatorOrOpts\n * @return {?}\n */\n\n\nfunction coerceToValidator(validatorOrOpts) {\n  /** @type {?} */\n  var validator =\n  /** @type {?} */\n  isOptionsObj(validatorOrOpts) ?\n  /** @type {?} */\n  validatorOrOpts.validators : validatorOrOpts;\n  return Array.isArray(validator) ? composeValidators(validator) : validator || null;\n}\n/**\n * @param {?=} asyncValidator\n * @param {?=} validatorOrOpts\n * @return {?}\n */\n\n\nfunction coerceToAsyncValidator(asyncValidator, validatorOrOpts) {\n  /** @type {?} */\n  var origAsyncValidator =\n  /** @type {?} */\n  isOptionsObj(validatorOrOpts) ?\n  /** @type {?} */\n  validatorOrOpts.asyncValidators : asyncValidator;\n  return Array.isArray(origAsyncValidator) ? composeAsyncValidators(origAsyncValidator) : origAsyncValidator || null;\n}\n/**\n * @param {?=} validatorOrOpts\n * @return {?}\n */\n\n\nfunction isOptionsObj(validatorOrOpts) {\n  return validatorOrOpts != null && !Array.isArray(validatorOrOpts) && typeof validatorOrOpts === 'object';\n}\n/**\n * This is the base class for `FormControl`, `FormGroup`, and `FormArray`.\n *\n * It provides some of the shared behavior that all controls and groups of controls have, like\n * running validators, calculating status, and resetting state. It also defines the properties\n * that are shared between all sub-classes, like `value`, `valid`, and `dirty`. It shouldn't be\n * instantiated directly.\n *\n * @see [Forms Guide](/guide/forms)\n * @see [Reactive Forms Guide](/guide/reactive-forms)\n * @see [Dynamic Forms Guide](/guide/dynamic-form)\n *\n * @abstract\n */\n\n\nvar AbstractControl = /*#__PURE__*/function () {\n  /**\n   * Initialize the AbstractControl instance.\n   *\n   * @param {?} validator The function that determines the synchronous validity of this control.\n   * @param {?} asyncValidator The function that determines the asynchronous validity of this\n   * control.\n   */\n  function AbstractControl(validator, asyncValidator) {\n    _classCallCheck(this, AbstractControl);\n\n    this.validator = validator;\n    this.asyncValidator = asyncValidator;\n    /**\n     * \\@internal\n     */\n\n    this._onCollectionChange = function () {};\n    /**\n     * A control is `pristine` if the user has not yet changed\n     * the value in the UI.\n     *\n     * @return True if the user has not yet changed the value in the UI; compare `dirty`.\n     * Programmatic changes to a control's value do not mark it dirty.\n     */\n\n\n    this.pristine = true;\n    /**\n     * True if the control is marked as `touched`.\n     *\n     * A control is marked `touched` once the user has triggered\n     * a `blur` event on it.\n     */\n\n    this.touched = false;\n    /**\n     * \\@internal\n     */\n\n    this._onDisabledChange = [];\n  }\n  /**\n   * The parent control.\n   * @return {?}\n   */\n\n\n  _createClass(AbstractControl, [{\n    key: \"parent\",\n    get: function get() {\n      return this._parent;\n    }\n    /**\n     * A control is `valid` when its `status` is `VALID`.\n     *\n     * @see `status`\n     *\n     * @return {?} True if the control has passed all of its validation tests,\n     * false otherwise.\n     */\n\n  }, {\n    key: \"valid\",\n    get: function get() {\n      return this.status === VALID;\n    }\n    /**\n     * A control is `invalid` when its `status` is `INVALID`.\n     *\n     * @see `status`\n     *\n     * @return {?} True if this control has failed one or more of its validation checks,\n     * false otherwise.\n     */\n\n  }, {\n    key: \"invalid\",\n    get: function get() {\n      return this.status === INVALID;\n    }\n    /**\n     * A control is `pending` when its `status` is `PENDING`.\n     *\n     * @see `status`\n     *\n     * @return {?} True if this control is in the process of conducting a validation check,\n     * false otherwise.\n     */\n\n  }, {\n    key: \"pending\",\n    get: function get() {\n      return this.status == PENDING;\n    }\n    /**\n     * A control is `disabled` when its `status` is `DISABLED`.\n     *\n     * @see `status`\n     *\n     * Disabled controls are exempt from validation checks and\n     * are not included in the aggregate value of their ancestor\n     * controls.\n     *\n     * @return {?} True if the control is disabled, false otherwise.\n     */\n\n  }, {\n    key: \"disabled\",\n    get: function get() {\n      return this.status === DISABLED;\n    }\n    /**\n     * A control is `enabled` as long as its `status` is not `DISABLED`.\n     *\n     * @see `status`\n     *\n     * @return {?} True if the control has any status other than 'DISABLED',\n     * false if the status is 'DISABLED'.\n     *\n     */\n\n  }, {\n    key: \"enabled\",\n    get: function get() {\n      return this.status !== DISABLED;\n    }\n    /**\n     * A control is `dirty` if the user has changed the value\n     * in the UI.\n     *\n     * @return {?} True if the user has changed the value of this control in the UI; compare `pristine`.\n     * Programmatic changes to a control's value do not mark it dirty.\n     */\n\n  }, {\n    key: \"dirty\",\n    get: function get() {\n      return !this.pristine;\n    }\n    /**\n     * True if the control has not been marked as touched\n     *\n     * A control is `untouched` if the user has not yet triggered\n     * a `blur` event on it.\n     * @return {?}\n     */\n\n  }, {\n    key: \"untouched\",\n    get: function get() {\n      return !this.touched;\n    }\n    /**\n     * Reports the update strategy of the `AbstractControl` (meaning\n     * the event on which the control updates itself).\n     * Possible values: `'change'` | `'blur'` | `'submit'`\n     * Default value: `'change'`\n     * @return {?}\n     */\n\n  }, {\n    key: \"updateOn\",\n    get: function get() {\n      return this._updateOn ? this._updateOn : this.parent ? this.parent.updateOn : 'change';\n    }\n    /**\n     * Sets the synchronous validators that are active on this control.  Calling\n     * this overwrites any existing sync validators.\n     * @param {?} newValidator\n     * @return {?}\n     */\n\n  }, {\n    key: \"setValidators\",\n    value: function setValidators(newValidator) {\n      this.validator = coerceToValidator(newValidator);\n    }\n    /**\n     * Sets the async validators that are active on this control. Calling this\n     * overwrites any existing async validators.\n     * @param {?} newValidator\n     * @return {?}\n     */\n\n  }, {\n    key: \"setAsyncValidators\",\n    value: function setAsyncValidators(newValidator) {\n      this.asyncValidator = coerceToAsyncValidator(newValidator);\n    }\n    /**\n     * Empties out the sync validator list.\n     * @return {?}\n     */\n\n  }, {\n    key: \"clearValidators\",\n    value: function clearValidators() {\n      this.validator = null;\n    }\n    /**\n     * Empties out the async validator list.\n     * @return {?}\n     */\n\n  }, {\n    key: \"clearAsyncValidators\",\n    value: function clearAsyncValidators() {\n      this.asyncValidator = null;\n    }\n    /**\n     * Marks the control as `touched`. A control is touched by focus and\n     * blur events that do not change the value; compare `markAsDirty`;\n     *\n     * @param {?=} opts Configuration options that determine how the control propagates changes\n     * and emits events events after marking is applied.\n     * * `onlySelf`: When true, mark only this control. When false or not supplied,\n     * marks all direct ancestors. Default is false.\n     * @return {?}\n     */\n\n  }, {\n    key: \"markAsTouched\",\n    value: function markAsTouched() {\n      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      /** @type {?} */\n      this.touched = true;\n\n      if (this._parent && !opts.onlySelf) {\n        this._parent.markAsTouched(opts);\n      }\n    }\n    /**\n     * Marks the control as `untouched`.\n     *\n     * If the control has any children, also marks all children as `untouched`\n     * and recalculates the `touched` status of all parent controls.\n     *\n     * @param {?=} opts Configuration options that determine how the control propagates changes\n     * and emits events after the marking is applied.\n     * * `onlySelf`: When true, mark only this control. When false or not supplied,\n     * marks all direct ancestors. Default is false.\n     * @return {?}\n     */\n\n  }, {\n    key: \"markAsUntouched\",\n    value: function markAsUntouched() {\n      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      /** @type {?} */\n      this.touched = false;\n      this._pendingTouched = false;\n\n      this._forEachChild(function (control) {\n        control.markAsUntouched({\n          onlySelf: true\n        });\n      });\n\n      if (this._parent && !opts.onlySelf) {\n        this._parent._updateTouched(opts);\n      }\n    }\n    /**\n     * Marks the control as `dirty`. A control becomes dirty when\n     * the control's is changed through the UI; compare `markAsTouched`.\n     *\n     * @param {?=} opts Configuration options that determine how the control propagates changes\n     * and emits events after marking is applied.\n     * * `onlySelf`: When true, mark only this control. When false or not supplied,\n     * marks all direct ancestors. Default is false.\n     * @return {?}\n     */\n\n  }, {\n    key: \"markAsDirty\",\n    value: function markAsDirty() {\n      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      /** @type {?} */\n      this.pristine = false;\n\n      if (this._parent && !opts.onlySelf) {\n        this._parent.markAsDirty(opts);\n      }\n    }\n    /**\n     * Marks the control as `pristine`.\n     *\n     * If the control has any children, marks all children as `pristine`,\n     * and recalculates the `pristine` status of all parent\n     * controls.\n     *\n     * @param {?=} opts Configuration options that determine how the control emits events after\n     * marking is applied.\n     * * `onlySelf`: When true, mark only this control. When false or not supplied,\n     * marks all direct ancestors. Default is false..\n     * @return {?}\n     */\n\n  }, {\n    key: \"markAsPristine\",\n    value: function markAsPristine() {\n      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      /** @type {?} */\n      this.pristine = true;\n      this._pendingDirty = false;\n\n      this._forEachChild(function (control) {\n        control.markAsPristine({\n          onlySelf: true\n        });\n      });\n\n      if (this._parent && !opts.onlySelf) {\n        this._parent._updatePristine(opts);\n      }\n    }\n    /**\n     * Marks the control as `pending`.\n     *\n     * A control is pending while the control performs async validation.\n     *\n     * @param {?=} opts Configuration options that determine how the control propagates changes and\n     * emits events after marking is applied.\n     * * `onlySelf`: When true, mark only this control. When false or not supplied,\n     * marks all direct ancestors. Default is false..\n     * * `emitEvent`: When true or not supplied (the default), the `statusChanges`\n     * observable emits an event with the latest status the control is marked pending.\n     * When false, no events are emitted.\n     *\n     * @return {?}\n     */\n\n  }, {\n    key: \"markAsPending\",\n    value: function markAsPending() {\n      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      /** @type {?} */\n      this.status = PENDING;\n\n      if (opts.emitEvent !== false) {\n        /** @type {?} */\n        this.statusChanges.emit(this.status);\n      }\n\n      if (this._parent && !opts.onlySelf) {\n        this._parent.markAsPending(opts);\n      }\n    }\n    /**\n     * Disables the control. This means the control is exempt from validation checks and\n     * excluded from the aggregate value of any parent. Its status is `DISABLED`.\n     *\n     * If the control has children, all children are also disabled.\n     *\n     * @param {?=} opts Configuration options that determine how the control propagates\n     * changes and emits events after the control is disabled.\n     * * `onlySelf`: When true, mark only this control. When false or not supplied,\n     * marks all direct ancestors. Default is false..\n     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n     * `valueChanges`\n     * observables emit events with the latest status and value when the control is disabled.\n     * When false, no events are emitted.\n     * @return {?}\n     */\n\n  }, {\n    key: \"disable\",\n    value: function disable() {\n      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      /** @type {?} */\n      this.status = DISABLED;\n\n      /** @type {?} */\n      this.errors = null;\n\n      this._forEachChild(function (control) {\n        control.disable(Object.assign({}, opts, {\n          onlySelf: true\n        }));\n      });\n\n      this._updateValue();\n\n      if (opts.emitEvent !== false) {\n        /** @type {?} */\n        this.valueChanges.emit(this.value);\n\n        /** @type {?} */\n        this.statusChanges.emit(this.status);\n      }\n\n      this._updateAncestors(opts);\n\n      this._onDisabledChange.forEach(function (changeFn) {\n        return changeFn(true);\n      });\n    }\n    /**\n     * Enables the control. This means the control is included in validation checks and\n     * the aggregate value of its parent. Its status recalculates based on its value and\n     * its validators.\n     *\n     * By default, if the control has children, all children are enabled.\n     *\n     * @param {?=} opts Configure options that control how the control propagates changes and\n     * emits events when marked as untouched\n     * * `onlySelf`: When true, mark only this control. When false or not supplied,\n     * marks all direct ancestors. Default is false..\n     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n     * `valueChanges`\n     * observables emit events with the latest status and value when the control is enabled.\n     * When false, no events are emitted.\n     * @return {?}\n     */\n\n  }, {\n    key: \"enable\",\n    value: function enable() {\n      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      /** @type {?} */\n      this.status = VALID;\n\n      this._forEachChild(function (control) {\n        control.enable(Object.assign({}, opts, {\n          onlySelf: true\n        }));\n      });\n\n      this.updateValueAndValidity({\n        onlySelf: true,\n        emitEvent: opts.emitEvent\n      });\n\n      this._updateAncestors(opts);\n\n      this._onDisabledChange.forEach(function (changeFn) {\n        return changeFn(false);\n      });\n    }\n    /**\n     * @param {?} opts\n     * @return {?}\n     */\n\n  }, {\n    key: \"_updateAncestors\",\n    value: function _updateAncestors(opts) {\n      if (this._parent && !opts.onlySelf) {\n        this._parent.updateValueAndValidity(opts);\n\n        this._parent._updatePristine();\n\n        this._parent._updateTouched();\n      }\n    }\n    /**\n     * @param {?} parent Sets the parent of the control\n     * @return {?}\n     */\n\n  }, {\n    key: \"setParent\",\n    value: function setParent(parent) {\n      this._parent = parent;\n    }\n    /**\n     * Recalculates the value and validation status of the control.\n     *\n     * By default, it also updates the value and validity of its ancestors.\n     *\n     * @param {?=} opts Configuration options determine how the control propagates changes and emits events\n     * after updates and validity checks are applied.\n     * * `onlySelf`: When true, only update this control. When false or not supplied,\n     * update all direct ancestors. Default is false..\n     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n     * `valueChanges`\n     * observables emit events with the latest status and value when the control is updated.\n     * When false, no events are emitted.\n     * @return {?}\n     */\n\n  }, {\n    key: \"updateValueAndValidity\",\n    value: function updateValueAndValidity() {\n      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      this._setInitialStatus();\n\n      this._updateValue();\n\n      if (this.enabled) {\n        this._cancelExistingSubscription();\n\n        /** @type {?} */\n        this.errors = this._runValidator();\n\n        /** @type {?} */\n        this.status = this._calculateStatus();\n\n        if (this.status === VALID || this.status === PENDING) {\n          this._runAsyncValidator(opts.emitEvent);\n        }\n      }\n\n      if (opts.emitEvent !== false) {\n        /** @type {?} */\n        this.valueChanges.emit(this.value);\n\n        /** @type {?} */\n        this.statusChanges.emit(this.status);\n      }\n\n      if (this._parent && !opts.onlySelf) {\n        this._parent.updateValueAndValidity(opts);\n      }\n    }\n    /**\n     * \\@internal\n     * @param {?=} opts\n     * @return {?}\n     */\n\n  }, {\n    key: \"_updateTreeValidity\",\n    value: function _updateTreeValidity() {\n      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n        emitEvent: true\n      };\n\n      this._forEachChild(function (ctrl) {\n        return ctrl._updateTreeValidity(opts);\n      });\n\n      this.updateValueAndValidity({\n        onlySelf: true,\n        emitEvent: opts.emitEvent\n      });\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"_setInitialStatus\",\n    value: function _setInitialStatus() {\n      /** @type {?} */\n      this.status = this._allControlsDisabled() ? DISABLED : VALID;\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"_runValidator\",\n    value: function _runValidator() {\n      return this.validator ? this.validator(this) : null;\n    }\n    /**\n     * @param {?=} emitEvent\n     * @return {?}\n     */\n\n  }, {\n    key: \"_runAsyncValidator\",\n    value: function _runAsyncValidator(emitEvent) {\n      var _this7 = this;\n\n      if (this.asyncValidator) {\n        /** @type {?} */\n        this.status = PENDING;\n        /** @type {?} */\n\n        var obs = toObservable(this.asyncValidator(this));\n        this._asyncValidationSubscription = obs.subscribe(function (errors) {\n          return _this7.setErrors(errors, {\n            emitEvent: emitEvent\n          });\n        });\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"_cancelExistingSubscription\",\n    value: function _cancelExistingSubscription() {\n      if (this._asyncValidationSubscription) {\n        this._asyncValidationSubscription.unsubscribe();\n      }\n    }\n    /**\n     * Sets errors on a form control when running validations manually, rather than automatically.\n     *\n     * Calling `setErrors` also updates the validity of the parent control.\n     *\n     * \\@usageNotes\n     * ### Manually set the errors for a control\n     *\n     * ```\n     * const login = new FormControl('someLogin');\n     * login.setErrors({\n     *   notUnique: true\n     * });\n     *\n     * expect(login.valid).toEqual(false);\n     * expect(login.errors).toEqual({ notUnique: true });\n     *\n     * login.setValue('someOtherLogin');\n     *\n     * expect(login.valid).toEqual(true);\n     * ```\n     * @param {?} errors\n     * @param {?=} opts\n     * @return {?}\n     */\n\n  }, {\n    key: \"setErrors\",\n    value: function setErrors(errors) {\n      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      /** @type {?} */\n      this.errors = errors;\n\n      this._updateControlsErrors(opts.emitEvent !== false);\n    }\n    /**\n     * Retrieves a child control given the control's name or path.\n     *\n     * \\@usageNotes\n     * ### Retrieve a nested control\n     *\n     * For example, to get a `name` control nested within a `person` sub-group:\n     *\n     * * `this.form.get('person.name');`\n     *\n     * -OR-\n     *\n     * * `this.form.get(['person', 'name']);`\n     * @param {?} path A dot-delimited string or array of string/number values that define the path to the\n     * control.\n     *\n     * @return {?}\n     */\n\n  }, {\n    key: \"get\",\n    value: function get(path) {\n      return _find(this, path, '.');\n    }\n    /**\n     * Reports error data for a specific error occurring in this control or in another control.\n     *\n     * @param {?} errorCode The error code for which to retrieve data\n     * @param {?=} path The path to a control to check. If not supplied, checks for the error in this\n     * control.\n     *\n     * @return {?} The error data if the control with the given path has the given error, otherwise null\n     * or undefined.\n     */\n\n  }, {\n    key: \"getError\",\n    value: function getError(errorCode, path) {\n      /** @type {?} */\n      var control = path ? this.get(path) : this;\n      return control && control.errors ? control.errors[errorCode] : null;\n    }\n    /**\n     * Reports whether the control with the given path has the error specified.\n     *\n     * @param {?} errorCode The error code for which to retrieve data\n     * @param {?=} path The path to a control to check. If not supplied, checks for the error in this\n     * control.\n     * @return {?} True when the control with the given path has the error, otherwise false.\n     */\n\n  }, {\n    key: \"hasError\",\n    value: function hasError(errorCode, path) {\n      return !!this.getError(errorCode, path);\n    }\n    /**\n     * Retrieves the top-level ancestor of this control.\n     * @return {?}\n     */\n\n  }, {\n    key: \"root\",\n    get: function get() {\n      /** @type {?} */\n      var x = this;\n\n      while (x._parent) {\n        x = x._parent;\n      }\n\n      return x;\n    }\n    /**\n     * \\@internal\n     * @param {?} emitEvent\n     * @return {?}\n     */\n\n  }, {\n    key: \"_updateControlsErrors\",\n    value: function _updateControlsErrors(emitEvent) {\n      /** @type {?} */\n      this.status = this._calculateStatus();\n\n      if (emitEvent) {\n        /** @type {?} */\n        this.statusChanges.emit(this.status);\n      }\n\n      if (this._parent) {\n        this._parent._updateControlsErrors(emitEvent);\n      }\n    }\n    /**\n     * \\@internal\n     * @return {?}\n     */\n\n  }, {\n    key: \"_initObservables\",\n    value: function _initObservables() {\n      /** @type {?} */\n      this.valueChanges = new EventEmitter();\n\n      /** @type {?} */\n      this.statusChanges = new EventEmitter();\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"_calculateStatus\",\n    value: function _calculateStatus() {\n      if (this._allControlsDisabled()) return DISABLED;\n      if (this.errors) return INVALID;\n      if (this._anyControlsHaveStatus(PENDING)) return PENDING;\n      if (this._anyControlsHaveStatus(INVALID)) return INVALID;\n      return VALID;\n    }\n    /**\n     * \\@internal\n     * @param {?} status\n     * @return {?}\n     */\n\n  }, {\n    key: \"_anyControlsHaveStatus\",\n    value: function _anyControlsHaveStatus(status) {\n      return this._anyControls(function (control) {\n        return control.status === status;\n      });\n    }\n    /**\n     * \\@internal\n     * @return {?}\n     */\n\n  }, {\n    key: \"_anyControlsDirty\",\n    value: function _anyControlsDirty() {\n      return this._anyControls(function (control) {\n        return control.dirty;\n      });\n    }\n    /**\n     * \\@internal\n     * @return {?}\n     */\n\n  }, {\n    key: \"_anyControlsTouched\",\n    value: function _anyControlsTouched() {\n      return this._anyControls(function (control) {\n        return control.touched;\n      });\n    }\n    /**\n     * \\@internal\n     * @param {?=} opts\n     * @return {?}\n     */\n\n  }, {\n    key: \"_updatePristine\",\n    value: function _updatePristine() {\n      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      /** @type {?} */\n      this.pristine = !this._anyControlsDirty();\n\n      if (this._parent && !opts.onlySelf) {\n        this._parent._updatePristine(opts);\n      }\n    }\n    /**\n     * \\@internal\n     * @param {?=} opts\n     * @return {?}\n     */\n\n  }, {\n    key: \"_updateTouched\",\n    value: function _updateTouched() {\n      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      /** @type {?} */\n      this.touched = this._anyControlsTouched();\n\n      if (this._parent && !opts.onlySelf) {\n        this._parent._updateTouched(opts);\n      }\n    }\n    /**\n     * \\@internal\n     * @param {?} formState\n     * @return {?}\n     */\n\n  }, {\n    key: \"_isBoxedValue\",\n    value: function _isBoxedValue(formState) {\n      return typeof formState === 'object' && formState !== null && Object.keys(formState).length === 2 && 'value' in formState && 'disabled' in formState;\n    }\n    /**\n     * \\@internal\n     * @param {?} fn\n     * @return {?}\n     */\n\n  }, {\n    key: \"_registerOnCollectionChange\",\n    value: function _registerOnCollectionChange(fn) {\n      this._onCollectionChange = fn;\n    }\n    /**\n     * \\@internal\n     * @param {?=} opts\n     * @return {?}\n     */\n\n  }, {\n    key: \"_setUpdateStrategy\",\n    value: function _setUpdateStrategy(opts) {\n      if (isOptionsObj(opts) &&\n      /** @type {?} */\n      opts.updateOn != null) {\n        this._updateOn =\n        /** @type {?} */\n\n        /** @type {?} */\n        opts.updateOn;\n      }\n    }\n  }]);\n\n  return AbstractControl;\n}();\n/**\n * Tracks the value and validation status of an individual form control.\n *\n * This is one of the three fundamental building blocks of Angular forms, along with\n * `FormGroup` and `FormArray`. It extends the `AbstractControl` class that\n * implements most of the base functionality for accessing the value, validation status,\n * user interactions and events.\n *\n * @see `AbstractControl`\n * @see [Reactive Forms Guide](guide/reactive-forms)\n * @see [Usage Notes](#usage-notes)\n *\n * \\@usageNotes\n *\n * ### Initializing Form Controls\n *\n * Instantiate a `FormControl`, with an initial value.\n *\n * ```ts\n * const control = new FormControl('some value');\n * console.log(control.value);     // 'some value'\n * ```\n *\n * The following example initializes the control with a form state object. The `value`\n * and `disabled` keys are required in this case.\n *\n * ```ts\n * const control = new FormControl({ value: 'n/a', disabled: true });\n * console.log(control.value);     // 'n/a'\n * console.log(control.status);    // 'DISABLED'\n * ```\n *\n * The following example initializes the control with a sync validator.\n *\n * ```ts\n * const control = new FormControl('', Validators.required);\n * console.log(control.value);      // ''\n * console.log(control.status);     // 'INVALID'\n * ```\n *\n * The following example initializes the control using an options object.\n *\n * ```ts\n * const control = new FormControl('', {\n *    validators: Validators.required,\n *    asyncValidators: myAsyncValidator\n * });\n * ```\n *\n * ### Configure the control to update on a blur event\n *\n * Set the `updateOn` option to `'blur'` to update on the blur `event`.\n *\n * ```ts\n * const control = new FormControl('', { updateOn: 'blur' });\n * ```\n *\n * ### Configure the control to update on a submit event\n *\n * Set the `updateOn` option to `'submit'` to update on a submit `event`.\n *\n * ```ts\n * const control = new FormControl('', { updateOn: 'submit' });\n * ```\n *\n * ### Reset the control back to an initial value\n *\n * You reset to a specific form state by passing through a standalone\n * value or a form state object that contains both a value and a disabled state\n * (these are the only two properties that cannot be calculated).\n *\n * ```ts\n * const control = new FormControl('Nancy');\n *\n * console.log(control.value); // 'Nancy'\n *\n * control.reset('Drew');\n *\n * console.log(control.value); // 'Drew'\n * ```\n *\n * ### Reset the control back to an initial value and disabled\n *\n * ```\n * const control = new FormControl('Nancy');\n *\n * console.log(control.value); // 'Nancy'\n * console.log(control.status); // 'VALID'\n *\n * control.reset({ value: 'Drew', disabled: true });\n *\n * console.log(control.value); // 'Drew'\n * console.log(control.status); // 'DISABLED'\n *\n */\n\n\nvar FormControl = /*#__PURE__*/function (_AbstractControl) {\n  _inherits(FormControl, _AbstractControl);\n\n  var _super6 = _createSuper(FormControl);\n\n  /**\n   * Creates a new `FormControl` instance.\n   *\n   * @param {?=} formState Initializes the control with an initial value,\n   * or an object that defines the initial value and disabled state.\n   *\n   * @param {?=} validatorOrOpts A synchronous validator function, or an array of\n   * such functions, or an `AbstractControlOptions` object that contains validation functions\n   * and a validation trigger.\n   *\n   * @param {?=} asyncValidator A single async validator or array of async validator functions\n   *\n   */\n  function FormControl() {\n    var _this8;\n\n    var formState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    var validatorOrOpts = arguments.length > 1 ? arguments[1] : undefined;\n    var asyncValidator = arguments.length > 2 ? arguments[2] : undefined;\n\n    _classCallCheck(this, FormControl);\n\n    _this8 = _super6.call(this, coerceToValidator(validatorOrOpts), coerceToAsyncValidator(asyncValidator, validatorOrOpts));\n    /**\n     * \\@internal\n     */\n\n    _this8._onChange = [];\n\n    _this8._applyFormState(formState);\n\n    _this8._setUpdateStrategy(validatorOrOpts);\n\n    _this8.updateValueAndValidity({\n      onlySelf: true,\n      emitEvent: false\n    });\n\n    _this8._initObservables();\n\n    return _this8;\n  }\n  /**\n   * Sets a new value for the form control.\n   *\n   * @param {?} value The new value for the control.\n   * @param {?=} options Configuration options that determine how the control proopagates changes\n   * and emits events when the value changes.\n   * The configuration options are passed to the {\\@link AbstractControl#updateValueAndValidity\n   * updateValueAndValidity} method.\n   *\n   * * `onlySelf`: When true, each change only affects this control, and not its parent. Default is\n   * false.\n   * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n   * `valueChanges`\n   * observables emit events with the latest status and value when the control value is updated.\n   * When false, no events are emitted.\n   * * `emitModelToViewChange`: When true or not supplied  (the default), each change triggers an\n   * `onChange` event to\n   * update the view.\n   * * `emitViewToModelChange`: When true or not supplied (the default), each change triggers an\n   * `ngModelChange`\n   * event to update the model.\n   *\n   * @return {?}\n   */\n\n\n  _createClass(FormControl, [{\n    key: \"setValue\",\n    value: function setValue(value) {\n      var _this9 = this;\n\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      /** @type {?} */\n      this.value = this._pendingValue = value;\n\n      if (this._onChange.length && options.emitModelToViewChange !== false) {\n        this._onChange.forEach(function (changeFn) {\n          return changeFn(_this9.value, options.emitViewToModelChange !== false);\n        });\n      }\n\n      this.updateValueAndValidity(options);\n    }\n    /**\n     * Patches the value of a control.\n     *\n     * This function is functionally the same as {\\@link FormControl#setValue setValue} at this level.\n     * It exists for symmetry with {\\@link FormGroup#patchValue patchValue} on `FormGroups` and\n     * `FormArrays`, where it does behave differently.\n     *\n     * @see `setValue` for options\n     * @param {?} value\n     * @param {?=} options\n     * @return {?}\n     */\n\n  }, {\n    key: \"patchValue\",\n    value: function patchValue(value) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      this.setValue(value, options);\n    }\n    /**\n     * Resets the form control, marking it `pristine` and `untouched`, and setting\n     * the value to null.\n     *\n     * @param {?=} formState Resets the control with an initial value,\n     * or an object that defines the initial value and disabled state.\n     *\n     * @param {?=} options Configuration options that determine how the control propagates changes\n     * and emits events after the value changes.\n     *\n     * * `onlySelf`: When true, each change only affects this control, and not its parent. Default is\n     * false.\n     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n     * `valueChanges`\n     * observables emit events with the latest status and value when the control is reset.\n     * When false, no events are emitted.\n     *\n     * @return {?}\n     */\n\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      var formState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      this._applyFormState(formState);\n\n      this.markAsPristine(options);\n      this.markAsUntouched(options);\n      this.setValue(this.value, options);\n      this._pendingChange = false;\n    }\n    /**\n     * \\@internal\n     * @return {?}\n     */\n\n  }, {\n    key: \"_updateValue\",\n    value: function _updateValue() {}\n    /**\n     * \\@internal\n     * @param {?} condition\n     * @return {?}\n     */\n\n  }, {\n    key: \"_anyControls\",\n    value: function _anyControls(condition) {\n      return false;\n    }\n    /**\n     * \\@internal\n     * @return {?}\n     */\n\n  }, {\n    key: \"_allControlsDisabled\",\n    value: function _allControlsDisabled() {\n      return this.disabled;\n    }\n    /**\n     * Register a listener for change events.\n     *\n     * @param {?} fn The method that is called when the value changes\n     * @return {?}\n     */\n\n  }, {\n    key: \"registerOnChange\",\n    value: function registerOnChange(fn) {\n      this._onChange.push(fn);\n    }\n    /**\n     * \\@internal\n     * @return {?}\n     */\n\n  }, {\n    key: \"_clearChangeFns\",\n    value: function _clearChangeFns() {\n      this._onChange = [];\n      this._onDisabledChange = [];\n\n      this._onCollectionChange = function () {};\n    }\n    /**\n     * Register a listener for disabled events.\n     *\n     * @param {?} fn The method that is called when the disabled status changes.\n     * @return {?}\n     */\n\n  }, {\n    key: \"registerOnDisabledChange\",\n    value: function registerOnDisabledChange(fn) {\n      this._onDisabledChange.push(fn);\n    }\n    /**\n     * \\@internal\n     * @param {?} cb\n     * @return {?}\n     */\n\n  }, {\n    key: \"_forEachChild\",\n    value: function _forEachChild(cb) {}\n    /**\n     * \\@internal\n     * @return {?}\n     */\n\n  }, {\n    key: \"_syncPendingControls\",\n    value: function _syncPendingControls() {\n      if (this.updateOn === 'submit') {\n        if (this._pendingDirty) this.markAsDirty();\n        if (this._pendingTouched) this.markAsTouched();\n\n        if (this._pendingChange) {\n          this.setValue(this._pendingValue, {\n            onlySelf: true,\n            emitModelToViewChange: false\n          });\n          return true;\n        }\n      }\n\n      return false;\n    }\n    /**\n     * @param {?} formState\n     * @return {?}\n     */\n\n  }, {\n    key: \"_applyFormState\",\n    value: function _applyFormState(formState) {\n      if (this._isBoxedValue(formState)) {\n        /** @type {?} */\n        this.value = this._pendingValue = formState.value;\n        formState.disabled ? this.disable({\n          onlySelf: true,\n          emitEvent: false\n        }) : this.enable({\n          onlySelf: true,\n          emitEvent: false\n        });\n      } else {\n        /** @type {?} */\n        this.value = this._pendingValue = formState;\n      }\n    }\n  }]);\n\n  return FormControl;\n}(AbstractControl);\n/**\n * Tracks the value and validity state of a group of `FormControl` instances.\n *\n * A `FormGroup` aggregates the values of each child `FormControl` into one object,\n * with each control name as the key.  It calculates its status by reducing the status values\n * of its children. For example, if one of the controls in a group is invalid, the entire\n * group becomes invalid.\n *\n * `FormGroup` is one of the three fundamental building blocks used to define forms in Angular,\n * along with `FormControl` and `FormArray`.\n *\n * When instantiating a `FormGroup`, pass in a collection of child controls as the first\n * argument. The key for each child registers the name for the control.\n *\n * \\@usageNotes\n *\n * ### Create a form group with 2 controls\n *\n * ```\n * const form = new FormGroup({\n *   first: new FormControl('Nancy', Validators.minLength(2)),\n *   last: new FormControl('Drew'),\n * });\n *\n * console.log(form.value);   // {first: 'Nancy', last; 'Drew'}\n * console.log(form.status);  // 'VALID'\n * ```\n *\n * ### Create a form group with a group-level validator\n *\n * You include group-level validators as the second arg, or group-level async\n * validators as the third arg. These come in handy when you want to perform validation\n * that considers the value of more than one child control.\n *\n * ```\n * const form = new FormGroup({\n *   password: new FormControl('', Validators.minLength(2)),\n *   passwordConfirm: new FormControl('', Validators.minLength(2)),\n * }, passwordMatchValidator);\n *\n *\n * function passwordMatchValidator(g: FormGroup) {\n *    return g.get('password').value === g.get('passwordConfirm').value\n *       ? null : {'mismatch': true};\n * }\n * ```\n *\n * Like `FormControl` instances, you choose to pass in\n * validators and async validators as part of an options object.\n *\n * ```\n * const form = new FormGroup({\n *   password: new FormControl('')\n *   passwordConfirm: new FormControl('')\n * }, { validators: passwordMatchValidator, asyncValidators: otherValidator });\n * ```\n *\n * ### Set the updateOn property for all controls in a form group\n *\n * The options object is used to set a default value for each child\n * control's `updateOn` property. If you set `updateOn` to `'blur'` at the\n * group level, all child controls default to 'blur', unless the child\n * has explicitly specified a different `updateOn` value.\n *\n * ```ts\n * const c = new FormGroup({\n *   one: new FormControl()\n * }, { updateOn: 'blur' });\n * ```\n */\n\n\nvar FormGroup = /*#__PURE__*/function (_AbstractControl2) {\n  _inherits(FormGroup, _AbstractControl2);\n\n  var _super7 = _createSuper(FormGroup);\n\n  /**\n   * Creates a new `FormGroup` instance.\n   *\n   * @param {?} controls A collection of child controls. The key for each child is the name\n   * under which it is registered.\n   *\n   * @param {?=} validatorOrOpts A synchronous validator function, or an array of\n   * such functions, or an `AbstractControlOptions` object that contains validation functions\n   * and a validation trigger.\n   *\n   * @param {?=} asyncValidator A single async validator or array of async validator functions\n   *\n   */\n  function FormGroup(controls, validatorOrOpts, asyncValidator) {\n    var _this10;\n\n    _classCallCheck(this, FormGroup);\n\n    _this10 = _super7.call(this, coerceToValidator(validatorOrOpts), coerceToAsyncValidator(asyncValidator, validatorOrOpts));\n    _this10.controls = controls;\n\n    _this10._initObservables();\n\n    _this10._setUpdateStrategy(validatorOrOpts);\n\n    _this10._setUpControls();\n\n    _this10.updateValueAndValidity({\n      onlySelf: true,\n      emitEvent: false\n    });\n\n    return _this10;\n  }\n  /**\n   * Registers a control with the group's list of controls.\n   *\n   * This method does not update the value or validity of the control.\n   * Use {\\@link FormGroup#addControl addControl} instead.\n   *\n   * @param {?} name The control name to register in the collection\n   * @param {?} control Provides the control for the given name\n   * @return {?}\n   */\n\n\n  _createClass(FormGroup, [{\n    key: \"registerControl\",\n    value: function registerControl(name, control) {\n      if (this.controls[name]) return this.controls[name];\n      this.controls[name] = control;\n      control.setParent(this);\n\n      control._registerOnCollectionChange(this._onCollectionChange);\n\n      return control;\n    }\n    /**\n     * Add a control to this group.\n     *\n     * This method also updates the value and validity of the control.\n     *\n     * @param {?} name The control name to add to the collection\n     * @param {?} control Provides the control for the given name\n     * @return {?}\n     */\n\n  }, {\n    key: \"addControl\",\n    value: function addControl(name, control) {\n      this.registerControl(name, control);\n      this.updateValueAndValidity();\n\n      this._onCollectionChange();\n    }\n    /**\n     * Remove a control from this group.\n     *\n     * @param {?} name The control name to remove from the collection\n     * @return {?}\n     */\n\n  }, {\n    key: \"removeControl\",\n    value: function removeControl(name) {\n      if (this.controls[name]) this.controls[name]._registerOnCollectionChange(function () {});\n      delete this.controls[name];\n      this.updateValueAndValidity();\n\n      this._onCollectionChange();\n    }\n    /**\n     * Replace an existing control.\n     *\n     * @param {?} name The control name to replace in the collection\n     * @param {?} control Provides the control for the given name\n     * @return {?}\n     */\n\n  }, {\n    key: \"setControl\",\n    value: function setControl(name, control) {\n      if (this.controls[name]) this.controls[name]._registerOnCollectionChange(function () {});\n      delete this.controls[name];\n      if (control) this.registerControl(name, control);\n      this.updateValueAndValidity();\n\n      this._onCollectionChange();\n    }\n    /**\n     * Check whether there is an enabled control with the given name in the group.\n     *\n     * Reports false for disabled controls. If you'd like to check for existence in the group\n     * only, use {\\@link AbstractControl#get get} instead.\n     *\n     * @param {?} controlName\n     * @return {?} false for disabled controls, true otherwise.\n     */\n\n  }, {\n    key: \"contains\",\n    value: function contains(controlName) {\n      return this.controls.hasOwnProperty(controlName) && this.controls[controlName].enabled;\n    }\n    /**\n     * Sets the value of the `FormGroup`. It accepts an object that matches\n     * the structure of the group, with control names as keys.\n     *\n     * \\@usageNotes\n     * ### Set the complete value for the form group\n     *\n     * ```\n     * const form = new FormGroup({\n     *   first: new FormControl(),\n     *   last: new FormControl()\n     * });\n     *\n     * console.log(form.value);   // {first: null, last: null}\n     *\n     * form.setValue({first: 'Nancy', last: 'Drew'});\n     * console.log(form.value);   // {first: 'Nancy', last: 'Drew'}\n     * ```\n     *\n     * @throws When strict checks fail, such as setting the value of a control\n     * that doesn't exist or if you excluding the value of a control.\n     *\n     * @param {?} value The new value for the control that matches the structure of the group.\n     * @param {?=} options Configuration options that determine how the control propagates changes\n     * and emits events after the value changes.\n     * The configuration options are passed to the {\\@link AbstractControl#updateValueAndValidity\n     * updateValueAndValidity} method.\n     *\n     * * `onlySelf`: When true, each change only affects this control, and not its parent. Default is\n     * false.\n     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n     * `valueChanges`\n     * observables emit events with the latest status and value when the control value is updated.\n     * When false, no events are emitted.\n     * @return {?}\n     */\n\n  }, {\n    key: \"setValue\",\n    value: function setValue(value) {\n      var _this11 = this;\n\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      this._checkAllValuesPresent(value);\n\n      Object.keys(value).forEach(function (name) {\n        _this11._throwIfControlMissing(name);\n\n        _this11.controls[name].setValue(value[name], {\n          onlySelf: true,\n          emitEvent: options.emitEvent\n        });\n      });\n      this.updateValueAndValidity(options);\n    }\n    /**\n     * Patches the value of the `FormGroup`. It accepts an object with control\n     * names as keys, and does its best to match the values to the correct controls\n     * in the group.\n     *\n     * It accepts both super-sets and sub-sets of the group without throwing an error.\n     *\n     * \\@usageNotes\n     * ### Patch the value for a form group\n     *\n     * ```\n     * const form = new FormGroup({\n     *    first: new FormControl(),\n     *    last: new FormControl()\n     * });\n     * console.log(form.value);   // {first: null, last: null}\n     *\n     * form.patchValue({first: 'Nancy'});\n     * console.log(form.value);   // {first: 'Nancy', last: null}\n     * ```\n     *\n     * @param {?} value The object that matches the structure of the group.\n     * @param {?=} options Configuration options that determine how the control propagates changes and\n     * emits events after the value is patched.\n     * * `onlySelf`: When true, each change only affects this control and not its parent. Default is\n     * true.\n     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n     * `valueChanges`\n     * observables emit events with the latest status and value when the control value is updated.\n     * When false, no events are emitted.\n     * The configuration options are passed to the {\\@link AbstractControl#updateValueAndValidity\n     * updateValueAndValidity} method.\n     * @return {?}\n     */\n\n  }, {\n    key: \"patchValue\",\n    value: function patchValue(value) {\n      var _this12 = this;\n\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      Object.keys(value).forEach(function (name) {\n        if (_this12.controls[name]) {\n          _this12.controls[name].patchValue(value[name], {\n            onlySelf: true,\n            emitEvent: options.emitEvent\n          });\n        }\n      });\n      this.updateValueAndValidity(options);\n    }\n    /**\n     * Resets the `FormGroup`, marks all descendants are marked `pristine` and `untouched`, and\n     * the value of all descendants to null.\n     *\n     * You reset to a specific form state by passing in a map of states\n     * that matches the structure of your form, with control names as keys. The state\n     * is a standalone value or a form state object with both a value and a disabled\n     * status.\n     *\n     * \\@usageNotes\n     *\n     * ### Reset the form group values\n     *\n     * ```ts\n     * const form = new FormGroup({\n     *   first: new FormControl('first name'),\n     *   last: new FormControl('last name')\n     * });\n     *\n     * console.log(form.value);  // {first: 'first name', last: 'last name'}\n     *\n     * form.reset({ first: 'name', last: 'last name' });\n     *\n     * console.log(form.value);  // {first: 'name', last: 'last name'}\n     * ```\n     *\n     * ### Reset the form group values and disabled status\n     *\n     * ```\n     * const form = new FormGroup({\n     *   first: new FormControl('first name'),\n     *   last: new FormControl('last name')\n     * });\n     *\n     * form.reset({\n     *   first: {value: 'name', disabled: true},\n     *   last: 'last'\n     * });\n     *\n     * console.log(this.form.value);  // {first: 'name', last: 'last name'}\n     * console.log(this.form.get('first').status);  // 'DISABLED'\n     * ```\n     * @param {?=} value\n     * @param {?=} options Configuration options that determine how the control propagates changes\n     * and emits events when the group is reset.\n     * * `onlySelf`: When true, each change only affects this control, and not its parent. Default is\n     * false.\n     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n     * `valueChanges`\n     * observables emit events with the latest status and value when the control is reset.\n     * When false, no events are emitted.\n     * The configuration options are passed to the {\\@link AbstractControl#updateValueAndValidity\n     * updateValueAndValidity} method.\n     *\n     * @return {?}\n     */\n\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      this._forEachChild(function (control, name) {\n        control.reset(value[name], {\n          onlySelf: true,\n          emitEvent: options.emitEvent\n        });\n      });\n\n      this.updateValueAndValidity(options);\n\n      this._updatePristine(options);\n\n      this._updateTouched(options);\n    }\n    /**\n     * The aggregate value of the `FormGroup`, including any disabled controls.\n     *\n     * Retrieves all values regardless of disabled status.\n     * The `value` property is the best way to get the value of the group, because\n     * it excludes disabled controls in the `FormGroup`.\n     * @return {?}\n     */\n\n  }, {\n    key: \"getRawValue\",\n    value: function getRawValue() {\n      return this._reduceChildren({}, function (acc, control, name) {\n        acc[name] = control instanceof FormControl ? control.value :\n        /** @type {?} */\n        control.getRawValue();\n        return acc;\n      });\n    }\n    /**\n     * \\@internal\n     * @return {?}\n     */\n\n  }, {\n    key: \"_syncPendingControls\",\n    value: function _syncPendingControls() {\n      /** @type {?} */\n      var subtreeUpdated = this._reduceChildren(false, function (updated, child) {\n        return child._syncPendingControls() ? true : updated;\n      });\n\n      if (subtreeUpdated) this.updateValueAndValidity({\n        onlySelf: true\n      });\n      return subtreeUpdated;\n    }\n    /**\n     * \\@internal\n     * @param {?} name\n     * @return {?}\n     */\n\n  }, {\n    key: \"_throwIfControlMissing\",\n    value: function _throwIfControlMissing(name) {\n      if (!Object.keys(this.controls).length) {\n        throw new Error(\"\\n        There are no form controls registered with this group yet.  If you're using ngModel,\\n        you may want to check next tick (e.g. use setTimeout).\\n      \");\n      }\n\n      if (!this.controls[name]) {\n        throw new Error(\"Cannot find form control with name: \".concat(name, \".\"));\n      }\n    }\n    /**\n     * \\@internal\n     * @param {?} cb\n     * @return {?}\n     */\n\n  }, {\n    key: \"_forEachChild\",\n    value: function _forEachChild(cb) {\n      var _this13 = this;\n\n      Object.keys(this.controls).forEach(function (k) {\n        return cb(_this13.controls[k], k);\n      });\n    }\n    /**\n     * \\@internal\n     * @return {?}\n     */\n\n  }, {\n    key: \"_setUpControls\",\n    value: function _setUpControls() {\n      var _this14 = this;\n\n      this._forEachChild(function (control) {\n        control.setParent(_this14);\n\n        control._registerOnCollectionChange(_this14._onCollectionChange);\n      });\n    }\n    /**\n     * \\@internal\n     * @return {?}\n     */\n\n  }, {\n    key: \"_updateValue\",\n    value: function _updateValue() {\n      /** @type {?} */\n      this.value = this._reduceValue();\n    }\n    /**\n     * \\@internal\n     * @param {?} condition\n     * @return {?}\n     */\n\n  }, {\n    key: \"_anyControls\",\n    value: function _anyControls(condition) {\n      var _this15 = this;\n\n      /** @type {?} */\n      var res = false;\n\n      this._forEachChild(function (control, name) {\n        res = res || _this15.contains(name) && condition(control);\n      });\n\n      return res;\n    }\n    /**\n     * \\@internal\n     * @return {?}\n     */\n\n  }, {\n    key: \"_reduceValue\",\n    value: function _reduceValue() {\n      var _this16 = this;\n\n      return this._reduceChildren({}, function (acc, control, name) {\n        if (control.enabled || _this16.disabled) {\n          acc[name] = control.value;\n        }\n\n        return acc;\n      });\n    }\n    /**\n     * \\@internal\n     * @param {?} initValue\n     * @param {?} fn\n     * @return {?}\n     */\n\n  }, {\n    key: \"_reduceChildren\",\n    value: function _reduceChildren(initValue, fn) {\n      /** @type {?} */\n      var res = initValue;\n\n      this._forEachChild(function (control, name) {\n        res = fn(res, control, name);\n      });\n\n      return res;\n    }\n    /**\n     * \\@internal\n     * @return {?}\n     */\n\n  }, {\n    key: \"_allControlsDisabled\",\n    value: function _allControlsDisabled() {\n      for (var _i4 = 0, _Object$keys = Object.keys(this.controls); _i4 < _Object$keys.length; _i4++) {\n        var controlName = _Object$keys[_i4];\n\n        if (this.controls[controlName].enabled) {\n          return false;\n        }\n      }\n\n      return Object.keys(this.controls).length > 0 || this.disabled;\n    }\n    /**\n     * \\@internal\n     * @param {?} value\n     * @return {?}\n     */\n\n  }, {\n    key: \"_checkAllValuesPresent\",\n    value: function _checkAllValuesPresent(value) {\n      this._forEachChild(function (control, name) {\n        if (value[name] === undefined) {\n          throw new Error(\"Must supply a value for form control with name: '\".concat(name, \"'.\"));\n        }\n      });\n    }\n  }]);\n\n  return FormGroup;\n}(AbstractControl);\n/**\n * Tracks the value and validity state of an array of `FormControl`,\n * `FormGroup` or `FormArray` instances.\n *\n * A `FormArray` aggregates the values of each child `FormControl` into an array.\n * It calculates its status by reducing the status values of its children. For example, if one of\n * the controls in a `FormArray` is invalid, the entire array becomes invalid.\n *\n * `FormArray` is one of the three fundamental building blocks used to define forms in Angular,\n * along with `FormControl` and `FormGroup`.\n *\n * \\@usageNotes\n *\n * ### Create an array of form controls\n *\n * ```\n * const arr = new FormArray([\n *   new FormControl('Nancy', Validators.minLength(2)),\n *   new FormControl('Drew'),\n * ]);\n *\n * console.log(arr.value);   // ['Nancy', 'Drew']\n * console.log(arr.status);  // 'VALID'\n * ```\n *\n * ### Create a form array with array-level validators\n *\n * You include array-level validators and async validators. These come in handy\n * when you want to perform validation that considers the value of more than one child\n * control.\n *\n * The two types of validators are passed in separately as the second and third arg\n * respectively, or together as part of an options object.\n *\n * ```\n * const arr = new FormArray([\n *   new FormControl('Nancy'),\n *   new FormControl('Drew')\n * ], {validators: myValidator, asyncValidators: myAsyncValidator});\n * ```\n *\n * ### Set the updateOn property for all controls in a form array\n *\n * The options object is used to set a default value for each child\n * control's `updateOn` property. If you set `updateOn` to `'blur'` at the\n * array level, all child controls default to 'blur', unless the child\n * has explicitly specified a different `updateOn` value.\n *\n * ```ts\n * const arr = new FormArray([\n *    new FormControl()\n * ], {updateOn: 'blur'});\n * ```\n *\n * ### Adding or removing controls from a form array\n *\n * To change the controls in the array, use the `push`, `insert`, or `removeAt` methods\n * in `FormArray` itself. These methods ensure the controls are properly tracked in the\n * form's hierarchy. Do not modify the array of `AbstractControl`s used to instantiate\n * the `FormArray` directly, as that result in strange and unexpected behavior such\n * as broken change detection.\n *\n *\n */\n\n\nvar FormArray = /*#__PURE__*/function (_AbstractControl3) {\n  _inherits(FormArray, _AbstractControl3);\n\n  var _super8 = _createSuper(FormArray);\n\n  /**\n   * Creates a new `FormArray` instance.\n   *\n   * @param {?} controls An array of child controls. Each child control is given an index\n   * where it is registered.\n   *\n   * @param {?=} validatorOrOpts A synchronous validator function, or an array of\n   * such functions, or an `AbstractControlOptions` object that contains validation functions\n   * and a validation trigger.\n   *\n   * @param {?=} asyncValidator A single async validator or array of async validator functions\n   *\n   */\n  function FormArray(controls, validatorOrOpts, asyncValidator) {\n    var _this17;\n\n    _classCallCheck(this, FormArray);\n\n    _this17 = _super8.call(this, coerceToValidator(validatorOrOpts), coerceToAsyncValidator(asyncValidator, validatorOrOpts));\n    _this17.controls = controls;\n\n    _this17._initObservables();\n\n    _this17._setUpdateStrategy(validatorOrOpts);\n\n    _this17._setUpControls();\n\n    _this17.updateValueAndValidity({\n      onlySelf: true,\n      emitEvent: false\n    });\n\n    return _this17;\n  }\n  /**\n   * Get the `AbstractControl` at the given `index` in the array.\n   *\n   * @param {?} index Index in the array to retrieve the control\n   * @return {?}\n   */\n\n\n  _createClass(FormArray, [{\n    key: \"at\",\n    value: function at(index) {\n      return this.controls[index];\n    }\n    /**\n     * Insert a new `AbstractControl` at the end of the array.\n     *\n     * @param {?} control Form control to be inserted\n     * @return {?}\n     */\n\n  }, {\n    key: \"push\",\n    value: function push(control) {\n      this.controls.push(control);\n\n      this._registerControl(control);\n\n      this.updateValueAndValidity();\n\n      this._onCollectionChange();\n    }\n    /**\n     * Insert a new `AbstractControl` at the given `index` in the array.\n     *\n     * @param {?} index Index in the array to insert the control\n     * @param {?} control Form control to be inserted\n     * @return {?}\n     */\n\n  }, {\n    key: \"insert\",\n    value: function insert(index, control) {\n      this.controls.splice(index, 0, control);\n\n      this._registerControl(control);\n\n      this.updateValueAndValidity();\n    }\n    /**\n     * Remove the control at the given `index` in the array.\n     *\n     * @param {?} index Index in the array to remove the control\n     * @return {?}\n     */\n\n  }, {\n    key: \"removeAt\",\n    value: function removeAt(index) {\n      if (this.controls[index]) this.controls[index]._registerOnCollectionChange(function () {});\n      this.controls.splice(index, 1);\n      this.updateValueAndValidity();\n    }\n    /**\n     * Replace an existing control.\n     *\n     * @param {?} index Index in the array to replace the control\n     * @param {?} control The `AbstractControl` control to replace the existing control\n     * @return {?}\n     */\n\n  }, {\n    key: \"setControl\",\n    value: function setControl(index, control) {\n      if (this.controls[index]) this.controls[index]._registerOnCollectionChange(function () {});\n      this.controls.splice(index, 1);\n\n      if (control) {\n        this.controls.splice(index, 0, control);\n\n        this._registerControl(control);\n      }\n\n      this.updateValueAndValidity();\n\n      this._onCollectionChange();\n    }\n    /**\n     * Length of the control array.\n     * @return {?}\n     */\n\n  }, {\n    key: \"length\",\n    get: function get() {\n      return this.controls.length;\n    }\n    /**\n     * Sets the value of the `FormArray`. It accepts an array that matches\n     * the structure of the control.\n     *\n     * This method performs strict checks, and throws an error if you try\n     * to set the value of a control that doesn't exist or if you exclude the\n     * value of a control.\n     *\n     * \\@usageNotes\n     * ### Set the values for the controls in the form array\n     *\n     * ```\n     * const arr = new FormArray([\n     *   new FormControl(),\n     *   new FormControl()\n     * ]);\n     * console.log(arr.value);   // [null, null]\n     *\n     * arr.setValue(['Nancy', 'Drew']);\n     * console.log(arr.value);   // ['Nancy', 'Drew']\n     * ```\n     *\n     * @param {?} value Array of values for the controls\n     * @param {?=} options Configure options that determine how the control propagates changes and\n     * emits events after the value changes\n     *\n     * * `onlySelf`: When true, each change only affects this control, and not its parent. Default\n     * is false.\n     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n     * `valueChanges`\n     * observables emit events with the latest status and value when the control value is updated.\n     * When false, no events are emitted.\n     * The configuration options are passed to the {\\@link AbstractControl#updateValueAndValidity\n     * updateValueAndValidity} method.\n     * @return {?}\n     */\n\n  }, {\n    key: \"setValue\",\n    value: function setValue(value) {\n      var _this18 = this;\n\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      this._checkAllValuesPresent(value);\n\n      value.forEach(function (newValue, index) {\n        _this18._throwIfControlMissing(index);\n\n        _this18.at(index).setValue(newValue, {\n          onlySelf: true,\n          emitEvent: options.emitEvent\n        });\n      });\n      this.updateValueAndValidity(options);\n    }\n    /**\n     * Patches the value of the `FormArray`. It accepts an array that matches the\n     * structure of the control, and does its best to match the values to the correct\n     * controls in the group.\n     *\n     * It accepts both super-sets and sub-sets of the array without throwing an error.\n     *\n     * \\@usageNotes\n     * ### Patch the values for controls in a form array\n     *\n     * ```\n     * const arr = new FormArray([\n     *    new FormControl(),\n     *    new FormControl()\n     * ]);\n     * console.log(arr.value);   // [null, null]\n     *\n     * arr.patchValue(['Nancy']);\n     * console.log(arr.value);   // ['Nancy', null]\n     * ```\n     *\n     * @param {?} value Array of latest values for the controls\n     * @param {?=} options Configure options that determine how the control propagates changes and\n     * emits events after the value changes\n     *\n     * * `onlySelf`: When true, each change only affects this control, and not its parent. Default\n     * is false.\n     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n     * `valueChanges`\n     * observables emit events with the latest status and value when the control value is updated.\n     * When false, no events are emitted.\n     * The configuration options are passed to the {\\@link AbstractControl#updateValueAndValidity\n     * updateValueAndValidity} method.\n     * @return {?}\n     */\n\n  }, {\n    key: \"patchValue\",\n    value: function patchValue(value) {\n      var _this19 = this;\n\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      value.forEach(function (newValue, index) {\n        if (_this19.at(index)) {\n          _this19.at(index).patchValue(newValue, {\n            onlySelf: true,\n            emitEvent: options.emitEvent\n          });\n        }\n      });\n      this.updateValueAndValidity(options);\n    }\n    /**\n     * Resets the `FormArray` and all descendants are marked `pristine` and `untouched`, and the\n     * value of all descendants to null or null maps.\n     *\n     * You reset to a specific form state by passing in an array of states\n     * that matches the structure of the control. The state is a standalone value\n     * or a form state object with both a value and a disabled status.\n     *\n     * \\@usageNotes\n     * ### Reset the values in a form array\n     *\n     * ```ts\n     * const arr = new FormArray([\n     *    new FormControl(),\n     *    new FormControl()\n     * ]);\n     * arr.reset(['name', 'last name']);\n     *\n     * console.log(this.arr.value);  // ['name', 'last name']\n     * ```\n     *\n     * ### Reset the values in a form array and the disabled status for the first control\n     *\n     * ```\n     * this.arr.reset([\n     *   {value: 'name', disabled: true},\n     *   'last'\n     * ]);\n     *\n     * console.log(this.arr.value);  // ['name', 'last name']\n     * console.log(this.arr.get(0).status);  // 'DISABLED'\n     * ```\n     *\n     * @param {?=} value Array of values for the controls\n     * @param {?=} options Configure options that determine how the control propagates changes and\n     * emits events after the value changes\n     *\n     * * `onlySelf`: When true, each change only affects this control, and not its parent. Default\n     * is false.\n     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n     * `valueChanges`\n     * observables emit events with the latest status and value when the control is reset.\n     * When false, no events are emitted.\n     * The configuration options are passed to the {\\@link AbstractControl#updateValueAndValidity\n     * updateValueAndValidity} method.\n     * @return {?}\n     */\n\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      this._forEachChild(function (control, index) {\n        control.reset(value[index], {\n          onlySelf: true,\n          emitEvent: options.emitEvent\n        });\n      });\n\n      this.updateValueAndValidity(options);\n\n      this._updatePristine(options);\n\n      this._updateTouched(options);\n    }\n    /**\n     * The aggregate value of the array, including any disabled controls.\n     *\n     * Reports all values regardless of disabled status.\n     * For enabled controls only, the `value` property is the best way to get the value of the array.\n     * @return {?}\n     */\n\n  }, {\n    key: \"getRawValue\",\n    value: function getRawValue() {\n      return this.controls.map(function (control) {\n        return control instanceof FormControl ? control.value :\n        /** @type {?} */\n        control.getRawValue();\n      });\n    }\n    /**\n     * \\@internal\n     * @return {?}\n     */\n\n  }, {\n    key: \"_syncPendingControls\",\n    value: function _syncPendingControls() {\n      /** @type {?} */\n      var subtreeUpdated = this.controls.reduce(function (updated, child) {\n        return child._syncPendingControls() ? true : updated;\n      }, false);\n      if (subtreeUpdated) this.updateValueAndValidity({\n        onlySelf: true\n      });\n      return subtreeUpdated;\n    }\n    /**\n     * \\@internal\n     * @param {?} index\n     * @return {?}\n     */\n\n  }, {\n    key: \"_throwIfControlMissing\",\n    value: function _throwIfControlMissing(index) {\n      if (!this.controls.length) {\n        throw new Error(\"\\n        There are no form controls registered with this array yet.  If you're using ngModel,\\n        you may want to check next tick (e.g. use setTimeout).\\n      \");\n      }\n\n      if (!this.at(index)) {\n        throw new Error(\"Cannot find form control at index \".concat(index));\n      }\n    }\n    /**\n     * \\@internal\n     * @param {?} cb\n     * @return {?}\n     */\n\n  }, {\n    key: \"_forEachChild\",\n    value: function _forEachChild(cb) {\n      this.controls.forEach(function (control, index) {\n        cb(control, index);\n      });\n    }\n    /**\n     * \\@internal\n     * @return {?}\n     */\n\n  }, {\n    key: \"_updateValue\",\n    value: function _updateValue() {\n      var _this20 = this;\n\n      /** @type {?} */\n      this.value = this.controls.filter(function (control) {\n        return control.enabled || _this20.disabled;\n      }).map(function (control) {\n        return control.value;\n      });\n    }\n    /**\n     * \\@internal\n     * @param {?} condition\n     * @return {?}\n     */\n\n  }, {\n    key: \"_anyControls\",\n    value: function _anyControls(condition) {\n      return this.controls.some(function (control) {\n        return control.enabled && condition(control);\n      });\n    }\n    /**\n     * \\@internal\n     * @return {?}\n     */\n\n  }, {\n    key: \"_setUpControls\",\n    value: function _setUpControls() {\n      var _this21 = this;\n\n      this._forEachChild(function (control) {\n        return _this21._registerControl(control);\n      });\n    }\n    /**\n     * \\@internal\n     * @param {?} value\n     * @return {?}\n     */\n\n  }, {\n    key: \"_checkAllValuesPresent\",\n    value: function _checkAllValuesPresent(value) {\n      this._forEachChild(function (control, i) {\n        if (value[i] === undefined) {\n          throw new Error(\"Must supply a value for form control at index: \".concat(i, \".\"));\n        }\n      });\n    }\n    /**\n     * \\@internal\n     * @return {?}\n     */\n\n  }, {\n    key: \"_allControlsDisabled\",\n    value: function _allControlsDisabled() {\n      var _iterator = _createForOfIteratorHelper(this.controls),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var control = _step.value;\n          if (control.enabled) return false;\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return this.controls.length > 0 || this.disabled;\n    }\n    /**\n     * @param {?} control\n     * @return {?}\n     */\n\n  }, {\n    key: \"_registerControl\",\n    value: function _registerControl(control) {\n      control.setParent(this);\n\n      control._registerOnCollectionChange(this._onCollectionChange);\n    }\n  }]);\n\n  return FormArray;\n}(AbstractControl);\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nvar formDirectiveProvider = {\n  provide: ControlContainer,\n  useExisting: /*#__PURE__*/forwardRef(function () {\n    return NgForm;\n  })\n};\n/** @type {?} */\n\nvar resolvedPromise = /*#__PURE__*/Promise.resolve(null);\n/**\n * \\@description\n *\n * Creates a top-level `FormGroup` instance and binds it to a form\n * to track aggregate form value and validation status.\n *\n * As soon as you import the `FormsModule`, this directive becomes active by default on\n * all `<form>` tags.  You don't need to add a special selector.\n *\n * You can export the directive into a local template variable using `ngForm` as the key\n * (ex: `#myForm=\"ngForm\"`). This is optional, but useful.  Many properties from the underlying\n * `FormGroup` instance are duplicated on the directive itself, so a reference to it\n * will give you access to the aggregate value and validity status of the form, as well as\n * user interaction properties like `dirty` and `touched`.\n *\n * To register child controls with the form, you'll want to use `NgModel` with a\n * `name` attribute.  You can also use `NgModelGroup` if you'd like to create\n * sub-groups within the form.\n *\n * You can listen to the directive's `ngSubmit` event to be notified when the user has\n * triggered a form submission. The `ngSubmit` event will be emitted with the original form\n * submission event.\n *\n * In template driven forms, all `<form>` tags are automatically tagged as `NgForm`.\n * If you want to import the `FormsModule` but skip its usage in some forms,\n * for example, to use native HTML5 validation, you can add `ngNoForm` and the `<form>`\n * tags won't create an `NgForm` directive. In reactive forms, using `ngNoForm` is\n * unnecessary because the `<form>` tags are inert. In that case, you would\n * refrain from using the `formGroup` directive.\n *\n * {\\@example forms/ts/simpleForm/simple_form_example.ts region='Component'}\n *\n * **npm package**: `\\@angular/forms`\n *\n * \\@ngModule FormsModule\n */\n\nvar NgForm = /*#__PURE__*/(function () {\n  var NgForm = /*#__PURE__*/function (_ControlContainer2) {\n    _inherits(NgForm, _ControlContainer2);\n\n    var _super9 = _createSuper(NgForm);\n\n    /**\n     * @param {?} validators\n     * @param {?} asyncValidators\n     */\n    function NgForm(validators, asyncValidators) {\n      var _this22;\n\n      _classCallCheck(this, NgForm);\n\n      _this22 = _super9.call(this);\n      _this22.submitted = false;\n      _this22._directives = [];\n      _this22.ngSubmit = new EventEmitter();\n      _this22.form = new FormGroup({}, composeValidators(validators), composeAsyncValidators(asyncValidators));\n      return _this22;\n    }\n    /**\n     * @return {?}\n     */\n\n\n    _createClass(NgForm, [{\n      key: \"ngAfterViewInit\",\n      value: function ngAfterViewInit() {\n        this._setUpdateStrategy();\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"formDirective\",\n      get: function get() {\n        return this;\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"control\",\n      get: function get() {\n        return this.form;\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"path\",\n      get: function get() {\n        return [];\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"controls\",\n      get: function get() {\n        return this.form.controls;\n      }\n      /**\n       * @param {?} dir\n       * @return {?}\n       */\n\n    }, {\n      key: \"addControl\",\n      value: function addControl(dir) {\n        var _this23 = this;\n\n        resolvedPromise.then(function () {\n          /** @type {?} */\n          var container = _this23._findContainer(dir.path);\n\n          /** @type {?} */\n          dir.control =\n          /** @type {?} */\n          container.registerControl(dir.name, dir.control);\n          setUpControl(dir.control, dir);\n          dir.control.updateValueAndValidity({\n            emitEvent: false\n          });\n\n          _this23._directives.push(dir);\n        });\n      }\n      /**\n       * @param {?} dir\n       * @return {?}\n       */\n\n    }, {\n      key: \"getControl\",\n      value: function getControl(dir) {\n        return (\n          /** @type {?} */\n          this.form.get(dir.path)\n        );\n      }\n      /**\n       * @param {?} dir\n       * @return {?}\n       */\n\n    }, {\n      key: \"removeControl\",\n      value: function removeControl(dir) {\n        var _this24 = this;\n\n        resolvedPromise.then(function () {\n          /** @type {?} */\n          var container = _this24._findContainer(dir.path);\n\n          if (container) {\n            container.removeControl(dir.name);\n          }\n\n          removeDir(_this24._directives, dir);\n        });\n      }\n      /**\n       * @param {?} dir\n       * @return {?}\n       */\n\n    }, {\n      key: \"addFormGroup\",\n      value: function addFormGroup(dir) {\n        var _this25 = this;\n\n        resolvedPromise.then(function () {\n          /** @type {?} */\n          var container = _this25._findContainer(dir.path);\n          /** @type {?} */\n\n\n          var group = new FormGroup({});\n          setUpFormContainer(group, dir);\n          container.registerControl(dir.name, group);\n          group.updateValueAndValidity({\n            emitEvent: false\n          });\n        });\n      }\n      /**\n       * @param {?} dir\n       * @return {?}\n       */\n\n    }, {\n      key: \"removeFormGroup\",\n      value: function removeFormGroup(dir) {\n        var _this26 = this;\n\n        resolvedPromise.then(function () {\n          /** @type {?} */\n          var container = _this26._findContainer(dir.path);\n\n          if (container) {\n            container.removeControl(dir.name);\n          }\n        });\n      }\n      /**\n       * @param {?} dir\n       * @return {?}\n       */\n\n    }, {\n      key: \"getFormGroup\",\n      value: function getFormGroup(dir) {\n        return (\n          /** @type {?} */\n          this.form.get(dir.path)\n        );\n      }\n      /**\n       * @param {?} dir\n       * @param {?} value\n       * @return {?}\n       */\n\n    }, {\n      key: \"updateModel\",\n      value: function updateModel(dir, value) {\n        var _this27 = this;\n\n        resolvedPromise.then(function () {\n          /** @type {?} */\n          var ctrl =\n          /** @type {?} */\n          _this27.form.get(\n          /** @type {?} */\n          dir.path);\n\n          ctrl.setValue(value);\n        });\n      }\n      /**\n       * @param {?} value\n       * @return {?}\n       */\n\n    }, {\n      key: \"setValue\",\n      value: function setValue(value) {\n        this.control.setValue(value);\n      }\n      /**\n       * @param {?} $event\n       * @return {?}\n       */\n\n    }, {\n      key: \"onSubmit\",\n      value: function onSubmit($event) {\n        /** @type {?} */\n        this.submitted = true;\n        syncPendingControls(this.form, this._directives);\n        this.ngSubmit.emit($event);\n        return false;\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"onReset\",\n      value: function onReset() {\n        this.resetForm();\n      }\n      /**\n       * @param {?=} value\n       * @return {?}\n       */\n\n    }, {\n      key: \"resetForm\",\n      value: function resetForm() {\n        var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;\n        this.form.reset(value);\n\n        /** @type {?} */\n        this.submitted = false;\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"_setUpdateStrategy\",\n      value: function _setUpdateStrategy() {\n        if (this.options && this.options.updateOn != null) {\n          this.form._updateOn = this.options.updateOn;\n        }\n      }\n      /**\n       * \\@internal\n       * @param {?} path\n       * @return {?}\n       */\n\n    }, {\n      key: \"_findContainer\",\n      value: function _findContainer(path) {\n        path.pop();\n        return path.length ?\n        /** @type {?} */\n        this.form.get(path) : this.form;\n      }\n    }]);\n\n    return NgForm;\n  }(ControlContainer);\n\n  NgForm.ɵfac = function NgForm_Factory(t) {\n    return new (t || NgForm)(ɵngcc0.ɵɵdirectiveInject(NG_VALIDATORS, 10), ɵngcc0.ɵɵdirectiveInject(NG_ASYNC_VALIDATORS, 10));\n  };\n\n  NgForm.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: NgForm,\n    selectors: [[\"form\", 3, \"ngNoForm\", \"\", 3, \"formGroup\", \"\"], [\"ngForm\"], [\"\", \"ngForm\", \"\"]],\n    hostBindings: function NgForm_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"submit\", function NgForm_submit_HostBindingHandler($event) {\n          return ctx.onSubmit($event);\n        })(\"reset\", function NgForm_reset_HostBindingHandler() {\n          return ctx.onReset();\n        });\n      }\n    },\n    inputs: {\n      options: [\"ngFormOptions\", \"options\"]\n    },\n    outputs: {\n      ngSubmit: \"ngSubmit\"\n    },\n    exportAs: [\"ngForm\"],\n    features: [ɵngcc0.ɵɵProvidersFeature([formDirectiveProvider]), ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  /** @nocollapse */\n\n  return NgForm;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n\nvar TemplateDrivenErrors = /*#__PURE__*/function () {\n  function TemplateDrivenErrors() {\n    _classCallCheck(this, TemplateDrivenErrors);\n  }\n\n  _createClass(TemplateDrivenErrors, null, [{\n    key: \"modelParentException\",\n    value:\n    /**\n     * @return {?}\n     */\n    function modelParentException() {\n      throw new Error(\"\\n      ngModel cannot be used to register form controls with a parent formGroup directive.  Try using\\n      formGroup's partner directive \\\"formControlName\\\" instead.  Example:\\n\\n      \".concat(FormErrorExamples.formControlName, \"\\n\\n      Or, if you'd like to avoid registering this form control, indicate that it's standalone in ngModelOptions:\\n\\n      Example:\\n\\n      \").concat(FormErrorExamples.ngModelWithFormGroup));\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"formGroupNameException\",\n    value: function formGroupNameException() {\n      throw new Error(\"\\n      ngModel cannot be used to register form controls with a parent formGroupName or formArrayName directive.\\n\\n      Option 1: Use formControlName instead of ngModel (reactive strategy):\\n\\n      \".concat(FormErrorExamples.formGroupName, \"\\n\\n      Option 2:  Update ngModel's parent be ngModelGroup (template-driven strategy):\\n\\n      \").concat(FormErrorExamples.ngModelGroup));\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"missingNameException\",\n    value: function missingNameException() {\n      throw new Error(\"If ngModel is used within a form tag, either the name attribute must be set or the form\\n      control must be defined as 'standalone' in ngModelOptions.\\n\\n      Example 1: <input [(ngModel)]=\\\"person.firstName\\\" name=\\\"first\\\">\\n      Example 2: <input [(ngModel)]=\\\"person.firstName\\\" [ngModelOptions]=\\\"{standalone: true}\\\">\");\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"modelGroupParentException\",\n    value: function modelGroupParentException() {\n      throw new Error(\"\\n      ngModelGroup cannot be used with a parent formGroup directive.\\n\\n      Option 1: Use formGroupName instead of ngModelGroup (reactive strategy):\\n\\n      \".concat(FormErrorExamples.formGroupName, \"\\n\\n      Option 2:  Use a regular form tag instead of the formGroup directive (template-driven strategy):\\n\\n      \").concat(FormErrorExamples.ngModelGroup));\n    }\n  }]);\n\n  return TemplateDrivenErrors;\n}();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nvar modelGroupProvider = {\n  provide: ControlContainer,\n  useExisting: /*#__PURE__*/forwardRef(function () {\n    return NgModelGroup;\n  })\n};\n/**\n * \\@description\n *\n * Creates and binds a `FormGroup` instance to a DOM element.\n *\n * This directive can only be used as a child of `NgForm` (or in other words,\n * within `<form>` tags).\n *\n * Use this directive if you'd like to create a sub-group within a form. This can\n * come in handy if you want to validate a sub-group of your form separately from\n * the rest of your form, or if some values in your domain model make more sense to\n * consume together in a nested object.\n *\n * Pass in the name you'd like this sub-group to have and it will become the key\n * for the sub-group in the form's full value. You can also export the directive into\n * a local template variable using `ngModelGroup` (ex: `#myGroup=\"ngModelGroup\"`).\n *\n * {\\@example forms/ts/ngModelGroup/ng_model_group_example.ts region='Component'}\n *\n * \\@ngModule FormsModule\n */\n\nvar NgModelGroup = /*#__PURE__*/(function () {\n  var NgModelGroup = /*#__PURE__*/function (_AbstractFormGroupDir) {\n    _inherits(NgModelGroup, _AbstractFormGroupDir);\n\n    var _super10 = _createSuper(NgModelGroup);\n\n    /**\n     * @param {?} parent\n     * @param {?} validators\n     * @param {?} asyncValidators\n     */\n    function NgModelGroup(parent, validators, asyncValidators) {\n      var _this28;\n\n      _classCallCheck(this, NgModelGroup);\n\n      _this28 = _super10.call(this);\n      _this28._parent = parent;\n      _this28._validators = validators;\n      _this28._asyncValidators = asyncValidators;\n      return _this28;\n    }\n    /**\n     * \\@internal\n     * @return {?}\n     */\n\n\n    _createClass(NgModelGroup, [{\n      key: \"_checkParentType\",\n      value: function _checkParentType() {\n        if (!(this._parent instanceof NgModelGroup) && !(this._parent instanceof NgForm)) {\n          TemplateDrivenErrors.modelGroupParentException();\n        }\n      }\n    }]);\n\n    return NgModelGroup;\n  }(AbstractFormGroupDirective);\n\n  NgModelGroup.ɵfac = function NgModelGroup_Factory(t) {\n    return new (t || NgModelGroup)(ɵngcc0.ɵɵdirectiveInject(ControlContainer, 5), ɵngcc0.ɵɵdirectiveInject(NG_VALIDATORS, 10), ɵngcc0.ɵɵdirectiveInject(NG_ASYNC_VALIDATORS, 10));\n  };\n\n  NgModelGroup.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: NgModelGroup,\n    selectors: [[\"\", \"ngModelGroup\", \"\"]],\n    inputs: {\n      name: [\"ngModelGroup\", \"name\"]\n    },\n    exportAs: [\"ngModelGroup\"],\n    features: [ɵngcc0.ɵɵProvidersFeature([modelGroupProvider]), ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  /** @nocollapse */\n\n  return NgModelGroup;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nvar formControlBinding = {\n  provide: NgControl,\n  useExisting: /*#__PURE__*/forwardRef(function () {\n    return NgModel;\n  })\n};\n/** *\n * `ngModel` forces an additional change detection run when its inputs change:\n * E.g.:\n * ```\n * <div>{{myModel.valid}}</div>\n * <input [(ngModel)]=\"myValue\" #myModel=\"ngModel\">\n * ```\n * I.e. `ngModel` can export itself on the element and then be used in the template.\n * Normally, this would result in expressions before the `input` that use the exported directive\n * to have and old value as they have been\n * dirty checked before. As this is a very common case for `ngModel`, we added this second change\n * detection run.\n *\n * Notes:\n * - this is just one extra run no matter how many `ngModel` have been changed.\n * - this is a general problem when using `exportAs` for directives!\n  @type {?} */\n\nvar resolvedPromise$1 = /*#__PURE__*/Promise.resolve(null);\n/**\n * \\@description\n *\n * Creates a `FormControl` instance from a domain model and binds it\n * to a form control element.\n *\n * The `FormControl` instance will track the value, user interaction, and\n * validation status of the control and keep the view synced with the model. If used\n * within a parent form, the directive will also register itself with the form as a child\n * control.\n *\n * This directive can be used by itself or as part of a larger form. All you need is the\n * `ngModel` selector to activate it.\n *\n * It accepts a domain model as an optional `Input`. If you have a one-way binding\n * to `ngModel` with `[]` syntax, changing the value of the domain model in the component\n * class will set the value in the view. If you have a two-way binding with `[()]` syntax\n * (also known as 'banana-box syntax'), the value in the UI will always be synced back to\n * the domain model in your class as well.\n *\n * If you wish to inspect the properties of the associated `FormControl` (like\n * validity state), you can also export the directive into a local template variable using\n * `ngModel` as the key (ex: `#myVar=\"ngModel\"`). You can then access the control using the\n * directive's `control` property, but most properties you'll need (like `valid` and `dirty`)\n * will fall through to the control anyway, so you can access them directly. You can see a\n * full list of properties directly available in `AbstractControlDirective`.\n *\n * The following is an example of a simple standalone control using `ngModel`:\n *\n * {\\@example forms/ts/simpleNgModel/simple_ng_model_example.ts region='Component'}\n *\n * When using the `ngModel` within `<form>` tags, you'll also need to supply a `name` attribute\n * so that the control can be registered with the parent form under that name.\n *\n * It's worth noting that in the context of a parent form, you often can skip one-way or\n * two-way binding because the parent form will sync the value for you. You can access\n * its properties by exporting it into a local template variable using `ngForm` (ex:\n * `#f=\"ngForm\"`). Then you can pass it where it needs to go on submit.\n *\n * If you do need to populate initial values into your form, using a one-way binding for\n * `ngModel` tends to be sufficient as long as you use the exported form's value rather\n * than the domain model's value on submit.\n *\n * Take a look at an example of using `ngModel` within a form:\n *\n * {\\@example forms/ts/simpleForm/simple_form_example.ts region='Component'}\n *\n * To see `ngModel` examples with different form control types, see:\n *\n * * Radio buttons: `RadioControlValueAccessor`\n * * Selects: `SelectControlValueAccessor`\n *\n * \\@ngModule FormsModule\n */\n\nvar NgModel = /*#__PURE__*/(function () {\n  var NgModel = /*#__PURE__*/function (_NgControl) {\n    _inherits(NgModel, _NgControl);\n\n    var _super11 = _createSuper(NgModel);\n\n    /**\n     * @param {?} parent\n     * @param {?} validators\n     * @param {?} asyncValidators\n     * @param {?} valueAccessors\n     */\n    function NgModel(parent, validators, asyncValidators, valueAccessors) {\n      var _this29;\n\n      _classCallCheck(this, NgModel);\n\n      _this29 = _super11.call(this);\n      _this29.control = new FormControl();\n      /**\n       * \\@internal\n       */\n\n      _this29._registered = false;\n      _this29.update = new EventEmitter();\n      _this29._parent = parent;\n      _this29._rawValidators = validators || [];\n      _this29._rawAsyncValidators = asyncValidators || [];\n      _this29.valueAccessor = selectValueAccessor(_assertThisInitialized(_this29), valueAccessors);\n      return _this29;\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n\n\n    _createClass(NgModel, [{\n      key: \"ngOnChanges\",\n      value: function ngOnChanges(changes) {\n        this._checkForErrors();\n\n        if (!this._registered) this._setUpControl();\n\n        if ('isDisabled' in changes) {\n          this._updateDisabled(changes);\n        }\n\n        if (isPropertyUpdated(changes, this.viewModel)) {\n          this._updateValue(this.model);\n\n          this.viewModel = this.model;\n        }\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this.formDirective && this.formDirective.removeControl(this);\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"path\",\n      get: function get() {\n        return this._parent ? controlPath(this.name, this._parent) : [this.name];\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"formDirective\",\n      get: function get() {\n        return this._parent ? this._parent.formDirective : null;\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"validator\",\n      get: function get() {\n        return composeValidators(this._rawValidators);\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"asyncValidator\",\n      get: function get() {\n        return composeAsyncValidators(this._rawAsyncValidators);\n      }\n      /**\n       * @param {?} newValue\n       * @return {?}\n       */\n\n    }, {\n      key: \"viewToModelUpdate\",\n      value: function viewToModelUpdate(newValue) {\n        this.viewModel = newValue;\n        this.update.emit(newValue);\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"_setUpControl\",\n      value: function _setUpControl() {\n        this._setUpdateStrategy();\n\n        this._isStandalone() ? this._setUpStandalone() : this.formDirective.addControl(this);\n        this._registered = true;\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"_setUpdateStrategy\",\n      value: function _setUpdateStrategy() {\n        if (this.options && this.options.updateOn != null) {\n          this.control._updateOn = this.options.updateOn;\n        }\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"_isStandalone\",\n      value: function _isStandalone() {\n        return !this._parent || !!(this.options && this.options.standalone);\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"_setUpStandalone\",\n      value: function _setUpStandalone() {\n        setUpControl(this.control, this);\n        this.control.updateValueAndValidity({\n          emitEvent: false\n        });\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"_checkForErrors\",\n      value: function _checkForErrors() {\n        if (!this._isStandalone()) {\n          this._checkParentType();\n        }\n\n        this._checkName();\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"_checkParentType\",\n      value: function _checkParentType() {\n        if (!(this._parent instanceof NgModelGroup) && this._parent instanceof AbstractFormGroupDirective) {\n          TemplateDrivenErrors.formGroupNameException();\n        } else if (!(this._parent instanceof NgModelGroup) && !(this._parent instanceof NgForm)) {\n          TemplateDrivenErrors.modelParentException();\n        }\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"_checkName\",\n      value: function _checkName() {\n        if (this.options && this.options.name) this.name = this.options.name;\n\n        if (!this._isStandalone() && !this.name) {\n          TemplateDrivenErrors.missingNameException();\n        }\n      }\n      /**\n       * @param {?} value\n       * @return {?}\n       */\n\n    }, {\n      key: \"_updateValue\",\n      value: function _updateValue(value) {\n        var _this30 = this;\n\n        resolvedPromise$1.then(function () {\n          _this30.control.setValue(value, {\n            emitViewToModelChange: false\n          });\n        });\n      }\n      /**\n       * @param {?} changes\n       * @return {?}\n       */\n\n    }, {\n      key: \"_updateDisabled\",\n      value: function _updateDisabled(changes) {\n        var _this31 = this;\n\n        /** @type {?} */\n        var disabledValue = changes['isDisabled'].currentValue;\n        /** @type {?} */\n\n        var isDisabled = disabledValue === '' || disabledValue && disabledValue !== 'false';\n        resolvedPromise$1.then(function () {\n          if (isDisabled && !_this31.control.disabled) {\n            _this31.control.disable();\n          } else if (!isDisabled && _this31.control.disabled) {\n            _this31.control.enable();\n          }\n        });\n      }\n    }]);\n\n    return NgModel;\n  }(NgControl);\n\n  NgModel.ɵfac = function NgModel_Factory(t) {\n    return new (t || NgModel)(ɵngcc0.ɵɵdirectiveInject(ControlContainer, 9), ɵngcc0.ɵɵdirectiveInject(NG_VALIDATORS, 10), ɵngcc0.ɵɵdirectiveInject(NG_ASYNC_VALIDATORS, 10), ɵngcc0.ɵɵdirectiveInject(NG_VALUE_ACCESSOR, 10));\n  };\n\n  NgModel.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: NgModel,\n    selectors: [[\"\", \"ngModel\", \"\", 3, \"formControlName\", \"\", 3, \"formControl\", \"\"]],\n    inputs: {\n      name: \"name\",\n      isDisabled: [\"disabled\", \"isDisabled\"],\n      model: [\"ngModel\", \"model\"],\n      options: [\"ngModelOptions\", \"options\"]\n    },\n    outputs: {\n      update: \"ngModelChange\"\n    },\n    exportAs: [\"ngModel\"],\n    features: [ɵngcc0.ɵɵProvidersFeature([formControlBinding]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature]\n  });\n  /** @nocollapse */\n\n  return NgModel;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** *\n * Token to provide to turn off the ngModel warning on formControl and formControlName.\n  @type {?} */\n\n\nvar NG_MODEL_WITH_FORM_CONTROL_WARNING = /*#__PURE__*/new InjectionToken('NgModelWithFormControlWarning');\n/** @type {?} */\n\nvar formControlBinding$1 = {\n  provide: NgControl,\n  useExisting: /*#__PURE__*/forwardRef(function () {\n    return FormControlDirective;\n  })\n};\n/**\n * \\@description\n *\n * Syncs a standalone `FormControl` instance to a form control element.\n *\n * This directive ensures that any values written to the `FormControl`\n * instance programmatically will be written to the DOM element (model -> view). Conversely,\n * any values written to the DOM element through user input will be reflected in the\n * `FormControl` instance (view -> model).\n *\n * \\@usageNotes\n * Use this directive if you'd like to create and manage a `FormControl` instance directly.\n * Simply create a `FormControl`, save it to your component class, and pass it into the\n * `FormControlDirective`.\n *\n * This directive is designed to be used as a standalone control.  Unlike `FormControlName`,\n * it does not require that your `FormControl` instance be part of any parent\n * `FormGroup`, and it won't be registered to any `FormGroupDirective` that\n * exists above it.\n *\n * **Get the value**: the `value` property is always synced and available on the\n * `FormControl` instance. See a full list of available properties in\n * `AbstractControl`.\n *\n * **Set the value**: You can pass in an initial value when instantiating the `FormControl`,\n * or you can set it programmatically later using {\\@link AbstractControl#setValue setValue} or\n * {\\@link AbstractControl#patchValue patchValue}.\n *\n * **Listen to value**: If you want to listen to changes in the value of the control, you can\n * subscribe to the {\\@link AbstractControl#valueChanges valueChanges} event.  You can also listen to\n * {\\@link AbstractControl#statusChanges statusChanges} to be notified when the validation status is\n * re-calculated.\n *\n * ### Example\n *\n * {\\@example forms/ts/simpleFormControl/simple_form_control_example.ts region='Component'}\n *\n * ### Use with ngModel\n *\n * Support for using the `ngModel` input property and `ngModelChange` event with reactive\n * form directives has been deprecated in Angular v6 and will be removed in Angular v7.\n *\n * Now deprecated:\n *\n * ```html\n * <input [formControl]=\"control\" [(ngModel)]=\"value\">\n * ```\n *\n * ```ts\n * this.value = 'some value';\n * ```\n *\n * This has been deprecated for a few reasons. First, developers have found this pattern\n * confusing. It seems like the actual `ngModel` directive is being used, but in fact it's\n * an input/output property named `ngModel` on the reactive form directive that simply\n * approximates (some of) its behavior. Specifically, it allows getting/setting the value\n * and intercepting value events. However, some of `ngModel`'s other features - like\n * delaying updates with`ngModelOptions` or exporting the directive - simply don't work,\n * which has understandably caused some confusion.\n *\n * In addition, this pattern mixes template-driven and reactive forms strategies, which\n * we generally don't recommend because it doesn't take advantage of the full benefits of\n * either strategy. Setting the value in the template violates the template-agnostic\n * principles behind reactive forms, whereas adding a `FormControl`/`FormGroup` layer in\n * the class removes the convenience of defining forms in the template.\n *\n * To update your code before v7, you'll want to decide whether to stick with reactive form\n * directives (and get/set values using reactive forms patterns) or switch over to\n * template-driven directives.\n *\n * After (choice 1 - use reactive forms):\n *\n * ```html\n * <input [formControl]=\"control\">\n * ```\n *\n * ```ts\n * this.control.setValue('some value');\n * ```\n *\n * After (choice 2 - use template-driven forms):\n *\n * ```html\n * <input [(ngModel)]=\"value\">\n * ```\n *\n * ```ts\n * this.value = 'some value';\n * ```\n *\n * By default, when you use this pattern, you will see a deprecation warning once in dev\n * mode. You can choose to silence this warning by providing a config for\n * `ReactiveFormsModule` at import time:\n *\n * ```ts\n * imports: [\n *   ReactiveFormsModule.withConfig({warnOnNgModelWithFormControl: 'never'});\n * ]\n * ```\n *\n * Alternatively, you can choose to surface a separate warning for each instance of this\n * pattern with a config value of `\"always\"`. This may help to track down where in the code\n * the pattern is being used as the code is being updated.\n *\n * \\@ngModule ReactiveFormsModule\n */\n\nvar FormControlDirective = /*#__PURE__*/(function () {\n  var FormControlDirective = /*#__PURE__*/function (_NgControl2) {\n    _inherits(FormControlDirective, _NgControl2);\n\n    var _super12 = _createSuper(FormControlDirective);\n\n    /**\n     * @param {?} validators\n     * @param {?} asyncValidators\n     * @param {?} valueAccessors\n     * @param {?} _ngModelWarningConfig\n     */\n    function FormControlDirective(validators, asyncValidators, valueAccessors, _ngModelWarningConfig) {\n      var _this32;\n\n      _classCallCheck(this, FormControlDirective);\n\n      _this32 = _super12.call(this);\n      _this32._ngModelWarningConfig = _ngModelWarningConfig;\n      /**\n       * @deprecated as of v6\n       */\n\n      _this32.update = new EventEmitter();\n      /**\n       * Instance property used to track whether an ngModel warning has been sent out for this\n       * particular FormControlDirective instance. Used to support warning config of \"always\".\n       *\n       * \\@internal\n       */\n\n      _this32._ngModelWarningSent = false;\n      _this32._rawValidators = validators || [];\n      _this32._rawAsyncValidators = asyncValidators || [];\n      _this32.valueAccessor = selectValueAccessor(_assertThisInitialized(_this32), valueAccessors);\n      return _this32;\n    }\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n\n\n    _createClass(FormControlDirective, [{\n      key: \"isDisabled\",\n      set: function set(isDisabled) {\n        ReactiveErrors.disabledAttrWarning();\n      }\n      /**\n       * @param {?} changes\n       * @return {?}\n       */\n\n    }, {\n      key: \"ngOnChanges\",\n      value: function ngOnChanges(changes) {\n        if (this._isControlChanged(changes)) {\n          setUpControl(this.form, this);\n\n          if (this.control.disabled &&\n          /** @type {?} */\n          this.valueAccessor.setDisabledState) {\n            /** @type {?} */\n\n            /** @type {?} */\n            this.valueAccessor.setDisabledState(true);\n          }\n\n          this.form.updateValueAndValidity({\n            emitEvent: false\n          });\n        }\n\n        if (isPropertyUpdated(changes, this.viewModel)) {\n          _ngModelWarning('formControl', FormControlDirective, this, this._ngModelWarningConfig);\n\n          this.form.setValue(this.model);\n          this.viewModel = this.model;\n        }\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"path\",\n      get: function get() {\n        return [];\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"validator\",\n      get: function get() {\n        return composeValidators(this._rawValidators);\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"asyncValidator\",\n      get: function get() {\n        return composeAsyncValidators(this._rawAsyncValidators);\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"control\",\n      get: function get() {\n        return this.form;\n      }\n      /**\n       * @param {?} newValue\n       * @return {?}\n       */\n\n    }, {\n      key: \"viewToModelUpdate\",\n      value: function viewToModelUpdate(newValue) {\n        this.viewModel = newValue;\n        this.update.emit(newValue);\n      }\n      /**\n       * @param {?} changes\n       * @return {?}\n       */\n\n    }, {\n      key: \"_isControlChanged\",\n      value: function _isControlChanged(changes) {\n        return changes.hasOwnProperty('form');\n      }\n    }]);\n\n    return FormControlDirective;\n  }(NgControl);\n\n  FormControlDirective.ɵfac = function FormControlDirective_Factory(t) {\n    return new (t || FormControlDirective)(ɵngcc0.ɵɵdirectiveInject(NG_VALIDATORS, 10), ɵngcc0.ɵɵdirectiveInject(NG_ASYNC_VALIDATORS, 10), ɵngcc0.ɵɵdirectiveInject(NG_VALUE_ACCESSOR, 10), ɵngcc0.ɵɵdirectiveInject(NG_MODEL_WITH_FORM_CONTROL_WARNING, 8));\n  };\n\n  FormControlDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: FormControlDirective,\n    selectors: [[\"\", \"formControl\", \"\"]],\n    inputs: {\n      isDisabled: [\"disabled\", \"isDisabled\"],\n      form: [\"formControl\", \"form\"],\n      model: [\"ngModel\", \"model\"]\n    },\n    outputs: {\n      update: \"ngModelChange\"\n    },\n    exportAs: [\"ngForm\"],\n    features: [ɵngcc0.ɵɵProvidersFeature([formControlBinding$1]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature]\n  });\n  /**\n   * Static property used to track whether any ngModel warnings have been sent across\n   * all instances of FormControlDirective. Used to support warning config of \"once\".\n   *\n   * \\@internal\n   */\n\n  FormControlDirective._ngModelWarningSentOnce = false;\n  /** @nocollapse */\n\n  return FormControlDirective;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nvar formDirectiveProvider$1 = {\n  provide: ControlContainer,\n  useExisting: /*#__PURE__*/forwardRef(function () {\n    return FormGroupDirective;\n  })\n};\n/**\n * \\@description\n *\n * Binds an existing `FormGroup` to a DOM element.\n *\n * This directive accepts an existing `FormGroup` instance. It will then use this\n * `FormGroup` instance to match any child `FormControl`, `FormGroup`,\n * and `FormArray` instances to child `FormControlName`, `FormGroupName`,\n * and `FormArrayName` directives.\n *\n * \\@usageNotes\n * **Set value**: You can set the form's initial value when instantiating the\n * `FormGroup`, or you can set it programmatically later using the `FormGroup`'s\n * {\\@link AbstractControl#setValue setValue} or {\\@link AbstractControl#patchValue patchValue}\n * methods.\n *\n * **Listen to value**: If you want to listen to changes in the value of the form, you can subscribe\n * to the `FormGroup`'s {\\@link AbstractControl#valueChanges valueChanges} event.  You can also\n * listen to its {\\@link AbstractControl#statusChanges statusChanges} event to be notified when the\n * validation status is re-calculated.\n *\n * Furthermore, you can listen to the directive's `ngSubmit` event to be notified when the user has\n * triggered a form submission. The `ngSubmit` event will be emitted with the original form\n * submission event.\n *\n * ### Example\n *\n * In this example, we create form controls for first name and last name.\n *\n * {\\@example forms/ts/simpleFormGroup/simple_form_group_example.ts region='Component'}\n *\n * \\@ngModule ReactiveFormsModule\n */\n\nvar FormGroupDirective = /*#__PURE__*/(function () {\n  var FormGroupDirective = /*#__PURE__*/function (_ControlContainer3) {\n    _inherits(FormGroupDirective, _ControlContainer3);\n\n    var _super13 = _createSuper(FormGroupDirective);\n\n    /**\n     * @param {?} _validators\n     * @param {?} _asyncValidators\n     */\n    function FormGroupDirective(_validators, _asyncValidators) {\n      var _this33;\n\n      _classCallCheck(this, FormGroupDirective);\n\n      _this33 = _super13.call(this);\n      _this33._validators = _validators;\n      _this33._asyncValidators = _asyncValidators;\n      _this33.submitted = false;\n      _this33.directives = [];\n      _this33.form =\n      /** @type {?} */\n      null;\n      _this33.ngSubmit = new EventEmitter();\n      return _this33;\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n\n\n    _createClass(FormGroupDirective, [{\n      key: \"ngOnChanges\",\n      value: function ngOnChanges(changes) {\n        this._checkFormPresent();\n\n        if (changes.hasOwnProperty('form')) {\n          this._updateValidators();\n\n          this._updateDomValue();\n\n          this._updateRegistrations();\n        }\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"formDirective\",\n      get: function get() {\n        return this;\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"control\",\n      get: function get() {\n        return this.form;\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"path\",\n      get: function get() {\n        return [];\n      }\n      /**\n       * @param {?} dir\n       * @return {?}\n       */\n\n    }, {\n      key: \"addControl\",\n      value: function addControl(dir) {\n        /** @type {?} */\n        var ctrl = this.form.get(dir.path);\n        setUpControl(ctrl, dir);\n        ctrl.updateValueAndValidity({\n          emitEvent: false\n        });\n        this.directives.push(dir);\n        return ctrl;\n      }\n      /**\n       * @param {?} dir\n       * @return {?}\n       */\n\n    }, {\n      key: \"getControl\",\n      value: function getControl(dir) {\n        return (\n          /** @type {?} */\n          this.form.get(dir.path)\n        );\n      }\n      /**\n       * @param {?} dir\n       * @return {?}\n       */\n\n    }, {\n      key: \"removeControl\",\n      value: function removeControl(dir) {\n        removeDir(this.directives, dir);\n      }\n      /**\n       * @param {?} dir\n       * @return {?}\n       */\n\n    }, {\n      key: \"addFormGroup\",\n      value: function addFormGroup(dir) {\n        /** @type {?} */\n        var ctrl = this.form.get(dir.path);\n        setUpFormContainer(ctrl, dir);\n        ctrl.updateValueAndValidity({\n          emitEvent: false\n        });\n      }\n      /**\n       * @param {?} dir\n       * @return {?}\n       */\n\n    }, {\n      key: \"removeFormGroup\",\n      value: function removeFormGroup(dir) {}\n      /**\n       * @param {?} dir\n       * @return {?}\n       */\n\n    }, {\n      key: \"getFormGroup\",\n      value: function getFormGroup(dir) {\n        return (\n          /** @type {?} */\n          this.form.get(dir.path)\n        );\n      }\n      /**\n       * @param {?} dir\n       * @return {?}\n       */\n\n    }, {\n      key: \"addFormArray\",\n      value: function addFormArray(dir) {\n        /** @type {?} */\n        var ctrl = this.form.get(dir.path);\n        setUpFormContainer(ctrl, dir);\n        ctrl.updateValueAndValidity({\n          emitEvent: false\n        });\n      }\n      /**\n       * @param {?} dir\n       * @return {?}\n       */\n\n    }, {\n      key: \"removeFormArray\",\n      value: function removeFormArray(dir) {}\n      /**\n       * @param {?} dir\n       * @return {?}\n       */\n\n    }, {\n      key: \"getFormArray\",\n      value: function getFormArray(dir) {\n        return (\n          /** @type {?} */\n          this.form.get(dir.path)\n        );\n      }\n      /**\n       * @param {?} dir\n       * @param {?} value\n       * @return {?}\n       */\n\n    }, {\n      key: \"updateModel\",\n      value: function updateModel(dir, value) {\n        /** @type {?} */\n        var ctrl =\n        /** @type {?} */\n        this.form.get(dir.path);\n        ctrl.setValue(value);\n      }\n      /**\n       * @param {?} $event\n       * @return {?}\n       */\n\n    }, {\n      key: \"onSubmit\",\n      value: function onSubmit($event) {\n        /** @type {?} */\n        this.submitted = true;\n        syncPendingControls(this.form, this.directives);\n        this.ngSubmit.emit($event);\n        return false;\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"onReset\",\n      value: function onReset() {\n        this.resetForm();\n      }\n      /**\n       * @param {?=} value\n       * @return {?}\n       */\n\n    }, {\n      key: \"resetForm\",\n      value: function resetForm() {\n        var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;\n        this.form.reset(value);\n\n        /** @type {?} */\n        this.submitted = false;\n      }\n      /**\n       * \\@internal\n       * @return {?}\n       */\n\n    }, {\n      key: \"_updateDomValue\",\n      value: function _updateDomValue() {\n        var _this34 = this;\n\n        this.directives.forEach(function (dir) {\n          /** @type {?} */\n          var newCtrl = _this34.form.get(dir.path);\n\n          if (dir.control !== newCtrl) {\n            cleanUpControl(dir.control, dir);\n            if (newCtrl) setUpControl(newCtrl, dir);\n\n            /** @type {?} */\n            dir.control = newCtrl;\n          }\n        });\n\n        this.form._updateTreeValidity({\n          emitEvent: false\n        });\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"_updateRegistrations\",\n      value: function _updateRegistrations() {\n        var _this35 = this;\n\n        this.form._registerOnCollectionChange(function () {\n          return _this35._updateDomValue();\n        });\n\n        if (this._oldForm) this._oldForm._registerOnCollectionChange(function () {});\n        this._oldForm = this.form;\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"_updateValidators\",\n      value: function _updateValidators() {\n        /** @type {?} */\n        var sync = composeValidators(this._validators);\n        this.form.validator = Validators.compose([\n        /** @type {?} */\n        this.form.validator,\n        /** @type {?} */\n        sync]);\n        /** @type {?} */\n\n        var async = composeAsyncValidators(this._asyncValidators);\n        this.form.asyncValidator = Validators.composeAsync([\n        /** @type {?} */\n        this.form.asyncValidator,\n        /** @type {?} */\n        async]);\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"_checkFormPresent\",\n      value: function _checkFormPresent() {\n        if (!this.form) {\n          ReactiveErrors.missingFormException();\n        }\n      }\n    }]);\n\n    return FormGroupDirective;\n  }(ControlContainer);\n\n  FormGroupDirective.ɵfac = function FormGroupDirective_Factory(t) {\n    return new (t || FormGroupDirective)(ɵngcc0.ɵɵdirectiveInject(NG_VALIDATORS, 10), ɵngcc0.ɵɵdirectiveInject(NG_ASYNC_VALIDATORS, 10));\n  };\n\n  FormGroupDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: FormGroupDirective,\n    selectors: [[\"\", \"formGroup\", \"\"]],\n    hostBindings: function FormGroupDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"submit\", function FormGroupDirective_submit_HostBindingHandler($event) {\n          return ctx.onSubmit($event);\n        })(\"reset\", function FormGroupDirective_reset_HostBindingHandler() {\n          return ctx.onReset();\n        });\n      }\n    },\n    inputs: {\n      form: [\"formGroup\", \"form\"]\n    },\n    outputs: {\n      ngSubmit: \"ngSubmit\"\n    },\n    exportAs: [\"ngForm\"],\n    features: [ɵngcc0.ɵɵProvidersFeature([formDirectiveProvider$1]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature]\n  });\n  /** @nocollapse */\n\n  return FormGroupDirective;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nvar formGroupNameProvider = {\n  provide: ControlContainer,\n  useExisting: /*#__PURE__*/forwardRef(function () {\n    return FormGroupName;\n  })\n};\n/**\n * \\@description\n *\n * Syncs a nested `FormGroup` to a DOM element.\n *\n * This directive can only be used with a parent `FormGroupDirective` (selector:\n * `[formGroup]`).\n *\n * It accepts the string name of the nested `FormGroup` you want to link, and\n * will look for a `FormGroup` registered with that name in the parent\n * `FormGroup` instance you passed into `FormGroupDirective`.\n *\n * Nested form groups can come in handy when you want to validate a sub-group of a\n * form separately from the rest or when you'd like to group the values of certain\n * controls into their own nested object.\n *\n * \\@usageNotes\n * **Access the group**: You can access the associated `FormGroup` using the\n * {\\@link AbstractControl#get get} method. Ex: `this.form.get('name')`.\n *\n * You can also access individual controls within the group using dot syntax.\n * Ex: `this.form.get('name.first')`\n *\n * **Get the value**: the `value` property is always synced and available on the\n * `FormGroup`. See a full list of available properties in `AbstractControl`.\n *\n * **Set the value**: You can set an initial value for each child control when instantiating\n * the `FormGroup`, or you can set it programmatically later using\n * {\\@link AbstractControl#setValue setValue} or {\\@link AbstractControl#patchValue patchValue}.\n *\n * **Listen to value**: If you want to listen to changes in the value of the group, you can\n * subscribe to the {\\@link AbstractControl#valueChanges valueChanges} event.  You can also listen to\n * {\\@link AbstractControl#statusChanges statusChanges} to be notified when the validation status is\n * re-calculated.\n *\n * ### Example\n *\n * {\\@example forms/ts/nestedFormGroup/nested_form_group_example.ts region='Component'}\n *\n * \\@ngModule ReactiveFormsModule\n */\n\nvar FormGroupName = /*#__PURE__*/(function () {\n  var FormGroupName = /*#__PURE__*/function (_AbstractFormGroupDir2) {\n    _inherits(FormGroupName, _AbstractFormGroupDir2);\n\n    var _super14 = _createSuper(FormGroupName);\n\n    /**\n     * @param {?} parent\n     * @param {?} validators\n     * @param {?} asyncValidators\n     */\n    function FormGroupName(parent, validators, asyncValidators) {\n      var _this36;\n\n      _classCallCheck(this, FormGroupName);\n\n      _this36 = _super14.call(this);\n      _this36._parent = parent;\n      _this36._validators = validators;\n      _this36._asyncValidators = asyncValidators;\n      return _this36;\n    }\n    /**\n     * \\@internal\n     * @return {?}\n     */\n\n\n    _createClass(FormGroupName, [{\n      key: \"_checkParentType\",\n      value: function _checkParentType() {\n        if (_hasInvalidParent(this._parent)) {\n          ReactiveErrors.groupParentException();\n        }\n      }\n    }]);\n\n    return FormGroupName;\n  }(AbstractFormGroupDirective);\n\n  FormGroupName.ɵfac = function FormGroupName_Factory(t) {\n    return new (t || FormGroupName)(ɵngcc0.ɵɵdirectiveInject(ControlContainer, 13), ɵngcc0.ɵɵdirectiveInject(NG_VALIDATORS, 10), ɵngcc0.ɵɵdirectiveInject(NG_ASYNC_VALIDATORS, 10));\n  };\n\n  FormGroupName.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: FormGroupName,\n    selectors: [[\"\", \"formGroupName\", \"\"]],\n    inputs: {\n      name: [\"formGroupName\", \"name\"]\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([formGroupNameProvider]), ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  /** @nocollapse */\n\n  return FormGroupName;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/** @type {?} */\n\n\nvar formArrayNameProvider = {\n  provide: ControlContainer,\n  useExisting: /*#__PURE__*/forwardRef(function () {\n    return FormArrayName;\n  })\n};\n/**\n * \\@description\n *\n * Syncs a nested `FormArray` to a DOM element.\n *\n * This directive is designed to be used with a parent `FormGroupDirective` (selector:\n * `[formGroup]`).\n *\n * It accepts the string name of the nested `FormArray` you want to link, and\n * will look for a `FormArray` registered with that name in the parent\n * `FormGroup` instance you passed into `FormGroupDirective`.\n *\n * Nested form arrays can come in handy when you have a group of form controls but\n * you're not sure how many there will be. Form arrays allow you to create new\n * form controls dynamically.\n *\n * \\@usageNotes\n * **Access the array**: You can access the associated `FormArray` using the\n * {\\@link AbstractControl#get get} method on the parent `FormGroup`.\n * Ex: `this.form.get('cities')`.\n *\n * **Get the value**: the `value` property is always synced and available on the\n * `FormArray`. See a full list of available properties in `AbstractControl`.\n *\n * **Set the value**: You can set an initial value for each child control when instantiating\n * the `FormArray`, or you can set the value programmatically later using the\n * `FormArray`'s {\\@link AbstractControl#setValue setValue} or\n * {\\@link AbstractControl#patchValue patchValue} methods.\n *\n * **Listen to value**: If you want to listen to changes in the value of the array, you can\n * subscribe to the `FormArray`'s {\\@link AbstractControl#valueChanges valueChanges} event.\n * You can also listen to its {\\@link AbstractControl#statusChanges statusChanges} event to be\n * notified when the validation status is re-calculated.\n *\n * **Add new controls**: You can add new controls to the `FormArray` dynamically by calling\n * its {\\@link FormArray#push push} method.\n * Ex: `this.form.get('cities').push(new FormControl());`\n *\n * ### Example\n *\n * {\\@example forms/ts/nestedFormArray/nested_form_array_example.ts region='Component'}\n *\n * \\@ngModule ReactiveFormsModule\n */\n\nvar FormArrayName = /*#__PURE__*/(function () {\n  var FormArrayName = /*#__PURE__*/function (_ControlContainer4) {\n    _inherits(FormArrayName, _ControlContainer4);\n\n    var _super15 = _createSuper(FormArrayName);\n\n    /**\n     * @param {?} parent\n     * @param {?} validators\n     * @param {?} asyncValidators\n     */\n    function FormArrayName(parent, validators, asyncValidators) {\n      var _this37;\n\n      _classCallCheck(this, FormArrayName);\n\n      _this37 = _super15.call(this);\n      _this37._parent = parent;\n      _this37._validators = validators;\n      _this37._asyncValidators = asyncValidators;\n      return _this37;\n    }\n    /**\n     * @return {?}\n     */\n\n\n    _createClass(FormArrayName, [{\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        this._checkParentType();\n        /** @type {?} */\n\n\n        this.formDirective.addFormArray(this);\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        if (this.formDirective) {\n          this.formDirective.removeFormArray(this);\n        }\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"control\",\n      get: function get() {\n        return (\n          /** @type {?} */\n          this.formDirective.getFormArray(this)\n        );\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"formDirective\",\n      get: function get() {\n        return this._parent ?\n        /** @type {?} */\n        this._parent.formDirective : null;\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"path\",\n      get: function get() {\n        return controlPath(this.name, this._parent);\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"validator\",\n      get: function get() {\n        return composeValidators(this._validators);\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"asyncValidator\",\n      get: function get() {\n        return composeAsyncValidators(this._asyncValidators);\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"_checkParentType\",\n      value: function _checkParentType() {\n        if (_hasInvalidParent(this._parent)) {\n          ReactiveErrors.arrayParentException();\n        }\n      }\n    }]);\n\n    return FormArrayName;\n  }(ControlContainer);\n\n  FormArrayName.ɵfac = function FormArrayName_Factory(t) {\n    return new (t || FormArrayName)(ɵngcc0.ɵɵdirectiveInject(ControlContainer, 13), ɵngcc0.ɵɵdirectiveInject(NG_VALIDATORS, 10), ɵngcc0.ɵɵdirectiveInject(NG_ASYNC_VALIDATORS, 10));\n  };\n\n  FormArrayName.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: FormArrayName,\n    selectors: [[\"\", \"formArrayName\", \"\"]],\n    inputs: {\n      name: [\"formArrayName\", \"name\"]\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([formArrayNameProvider]), ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  /** @nocollapse */\n\n  return FormArrayName;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @param {?} parent\n * @return {?}\n */\n\n\nfunction _hasInvalidParent(parent) {\n  return !(parent instanceof FormGroupName) && !(parent instanceof FormGroupDirective) && !(parent instanceof FormArrayName);\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nvar controlNameBinding = {\n  provide: NgControl,\n  useExisting: /*#__PURE__*/forwardRef(function () {\n    return FormControlName;\n  })\n};\n/**\n * \\@description\n *\n * Syncs a `FormControl` in an existing `FormGroup` to a form control\n * element by name.\n *\n * This directive ensures that any values written to the `FormControl`\n * instance programmatically will be written to the DOM element (model -> view). Conversely,\n * any values written to the DOM element through user input will be reflected in the\n * `FormControl` instance (view -> model).\n *\n * \\@usageNotes\n * This directive is designed to be used with a parent `FormGroupDirective` (selector:\n * `[formGroup]`).\n *\n * It accepts the string name of the `FormControl` instance you want to\n * link, and will look for a `FormControl` registered with that name in the\n * closest `FormGroup` or `FormArray` above it.\n *\n * **Access the control**: You can access the `FormControl` associated with\n * this directive by using the {\\@link AbstractControl#get get} method.\n * Ex: `this.form.get('first');`\n *\n * **Get value**: the `value` property is always synced and available on the `FormControl`.\n * See a full list of available properties in `AbstractControl`.\n *\n *  **Set value**: You can set an initial value for the control when instantiating the\n *  `FormControl`, or you can set it programmatically later using\n *  {\\@link AbstractControl#setValue setValue} or {\\@link AbstractControl#patchValue patchValue}.\n *\n * **Listen to value**: If you want to listen to changes in the value of the control, you can\n * subscribe to the {\\@link AbstractControl#valueChanges valueChanges} event.  You can also listen to\n * {\\@link AbstractControl#statusChanges statusChanges} to be notified when the validation status is\n * re-calculated.\n *\n * ### Example\n *\n * In this example, we create form controls for first name and last name.\n *\n * {\\@example forms/ts/simpleFormGroup/simple_form_group_example.ts region='Component'}\n *\n * To see `formControlName` examples with different form control types, see:\n *\n * * Radio buttons: `RadioControlValueAccessor`\n * * Selects: `SelectControlValueAccessor`\n *\n * ### Use with ngModel\n *\n * Support for using the `ngModel` input property and `ngModelChange` event with reactive\n * form directives has been deprecated in Angular v6 and will be removed in Angular v7.\n *\n * Now deprecated:\n *\n * ```html\n * <form [formGroup]=\"form\">\n *   <input formControlName=\"first\" [(ngModel)]=\"value\">\n * </form>\n * ```\n *\n * ```ts\n * this.value = 'some value';\n * ```\n *\n * This has been deprecated for a few reasons. First, developers have found this pattern\n * confusing. It seems like the actual `ngModel` directive is being used, but in fact it's\n * an input/output property named `ngModel` on the reactive form directive that simply\n * approximates (some of) its behavior. Specifically, it allows getting/setting the value\n * and intercepting value events. However, some of `ngModel`'s other features - like\n * delaying updates with`ngModelOptions` or exporting the directive - simply don't work,\n * which has understandably caused some confusion.\n *\n * In addition, this pattern mixes template-driven and reactive forms strategies, which\n * we generally don't recommend because it doesn't take advantage of the full benefits of\n * either strategy. Setting the value in the template violates the template-agnostic\n * principles behind reactive forms, whereas adding a `FormControl`/`FormGroup` layer in\n * the class removes the convenience of defining forms in the template.\n *\n * To update your code before v7, you'll want to decide whether to stick with reactive form\n * directives (and get/set values using reactive forms patterns) or switch over to\n * template-driven directives.\n *\n * After (choice 1 - use reactive forms):\n *\n * ```html\n * <form [formGroup]=\"form\">\n *   <input formControlName=\"first\">\n * </form>\n * ```\n *\n * ```ts\n * this.form.get('first').setValue('some value');\n * ```\n *\n * After (choice 2 - use template-driven forms):\n *\n * ```html\n * <input [(ngModel)]=\"value\">\n * ```\n *\n * ```ts\n * this.value = 'some value';\n * ```\n *\n * By default, when you use this pattern, you will see a deprecation warning once in dev\n * mode. You can choose to silence this warning by providing a config for\n * `ReactiveFormsModule` at import time:\n *\n * ```ts\n * imports: [\n *   ReactiveFormsModule.withConfig({warnOnNgModelWithFormControl: 'never'});\n * ]\n * ```\n *\n * Alternatively, you can choose to surface a separate warning for each instance of this\n * pattern with a config value of `\"always\"`. This may help to track down where in the code\n * the pattern is being used as the code is being updated.\n *\n * \\@ngModule ReactiveFormsModule\n */\n\nvar FormControlName = /*#__PURE__*/(function () {\n  var FormControlName = /*#__PURE__*/function (_NgControl3) {\n    _inherits(FormControlName, _NgControl3);\n\n    var _super16 = _createSuper(FormControlName);\n\n    /**\n     * @param {?} parent\n     * @param {?} validators\n     * @param {?} asyncValidators\n     * @param {?} valueAccessors\n     * @param {?} _ngModelWarningConfig\n     */\n    function FormControlName(parent, validators, asyncValidators, valueAccessors, _ngModelWarningConfig) {\n      var _this38;\n\n      _classCallCheck(this, FormControlName);\n\n      _this38 = _super16.call(this);\n      _this38._ngModelWarningConfig = _ngModelWarningConfig;\n      _this38._added = false;\n      /**\n       * @deprecated as of v6\n       */\n\n      _this38.update = new EventEmitter();\n      /**\n       * Instance property used to track whether an ngModel warning has been sent out for this\n       * particular FormControlName instance. Used to support warning config of \"always\".\n       *\n       * \\@internal\n       */\n\n      _this38._ngModelWarningSent = false;\n      _this38._parent = parent;\n      _this38._rawValidators = validators || [];\n      _this38._rawAsyncValidators = asyncValidators || [];\n      _this38.valueAccessor = selectValueAccessor(_assertThisInitialized(_this38), valueAccessors);\n      return _this38;\n    }\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n\n\n    _createClass(FormControlName, [{\n      key: \"isDisabled\",\n      set: function set(isDisabled) {\n        ReactiveErrors.disabledAttrWarning();\n      }\n      /**\n       * @param {?} changes\n       * @return {?}\n       */\n\n    }, {\n      key: \"ngOnChanges\",\n      value: function ngOnChanges(changes) {\n        if (!this._added) this._setUpControl();\n\n        if (isPropertyUpdated(changes, this.viewModel)) {\n          _ngModelWarning('formControlName', FormControlName, this, this._ngModelWarningConfig);\n\n          this.viewModel = this.model;\n          this.formDirective.updateModel(this, this.model);\n        }\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        if (this.formDirective) {\n          this.formDirective.removeControl(this);\n        }\n      }\n      /**\n       * @param {?} newValue\n       * @return {?}\n       */\n\n    }, {\n      key: \"viewToModelUpdate\",\n      value: function viewToModelUpdate(newValue) {\n        this.viewModel = newValue;\n        this.update.emit(newValue);\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"path\",\n      get: function get() {\n        return controlPath(this.name,\n        /** @type {?} */\n        this._parent);\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"formDirective\",\n      get: function get() {\n        return this._parent ? this._parent.formDirective : null;\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"validator\",\n      get: function get() {\n        return composeValidators(this._rawValidators);\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"asyncValidator\",\n      get: function get() {\n        return (\n          /** @type {?} */\n          composeAsyncValidators(this._rawAsyncValidators)\n        );\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"_checkParentType\",\n      value: function _checkParentType() {\n        if (!(this._parent instanceof FormGroupName) && this._parent instanceof AbstractFormGroupDirective) {\n          ReactiveErrors.ngModelGroupException();\n        } else if (!(this._parent instanceof FormGroupName) && !(this._parent instanceof FormGroupDirective) && !(this._parent instanceof FormArrayName)) {\n          ReactiveErrors.controlParentException();\n        }\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"_setUpControl\",\n      value: function _setUpControl() {\n        this._checkParentType();\n\n        /** @type {?} */\n        this.control = this.formDirective.addControl(this);\n\n        if (this.control.disabled &&\n        /** @type {?} */\n        this.valueAccessor.setDisabledState) {\n          /** @type {?} */\n\n          /** @type {?} */\n          this.valueAccessor.setDisabledState(true);\n        }\n\n        this._added = true;\n      }\n    }]);\n\n    return FormControlName;\n  }(NgControl);\n\n  FormControlName.ɵfac = function FormControlName_Factory(t) {\n    return new (t || FormControlName)(ɵngcc0.ɵɵdirectiveInject(ControlContainer, 13), ɵngcc0.ɵɵdirectiveInject(NG_VALIDATORS, 10), ɵngcc0.ɵɵdirectiveInject(NG_ASYNC_VALIDATORS, 10), ɵngcc0.ɵɵdirectiveInject(NG_VALUE_ACCESSOR, 10), ɵngcc0.ɵɵdirectiveInject(NG_MODEL_WITH_FORM_CONTROL_WARNING, 8));\n  };\n\n  FormControlName.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: FormControlName,\n    selectors: [[\"\", \"formControlName\", \"\"]],\n    inputs: {\n      isDisabled: [\"disabled\", \"isDisabled\"],\n      name: [\"formControlName\", \"name\"],\n      model: [\"ngModel\", \"model\"]\n    },\n    outputs: {\n      update: \"ngModelChange\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([controlNameBinding]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature]\n  });\n  /**\n   * Static property used to track whether any ngModel warnings have been sent across\n   * all instances of FormControlName. Used to support warning config of \"once\".\n   *\n   * \\@internal\n   */\n\n  FormControlName._ngModelWarningSentOnce = false;\n  /** @nocollapse */\n\n  return FormControlName;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nvar REQUIRED_VALIDATOR = {\n  provide: NG_VALIDATORS,\n  useExisting: /*#__PURE__*/forwardRef(function () {\n    return RequiredValidator;\n  }),\n  multi: true\n};\n/** @type {?} */\n\nvar CHECKBOX_REQUIRED_VALIDATOR = {\n  provide: NG_VALIDATORS,\n  useExisting: /*#__PURE__*/forwardRef(function () {\n    return CheckboxRequiredValidator;\n  }),\n  multi: true\n};\n/**\n * A Directive that adds the `required` validator to any controls marked with the\n * `required` attribute, via the `NG_VALIDATORS` binding.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```\n * <input name=\"fullName\" ngModel required>\n * ```\n *\n * \\@ngModule FormsModule\n * \\@ngModule ReactiveFormsModule\n */\n\nvar RequiredValidator = /*#__PURE__*/(function () {\n  var RequiredValidator = /*#__PURE__*/function () {\n    function RequiredValidator() {\n      _classCallCheck(this, RequiredValidator);\n    }\n\n    _createClass(RequiredValidator, [{\n      key: \"required\",\n      get:\n      /**\n       * @return {?}\n       */\n      function get() {\n        return this._required;\n      }\n      /**\n       * @param {?} value\n       * @return {?}\n       */\n      ,\n      set: function set(value) {\n        this._required = value != null && value !== false && \"\".concat(value) !== 'false';\n        if (this._onChange) this._onChange();\n      }\n      /**\n       * @param {?} control\n       * @return {?}\n       */\n\n    }, {\n      key: \"validate\",\n      value: function validate(control) {\n        return this.required ? Validators.required(control) : null;\n      }\n      /**\n       * @param {?} fn\n       * @return {?}\n       */\n\n    }, {\n      key: \"registerOnValidatorChange\",\n      value: function registerOnValidatorChange(fn) {\n        this._onChange = fn;\n      }\n    }]);\n\n    return RequiredValidator;\n  }();\n\n  RequiredValidator.ɵfac = function RequiredValidator_Factory(t) {\n    return new (t || RequiredValidator)();\n  };\n\n  RequiredValidator.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: RequiredValidator,\n    selectors: [[\"\", \"required\", \"\", \"formControlName\", \"\", 3, \"type\", \"checkbox\"], [\"\", \"required\", \"\", \"formControl\", \"\", 3, \"type\", \"checkbox\"], [\"\", \"required\", \"\", \"ngModel\", \"\", 3, \"type\", \"checkbox\"]],\n    hostVars: 1,\n    hostBindings: function RequiredValidator_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"required\", ctx.required ? \"\" : null);\n      }\n    },\n    inputs: {\n      required: \"required\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([REQUIRED_VALIDATOR])]\n  });\n  return RequiredValidator;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * A Directive that adds the `required` validator to checkbox controls marked with the\n * `required` attribute, via the `NG_VALIDATORS` binding.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```\n * <input type=\"checkbox\" name=\"active\" ngModel required>\n * ```\n *\n * \\@experimental\n * \\@ngModule FormsModule\n * \\@ngModule ReactiveFormsModule\n */\n\n\nvar CheckboxRequiredValidator = /*#__PURE__*/(function () {\n  var CheckboxRequiredValidator = /*#__PURE__*/function (_RequiredValidator) {\n    _inherits(CheckboxRequiredValidator, _RequiredValidator);\n\n    var _super17 = _createSuper(CheckboxRequiredValidator);\n\n    function CheckboxRequiredValidator() {\n      _classCallCheck(this, CheckboxRequiredValidator);\n\n      return _super17.apply(this, arguments);\n    }\n\n    _createClass(CheckboxRequiredValidator, [{\n      key: \"validate\",\n      value:\n      /**\n       * @param {?} control\n       * @return {?}\n       */\n      function validate(control) {\n        return this.required ? Validators.requiredTrue(control) : null;\n      }\n    }]);\n\n    return CheckboxRequiredValidator;\n  }(RequiredValidator);\n\n  CheckboxRequiredValidator.ɵfac = /*@__PURE__*/function () {\n    var ɵCheckboxRequiredValidator_BaseFactory;\n    return function CheckboxRequiredValidator_Factory(t) {\n      return (ɵCheckboxRequiredValidator_BaseFactory || (ɵCheckboxRequiredValidator_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(CheckboxRequiredValidator)))(t || CheckboxRequiredValidator);\n    };\n  }();\n\n  CheckboxRequiredValidator.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: CheckboxRequiredValidator,\n    selectors: [[\"input\", \"type\", \"checkbox\", \"required\", \"\", \"formControlName\", \"\"], [\"input\", \"type\", \"checkbox\", \"required\", \"\", \"formControl\", \"\"], [\"input\", \"type\", \"checkbox\", \"required\", \"\", \"ngModel\", \"\"]],\n    hostVars: 1,\n    hostBindings: function CheckboxRequiredValidator_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"required\", ctx.required ? \"\" : null);\n      }\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([CHECKBOX_REQUIRED_VALIDATOR]), ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  return CheckboxRequiredValidator;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/** *\n * Provider which adds `EmailValidator` to `NG_VALIDATORS`.\n  @type {?} */\n\n\nvar EMAIL_VALIDATOR = {\n  provide: NG_VALIDATORS,\n  useExisting: /*#__PURE__*/forwardRef(function () {\n    return EmailValidator;\n  }),\n  multi: true\n};\n/**\n * A Directive that adds the `email` validator to controls marked with the\n * `email` attribute, via the `NG_VALIDATORS` binding.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```\n * <input type=\"email\" name=\"email\" ngModel email>\n * <input type=\"email\" name=\"email\" ngModel email=\"true\">\n * <input type=\"email\" name=\"email\" ngModel [email]=\"true\">\n * ```\n *\n * \\@experimental\n * \\@ngModule FormsModule\n * \\@ngModule ReactiveFormsModule\n */\n\nvar EmailValidator = /*#__PURE__*/(function () {\n  var EmailValidator = /*#__PURE__*/function () {\n    function EmailValidator() {\n      _classCallCheck(this, EmailValidator);\n    }\n\n    _createClass(EmailValidator, [{\n      key: \"email\",\n      set:\n      /**\n       * @param {?} value\n       * @return {?}\n       */\n      function set(value) {\n        this._enabled = value === '' || value === true || value === 'true';\n        if (this._onChange) this._onChange();\n      }\n      /**\n       * @param {?} control\n       * @return {?}\n       */\n\n    }, {\n      key: \"validate\",\n      value: function validate(control) {\n        return this._enabled ? Validators.email(control) : null;\n      }\n      /**\n       * @param {?} fn\n       * @return {?}\n       */\n\n    }, {\n      key: \"registerOnValidatorChange\",\n      value: function registerOnValidatorChange(fn) {\n        this._onChange = fn;\n      }\n    }]);\n\n    return EmailValidator;\n  }();\n\n  EmailValidator.ɵfac = function EmailValidator_Factory(t) {\n    return new (t || EmailValidator)();\n  };\n\n  EmailValidator.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: EmailValidator,\n    selectors: [[\"\", \"email\", \"\", \"formControlName\", \"\"], [\"\", \"email\", \"\", \"formControl\", \"\"], [\"\", \"email\", \"\", \"ngModel\", \"\"]],\n    inputs: {\n      email: \"email\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([EMAIL_VALIDATOR])]\n  });\n  return EmailValidator;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/** *\n * Provider which adds `MinLengthValidator` to `NG_VALIDATORS`.\n *\n * \\@usageNotes\n * ### Example:\n *\n * {\\@example common/forms/ts/validators/validators.ts region='min'}\n  @type {?} */\n\n\nvar MIN_LENGTH_VALIDATOR = {\n  provide: NG_VALIDATORS,\n  useExisting: /*#__PURE__*/forwardRef(function () {\n    return MinLengthValidator;\n  }),\n  multi: true\n};\n/**\n * A directive which installs the `MinLengthValidator` for any `formControlName`,\n * `formControl`, or control with `ngModel` that also has a `minlength` attribute.\n *\n * \\@ngModule FormsModule\n * \\@ngModule ReactiveFormsModule\n */\n\nvar MinLengthValidator = /*#__PURE__*/(function () {\n  var MinLengthValidator = /*#__PURE__*/function () {\n    function MinLengthValidator() {\n      _classCallCheck(this, MinLengthValidator);\n    }\n\n    _createClass(MinLengthValidator, [{\n      key: \"ngOnChanges\",\n      value:\n      /**\n       * @param {?} changes\n       * @return {?}\n       */\n      function ngOnChanges(changes) {\n        if ('minlength' in changes) {\n          this._createValidator();\n\n          if (this._onChange) this._onChange();\n        }\n      }\n      /**\n       * @param {?} control\n       * @return {?}\n       */\n\n    }, {\n      key: \"validate\",\n      value: function validate(control) {\n        return this.minlength == null ? null : this._validator(control);\n      }\n      /**\n       * @param {?} fn\n       * @return {?}\n       */\n\n    }, {\n      key: \"registerOnValidatorChange\",\n      value: function registerOnValidatorChange(fn) {\n        this._onChange = fn;\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"_createValidator\",\n      value: function _createValidator() {\n        this._validator = Validators.minLength(parseInt(this.minlength, 10));\n      }\n    }]);\n\n    return MinLengthValidator;\n  }();\n\n  MinLengthValidator.ɵfac = function MinLengthValidator_Factory(t) {\n    return new (t || MinLengthValidator)();\n  };\n\n  MinLengthValidator.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MinLengthValidator,\n    selectors: [[\"\", \"minlength\", \"\", \"formControlName\", \"\"], [\"\", \"minlength\", \"\", \"formControl\", \"\"], [\"\", \"minlength\", \"\", \"ngModel\", \"\"]],\n    hostVars: 1,\n    hostBindings: function MinLengthValidator_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"minlength\", ctx.minlength ? ctx.minlength : null);\n      }\n    },\n    inputs: {\n      minlength: \"minlength\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([MIN_LENGTH_VALIDATOR]), ɵngcc0.ɵɵNgOnChangesFeature]\n  });\n  return MinLengthValidator;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/** *\n * Provider which adds `MaxLengthValidator` to `NG_VALIDATORS`.\n *\n * \\@usageNotes\n * ### Example:\n *\n * {\\@example common/forms/ts/validators/validators.ts region='max'}\n  @type {?} */\n\n\nvar MAX_LENGTH_VALIDATOR = {\n  provide: NG_VALIDATORS,\n  useExisting: /*#__PURE__*/forwardRef(function () {\n    return MaxLengthValidator;\n  }),\n  multi: true\n};\n/**\n * A directive which installs the `MaxLengthValidator` for any `formControlName`,\n * `formControl`, or control with `ngModel` that also has a `maxlength` attribute.\n *\n * \\@ngModule FormsModule\n * \\@ngModule ReactiveFormsModule\n */\n\nvar MaxLengthValidator = /*#__PURE__*/(function () {\n  var MaxLengthValidator = /*#__PURE__*/function () {\n    function MaxLengthValidator() {\n      _classCallCheck(this, MaxLengthValidator);\n    }\n\n    _createClass(MaxLengthValidator, [{\n      key: \"ngOnChanges\",\n      value:\n      /**\n       * @param {?} changes\n       * @return {?}\n       */\n      function ngOnChanges(changes) {\n        if ('maxlength' in changes) {\n          this._createValidator();\n\n          if (this._onChange) this._onChange();\n        }\n      }\n      /**\n       * @param {?} control\n       * @return {?}\n       */\n\n    }, {\n      key: \"validate\",\n      value: function validate(control) {\n        return this.maxlength != null ? this._validator(control) : null;\n      }\n      /**\n       * @param {?} fn\n       * @return {?}\n       */\n\n    }, {\n      key: \"registerOnValidatorChange\",\n      value: function registerOnValidatorChange(fn) {\n        this._onChange = fn;\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"_createValidator\",\n      value: function _createValidator() {\n        this._validator = Validators.maxLength(parseInt(this.maxlength, 10));\n      }\n    }]);\n\n    return MaxLengthValidator;\n  }();\n\n  MaxLengthValidator.ɵfac = function MaxLengthValidator_Factory(t) {\n    return new (t || MaxLengthValidator)();\n  };\n\n  MaxLengthValidator.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MaxLengthValidator,\n    selectors: [[\"\", \"maxlength\", \"\", \"formControlName\", \"\"], [\"\", \"maxlength\", \"\", \"formControl\", \"\"], [\"\", \"maxlength\", \"\", \"ngModel\", \"\"]],\n    hostVars: 1,\n    hostBindings: function MaxLengthValidator_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"maxlength\", ctx.maxlength ? ctx.maxlength : null);\n      }\n    },\n    inputs: {\n      maxlength: \"maxlength\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([MAX_LENGTH_VALIDATOR]), ɵngcc0.ɵɵNgOnChangesFeature]\n  });\n  return MaxLengthValidator;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/** @type {?} */\n\n\nvar PATTERN_VALIDATOR = {\n  provide: NG_VALIDATORS,\n  useExisting: /*#__PURE__*/forwardRef(function () {\n    return PatternValidator;\n  }),\n  multi: true\n};\n/**\n * A Directive that adds the `pattern` validator to any controls marked with the\n * `pattern` attribute, via the `NG_VALIDATORS` binding. Uses attribute value\n * as the regex to validate Control value against.  Follows pattern attribute\n * semantics; i.e. regex must match entire Control value.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```\n * <input [name]=\"fullName\" pattern=\"[a-zA-Z ]*\" ngModel>\n * ```\n *\n * \\@ngModule FormsModule\n * \\@ngModule ReactiveFormsModule\n */\n\nvar PatternValidator = /*#__PURE__*/(function () {\n  var PatternValidator = /*#__PURE__*/function () {\n    function PatternValidator() {\n      _classCallCheck(this, PatternValidator);\n    }\n\n    _createClass(PatternValidator, [{\n      key: \"ngOnChanges\",\n      value:\n      /**\n       * @param {?} changes\n       * @return {?}\n       */\n      function ngOnChanges(changes) {\n        if ('pattern' in changes) {\n          this._createValidator();\n\n          if (this._onChange) this._onChange();\n        }\n      }\n      /**\n       * @param {?} control\n       * @return {?}\n       */\n\n    }, {\n      key: \"validate\",\n      value: function validate(control) {\n        return this._validator(control);\n      }\n      /**\n       * @param {?} fn\n       * @return {?}\n       */\n\n    }, {\n      key: \"registerOnValidatorChange\",\n      value: function registerOnValidatorChange(fn) {\n        this._onChange = fn;\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"_createValidator\",\n      value: function _createValidator() {\n        this._validator = Validators.pattern(this.pattern);\n      }\n    }]);\n\n    return PatternValidator;\n  }();\n\n  PatternValidator.ɵfac = function PatternValidator_Factory(t) {\n    return new (t || PatternValidator)();\n  };\n\n  PatternValidator.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: PatternValidator,\n    selectors: [[\"\", \"pattern\", \"\", \"formControlName\", \"\"], [\"\", \"pattern\", \"\", \"formControl\", \"\"], [\"\", \"pattern\", \"\", \"ngModel\", \"\"]],\n    hostVars: 1,\n    hostBindings: function PatternValidator_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"pattern\", ctx.pattern ? ctx.pattern : null);\n      }\n    },\n    inputs: {\n      pattern: \"pattern\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([PATTERN_VALIDATOR]), ɵngcc0.ɵɵNgOnChangesFeature]\n  });\n  return PatternValidator;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * \\@description\n * Creates an `AbstractControl` from a user-specified configuration.\n *\n * The `FormBuilder` provides syntactic sugar that shortens creating instances of a `FormControl`,\n * `FormGroup`, or `FormArray`. It reduces the amount of boilerplate needed to build complex\n * forms.\n *\n * @see [Reactive Forms Guide](/guide/reactive-forms)\n *\n */\n\n\nvar FormBuilder = /*#__PURE__*/(function () {\n  var FormBuilder = /*#__PURE__*/function () {\n    function FormBuilder() {\n      _classCallCheck(this, FormBuilder);\n    }\n\n    _createClass(FormBuilder, [{\n      key: \"group\",\n      value:\n      /**\n       * \\@description\n       * Construct a new `FormGroup` instance.\n       *\n       * @param {?} controlsConfig A collection of child controls. The key for each child is the name\n       * under which it is registered.\n       *\n       * @param {?=} extra An object of configuration options for the `FormGroup`.\n       * * `validator`: A synchronous validator function, or an array of validator functions\n       * * `asyncValidator`: A single async validator or array of async validator functions\n       *\n       * @return {?}\n       */\n      function group(controlsConfig) {\n        var extra = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n        /** @type {?} */\n        var controls = this._reduceControls(controlsConfig);\n        /** @type {?} */\n\n\n        var validator = extra != null ? extra['validator'] : null;\n        /** @type {?} */\n\n        var asyncValidator = extra != null ? extra['asyncValidator'] : null;\n        return new FormGroup(controls, validator, asyncValidator);\n      }\n      /**\n       * \\@description\n       * Construct a new `FormControl` instance.\n       *\n       * \\@usageNotes\n       *\n       * ### Initialize a control as disabled\n       *\n       * The following example returns a control with an initial value in a disabled state.\n       *\n       * <code-example path=\"forms/ts/formBuilder/form_builder_example.ts\"\n       *   linenums=\"false\" region=\"disabled-control\">\n       * </code-example>\n       *\n       * @param {?} formState Initializes the control with an initial value,\n       * or an object that defines the initial value and disabled state.\n       *\n       * @param {?=} validator A synchronous validator function, or an array of synchronous validator\n       * functions.\n       *\n       * @param {?=} asyncValidator A single async validator or array of async validator functions\n       *\n       * @return {?}\n       */\n\n    }, {\n      key: \"control\",\n      value: function control(formState, validator, asyncValidator) {\n        return new FormControl(formState, validator, asyncValidator);\n      }\n      /**\n       * \\@description\n       * Construct a new `FormArray` instance.\n       *\n       * @param {?} controlsConfig An array of child controls. The key for each child control is its index\n       * in the array.\n       *\n       * @param {?=} validator A synchronous validator function, or an array of synchronous validator\n       * functions.\n       *\n       * @param {?=} asyncValidator A single async validator or array of async validator functions\n       * @return {?}\n       */\n\n    }, {\n      key: \"array\",\n      value: function array(controlsConfig, validator, asyncValidator) {\n        var _this39 = this;\n\n        /** @type {?} */\n        var controls = controlsConfig.map(function (c) {\n          return _this39._createControl(c);\n        });\n        return new FormArray(controls, validator, asyncValidator);\n      }\n      /**\n       * \\@internal\n       * @param {?} controlsConfig\n       * @return {?}\n       */\n\n    }, {\n      key: \"_reduceControls\",\n      value: function _reduceControls(controlsConfig) {\n        var _this40 = this;\n\n        /** @type {?} */\n        var controls = {};\n        Object.keys(controlsConfig).forEach(function (controlName) {\n          controls[controlName] = _this40._createControl(controlsConfig[controlName]);\n        });\n        return controls;\n      }\n      /**\n       * \\@internal\n       * @param {?} controlConfig\n       * @return {?}\n       */\n\n    }, {\n      key: \"_createControl\",\n      value: function _createControl(controlConfig) {\n        if (controlConfig instanceof FormControl || controlConfig instanceof FormGroup || controlConfig instanceof FormArray) {\n          return controlConfig;\n        } else if (Array.isArray(controlConfig)) {\n          /** @type {?} */\n          var value = controlConfig[0];\n          /** @type {?} */\n\n          var validator = controlConfig.length > 1 ? controlConfig[1] : null;\n          /** @type {?} */\n\n          var asyncValidator = controlConfig.length > 2 ? controlConfig[2] : null;\n          return this.control(value, validator, asyncValidator);\n        } else {\n          return this.control(controlConfig);\n        }\n      }\n    }]);\n\n    return FormBuilder;\n  }();\n\n  FormBuilder.ɵfac = function FormBuilder_Factory(t) {\n    return new (t || FormBuilder)();\n  };\n\n  FormBuilder.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: FormBuilder,\n    factory: FormBuilder.ɵfac\n  });\n  return FormBuilder;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nvar VERSION = /*#__PURE__*/new Version('6.1.10');\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * \\@description\n *\n * Adds `novalidate` attribute to all forms by default.\n *\n * `novalidate` is used to disable browser's native form validation.\n *\n * If you want to use native validation with Angular forms, just add `ngNativeValidate` attribute:\n *\n * ```\n * <form ngNativeValidate></form>\n * ```\n *\n * \\@experimental\n * \\@ngModule ReactiveFormsModule\n * \\@ngModule FormsModule\n */\n\nvar NgNoValidate = /*#__PURE__*/(function () {\n  var NgNoValidate = /*#__PURE__*/_createClass(function NgNoValidate() {\n    _classCallCheck(this, NgNoValidate);\n  });\n\n  NgNoValidate.ɵfac = function NgNoValidate_Factory(t) {\n    return new (t || NgNoValidate)();\n  };\n\n  NgNoValidate.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: NgNoValidate,\n    selectors: [[\"form\", 3, \"ngNoForm\", \"\", 3, \"ngNativeValidate\", \"\"]],\n    hostAttrs: [\"novalidate\", \"\"]\n  });\n  return NgNoValidate;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nvar SHARED_FORM_DIRECTIVES = [NgNoValidate, NgSelectOption, NgSelectMultipleOption, DefaultValueAccessor, NumberValueAccessor, RangeValueAccessor, CheckboxControlValueAccessor, SelectControlValueAccessor, SelectMultipleControlValueAccessor, RadioControlValueAccessor, NgControlStatus, NgControlStatusGroup, RequiredValidator, MinLengthValidator, MaxLengthValidator, PatternValidator, CheckboxRequiredValidator, EmailValidator];\n/** @type {?} */\n\nvar TEMPLATE_DRIVEN_DIRECTIVES = [NgModel, NgModelGroup, NgForm];\n/** @type {?} */\n\nvar REACTIVE_DRIVEN_DIRECTIVES = [FormControlDirective, FormGroupDirective, FormControlName, FormGroupName, FormArrayName];\n/**\n * Internal module used for sharing directives between FormsModule and ReactiveFormsModule\n */\n\nvar InternalFormsSharedModule = /*#__PURE__*/(function () {\n  var InternalFormsSharedModule = /*#__PURE__*/_createClass(function InternalFormsSharedModule() {\n    _classCallCheck(this, InternalFormsSharedModule);\n  });\n\n  InternalFormsSharedModule.ɵfac = function InternalFormsSharedModule_Factory(t) {\n    return new (t || InternalFormsSharedModule)();\n  };\n\n  InternalFormsSharedModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: InternalFormsSharedModule\n  });\n  InternalFormsSharedModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({});\n  return InternalFormsSharedModule;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(InternalFormsSharedModule, {\n    declarations: [NgNoValidate, NgSelectOption, NgSelectMultipleOption, DefaultValueAccessor, NumberValueAccessor, RangeValueAccessor, CheckboxControlValueAccessor, SelectControlValueAccessor, SelectMultipleControlValueAccessor, RadioControlValueAccessor, NgControlStatus, NgControlStatusGroup, RequiredValidator, MinLengthValidator, MaxLengthValidator, PatternValidator, CheckboxRequiredValidator, EmailValidator],\n    exports: [NgNoValidate, NgSelectOption, NgSelectMultipleOption, DefaultValueAccessor, NumberValueAccessor, RangeValueAccessor, CheckboxControlValueAccessor, SelectControlValueAccessor, SelectMultipleControlValueAccessor, RadioControlValueAccessor, NgControlStatus, NgControlStatusGroup, RequiredValidator, MinLengthValidator, MaxLengthValidator, PatternValidator, CheckboxRequiredValidator, EmailValidator]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Exports the required providers and directives for template-driven forms,\n * making them available for import by NgModules that import this module.\n * @see [Forms](guide/forms)\n *\n * @see [Forms Guide](/guide/forms)\n */\n\n\nvar FormsModule = /*#__PURE__*/(function () {\n  var FormsModule = /*#__PURE__*/_createClass(function FormsModule() {\n    _classCallCheck(this, FormsModule);\n  });\n\n  FormsModule.ɵfac = function FormsModule_Factory(t) {\n    return new (t || FormsModule)();\n  };\n\n  FormsModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: FormsModule\n  });\n  FormsModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    providers: [RadioControlRegistry],\n    imports: [InternalFormsSharedModule]\n  });\n  return FormsModule;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(FormsModule, {\n    declarations: [NgModel, NgModelGroup, NgForm],\n    exports: [InternalFormsSharedModule, NgModel, NgModelGroup, NgForm]\n  });\n})();\n/**\n * Exports the required infrastructure and directives for reactive forms,\n * making them available for import by NgModules that import this module.\n * @see [Forms](guide/reactive-forms)\n *\n * @see [Reactive Forms Guide](/guide/reactive-forms)\n *\n */\n\n\nvar ReactiveFormsModule = /*#__PURE__*/(function () {\n  var ReactiveFormsModule = /*#__PURE__*/function () {\n    function ReactiveFormsModule() {\n      _classCallCheck(this, ReactiveFormsModule);\n    }\n\n    _createClass(ReactiveFormsModule, null, [{\n      key: \"withConfig\",\n      value:\n      /**\n       * \\@description\n       * Provides options for configuring the reactive forms module.\n       *\n       * @param {?} opts An object of configuration options `warnOnNgModelWithFormControl` Configures when\n       * to emit a warning when an `ngModel binding is used with reactive form directives.\n       * @return {?}\n       */\n      function withConfig(opts) {\n        return {\n          ngModule: ReactiveFormsModule,\n          providers: [{\n            provide: NG_MODEL_WITH_FORM_CONTROL_WARNING,\n            useValue: opts.warnOnNgModelWithFormControl\n          }]\n        };\n      }\n    }]);\n\n    return ReactiveFormsModule;\n  }();\n\n  ReactiveFormsModule.ɵfac = function ReactiveFormsModule_Factory(t) {\n    return new (t || ReactiveFormsModule)();\n  };\n\n  ReactiveFormsModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: ReactiveFormsModule\n  });\n  ReactiveFormsModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    providers: [FormBuilder, RadioControlRegistry],\n    imports: [InternalFormsSharedModule]\n  });\n  return ReactiveFormsModule;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ReactiveFormsModule, {\n    declarations: [FormControlDirective, FormGroupDirective, FormControlName, FormGroupName, FormArrayName],\n    exports: [InternalFormsSharedModule, FormControlDirective, FormGroupDirective, FormControlName, FormGroupName, FormArrayName]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n// This file only reexports content of the `src` folder. Keep it that way.\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { InternalFormsSharedModule as ɵangular_packages_forms_forms_bb, REACTIVE_DRIVEN_DIRECTIVES as ɵangular_packages_forms_forms_ba, SHARED_FORM_DIRECTIVES as ɵangular_packages_forms_forms_y, TEMPLATE_DRIVEN_DIRECTIVES as ɵangular_packages_forms_forms_z, CHECKBOX_VALUE_ACCESSOR as ɵangular_packages_forms_forms_a, DEFAULT_VALUE_ACCESSOR as ɵangular_packages_forms_forms_b, AbstractControlStatus as ɵangular_packages_forms_forms_c, ngControlStatusHost as ɵangular_packages_forms_forms_d, formDirectiveProvider as ɵangular_packages_forms_forms_e, formControlBinding as ɵangular_packages_forms_forms_f, modelGroupProvider as ɵangular_packages_forms_forms_g, NgNoValidate as ɵangular_packages_forms_forms_bg, NUMBER_VALUE_ACCESSOR as ɵangular_packages_forms_forms_bc, NumberValueAccessor as ɵangular_packages_forms_forms_bd, RADIO_VALUE_ACCESSOR as ɵangular_packages_forms_forms_h, RadioControlRegistry as ɵangular_packages_forms_forms_i, RANGE_VALUE_ACCESSOR as ɵangular_packages_forms_forms_be, RangeValueAccessor as ɵangular_packages_forms_forms_bf, NG_MODEL_WITH_FORM_CONTROL_WARNING as ɵangular_packages_forms_forms_j, formControlBinding$1 as ɵangular_packages_forms_forms_k, controlNameBinding as ɵangular_packages_forms_forms_l, formDirectiveProvider$1 as ɵangular_packages_forms_forms_m, formArrayNameProvider as ɵangular_packages_forms_forms_o, formGroupNameProvider as ɵangular_packages_forms_forms_n, SELECT_VALUE_ACCESSOR as ɵangular_packages_forms_forms_p, NgSelectMultipleOption as ɵangular_packages_forms_forms_r, SELECT_MULTIPLE_VALUE_ACCESSOR as ɵangular_packages_forms_forms_q, CHECKBOX_REQUIRED_VALIDATOR as ɵangular_packages_forms_forms_t, EMAIL_VALIDATOR as ɵangular_packages_forms_forms_u, MAX_LENGTH_VALIDATOR as ɵangular_packages_forms_forms_w, MIN_LENGTH_VALIDATOR as ɵangular_packages_forms_forms_v, PATTERN_VALIDATOR as ɵangular_packages_forms_forms_x, REQUIRED_VALIDATOR as ɵangular_packages_forms_forms_s, AbstractControlDirective, AbstractFormGroupDirective, CheckboxControlValueAccessor, ControlContainer, NG_VALUE_ACCESSOR, COMPOSITION_BUFFER_MODE, DefaultValueAccessor, NgControl, NgControlStatus, NgControlStatusGroup, NgForm, NgModel, NgModelGroup, RadioControlValueAccessor, FormControlDirective, FormControlName, FormGroupDirective, FormArrayName, FormGroupName, NgSelectOption, SelectControlValueAccessor, SelectMultipleControlValueAccessor, CheckboxRequiredValidator, EmailValidator, MaxLengthValidator, MinLengthValidator, PatternValidator, RequiredValidator, FormBuilder, AbstractControl, FormArray, FormControl, FormGroup, NG_ASYNC_VALIDATORS, NG_VALIDATORS, Validators, VERSION, FormsModule, ReactiveFormsModule }; //# sourceMappingURL=forms.js.map","map":null,"metadata":{},"sourceType":"module"}